
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b98  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08004d20  08004d20  0000cd20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004d28  08004d28  0000cd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000448  20000000  08004d2c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00012d7c  20000448  08005174  00010448  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200131c4  08017ef0  00010448  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY
  8 .debug_info   00008bea  00000000  00000000  00010476  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001d5f  00000000  00000000  00019060  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000039ce  00000000  00000000  0001adbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a70  00000000  00000000  0001e78d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000940  00000000  00000000  0001f1fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004b71  00000000  00000000  0001fb3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003951  00000000  00000000  000246ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  00027fff  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002408  00000000  00000000  00028070  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000448 	.word	0x20000448
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d08 	.word	0x08004d08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004d08 	.word	0x08004d08
 80001d0:	2000044c 	.word	0x2000044c
 80001d4:	20000448 	.word	0x20000448
 80001d8:	00000000 	.word	0x00000000

080001dc <memcpy>:
 80001dc:	4684      	mov	ip, r0
 80001de:	ea41 0300 	orr.w	r3, r1, r0
 80001e2:	f013 0303 	ands.w	r3, r3, #3
 80001e6:	d16d      	bne.n	80002c4 <memcpy+0xe8>
 80001e8:	3a40      	subs	r2, #64	; 0x40
 80001ea:	d341      	bcc.n	8000270 <memcpy+0x94>
 80001ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f0:	f840 3b04 	str.w	r3, [r0], #4
 80001f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f8:	f840 3b04 	str.w	r3, [r0], #4
 80001fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000200:	f840 3b04 	str.w	r3, [r0], #4
 8000204:	f851 3b04 	ldr.w	r3, [r1], #4
 8000208:	f840 3b04 	str.w	r3, [r0], #4
 800020c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000210:	f840 3b04 	str.w	r3, [r0], #4
 8000214:	f851 3b04 	ldr.w	r3, [r1], #4
 8000218:	f840 3b04 	str.w	r3, [r0], #4
 800021c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000220:	f840 3b04 	str.w	r3, [r0], #4
 8000224:	f851 3b04 	ldr.w	r3, [r1], #4
 8000228:	f840 3b04 	str.w	r3, [r0], #4
 800022c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000230:	f840 3b04 	str.w	r3, [r0], #4
 8000234:	f851 3b04 	ldr.w	r3, [r1], #4
 8000238:	f840 3b04 	str.w	r3, [r0], #4
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	3a40      	subs	r2, #64	; 0x40
 800026e:	d2bd      	bcs.n	80001ec <memcpy+0x10>
 8000270:	3230      	adds	r2, #48	; 0x30
 8000272:	d311      	bcc.n	8000298 <memcpy+0xbc>
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	3a10      	subs	r2, #16
 8000296:	d2ed      	bcs.n	8000274 <memcpy+0x98>
 8000298:	320c      	adds	r2, #12
 800029a:	d305      	bcc.n	80002a8 <memcpy+0xcc>
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	3a04      	subs	r2, #4
 80002a6:	d2f9      	bcs.n	800029c <memcpy+0xc0>
 80002a8:	3204      	adds	r2, #4
 80002aa:	d008      	beq.n	80002be <memcpy+0xe2>
 80002ac:	07d2      	lsls	r2, r2, #31
 80002ae:	bf1c      	itt	ne
 80002b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002b4:	f800 3b01 	strbne.w	r3, [r0], #1
 80002b8:	d301      	bcc.n	80002be <memcpy+0xe2>
 80002ba:	880b      	ldrh	r3, [r1, #0]
 80002bc:	8003      	strh	r3, [r0, #0]
 80002be:	4660      	mov	r0, ip
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2a08      	cmp	r2, #8
 80002c6:	d313      	bcc.n	80002f0 <memcpy+0x114>
 80002c8:	078b      	lsls	r3, r1, #30
 80002ca:	d08d      	beq.n	80001e8 <memcpy+0xc>
 80002cc:	f010 0303 	ands.w	r3, r0, #3
 80002d0:	d08a      	beq.n	80001e8 <memcpy+0xc>
 80002d2:	f1c3 0304 	rsb	r3, r3, #4
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	07db      	lsls	r3, r3, #31
 80002da:	bf1c      	itt	ne
 80002dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002e0:	f800 3b01 	strbne.w	r3, [r0], #1
 80002e4:	d380      	bcc.n	80001e8 <memcpy+0xc>
 80002e6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002ea:	f820 3b02 	strh.w	r3, [r0], #2
 80002ee:	e77b      	b.n	80001e8 <memcpy+0xc>
 80002f0:	3a04      	subs	r2, #4
 80002f2:	d3d9      	bcc.n	80002a8 <memcpy+0xcc>
 80002f4:	3a01      	subs	r2, #1
 80002f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002fa:	f800 3b01 	strb.w	r3, [r0], #1
 80002fe:	d2f9      	bcs.n	80002f4 <memcpy+0x118>
 8000300:	780b      	ldrb	r3, [r1, #0]
 8000302:	7003      	strb	r3, [r0, #0]
 8000304:	784b      	ldrb	r3, [r1, #1]
 8000306:	7043      	strb	r3, [r0, #1]
 8000308:	788b      	ldrb	r3, [r1, #2]
 800030a:	7083      	strb	r3, [r0, #2]
 800030c:	4660      	mov	r0, ip
 800030e:	4770      	bx	lr

08000310 <init_SPI1>:
/* --    this function initializes the SPI1 peripheral     --*/


/* initialize SPI1 */
void init_SPI1(void){
	
 8000310:	b580      	push	{r7, lr}
 8000312:	b09a      	sub	sp, #104	; 0x68
 8000314:	af00      	add	r7, sp, #0

	
	
	// enable clock for used IO pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	
 8000316:	2001      	movs	r0, #1
 8000318:	2101      	movs	r1, #1
 800031a:	f003 ff47 	bl	80041ac <RCC_AHB1PeriphClockCmd>
	 * PA6 = MISO
	 * PA7 = MOSI
	 */
	// MOSI PA7
	GPIO_InitStruct.GPIO_Pin = SPIx_MOSI_PIN ;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800031e:	2380      	movs	r3, #128	; 0x80
 8000320:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000322:	2302      	movs	r3, #2
 8000324:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000328:	2300      	movs	r3, #0
 800032a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 800032e:	2303      	movs	r3, #3
 8000330:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000334:	2302      	movs	r3, #2
 8000336:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	// SCK PA5
 800033a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800033e:	4869      	ldr	r0, [pc, #420]	; (80004e4 <init_SPI1+0x1d4>)
 8000340:	4619      	mov	r1, r3
 8000342:	f003 fc63 	bl	8003c0c <GPIO_Init>
	GPIO_InitStruct.GPIO_Pin = SPIx_SCK_PIN;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000346:	2320      	movs	r3, #32
 8000348:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800034a:	2302      	movs	r3, #2
 800034c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000350:	2300      	movs	r3, #0
 8000352:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000356:	2303      	movs	r3, #3
 8000358:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035c:	2302      	movs	r3, #2
 800035e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	// MISO PA6
 8000362:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000366:	485f      	ldr	r0, [pc, #380]	; (80004e4 <init_SPI1+0x1d4>)
 8000368:	4619      	mov	r1, r3
 800036a:	f003 fc4f 	bl	8003c0c <GPIO_Init>
	GPIO_InitStruct.GPIO_Pin = SPIx_MISO_PIN;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800036e:	2340      	movs	r3, #64	; 0x40
 8000370:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000372:	2302      	movs	r3, #2
 8000374:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000378:	2301      	movs	r3, #1
 800037a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800037e:	2303      	movs	r3, #3
 8000380:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000384:	2300      	movs	r3, #0
 8000386:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	
 800038a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800038e:	4855      	ldr	r0, [pc, #340]	; (80004e4 <init_SPI1+0x1d4>)
 8000390:	4619      	mov	r1, r3
 8000392:	f003 fc3b 	bl	8003c0c <GPIO_Init>
	// connect SPI1 pins to SPI alternate function
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_SPI1);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_SPI1);
 8000396:	4853      	ldr	r0, [pc, #332]	; (80004e4 <init_SPI1+0x1d4>)
 8000398:	2105      	movs	r1, #5
 800039a:	2205      	movs	r2, #5
 800039c:	f003 fdde 	bl	8003f5c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1);
 80003a0:	4850      	ldr	r0, [pc, #320]	; (80004e4 <init_SPI1+0x1d4>)
 80003a2:	2106      	movs	r1, #6
 80003a4:	2205      	movs	r2, #5
 80003a6:	f003 fdd9 	bl	8003f5c <GPIO_PinAFConfig>

 80003aa:	484e      	ldr	r0, [pc, #312]	; (80004e4 <init_SPI1+0x1d4>)
 80003ac:	2107      	movs	r1, #7
 80003ae:	2205      	movs	r2, #5
 80003b0:	f003 fdd4 	bl	8003f5c <GPIO_PinAFConfig>
	
	/* Configure the chip select pin
	   in this case we will use PA4 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_4;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80003b4:	2310      	movs	r3, #16
 80003b6:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80003be:	2300      	movs	r3, #0
 80003c0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80003c4:	2303      	movs	r3, #3
 80003c6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ca:	2301      	movs	r3, #1
 80003cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	
 80003d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80003d4:	4843      	ldr	r0, [pc, #268]	; (80004e4 <init_SPI1+0x1d4>)
 80003d6:	4619      	mov	r1, r3
 80003d8:	f003 fc18 	bl	8003c0c <GPIO_Init>
	GPIOA->BSRRL |= GPIO_Pin_4; // set PA4 high

 80003dc:	4b41      	ldr	r3, [pc, #260]	; (80004e4 <init_SPI1+0x1d4>)
 80003de:	4a41      	ldr	r2, [pc, #260]	; (80004e4 <init_SPI1+0x1d4>)
 80003e0:	8b12      	ldrh	r2, [r2, #24]
 80003e2:	b292      	uxth	r2, r2
 80003e4:	f042 0210 	orr.w	r2, r2, #16
 80003e8:	b292      	uxth	r2, r2
 80003ea:	831a      	strh	r2, [r3, #24]
	/* Configure the hard reset pin
	   in this case we will use PA3 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80003ec:	2308      	movs	r3, #8
 80003ee:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80003f0:	2301      	movs	r3, #1
 80003f2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80003f6:	2300      	movs	r3, #0
 80003f8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80003fc:	2303      	movs	r3, #3
 80003fe:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000402:	2301      	movs	r3, #1
 8000404:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	
 8000408:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800040c:	4835      	ldr	r0, [pc, #212]	; (80004e4 <init_SPI1+0x1d4>)
 800040e:	4619      	mov	r1, r3
 8000410:	f003 fbfc 	bl	8003c0c <GPIO_Init>
	GPIOA->BSRRL |= GPIO_Pin_3; // set PA3 high

 8000414:	4b33      	ldr	r3, [pc, #204]	; (80004e4 <init_SPI1+0x1d4>)
 8000416:	4a33      	ldr	r2, [pc, #204]	; (80004e4 <init_SPI1+0x1d4>)
 8000418:	8b12      	ldrh	r2, [r2, #24]
 800041a:	b292      	uxth	r2, r2
 800041c:	f042 0208 	orr.w	r2, r2, #8
 8000420:	b292      	uxth	r2, r2
 8000422:	831a      	strh	r2, [r3, #24]
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
	
	/* configure SPI1 in Mode 0 
	 * CPOL = 0 --> clock is low when idle
	 * CPHA = 0 --> data is sampled at the first edge
	 */
 8000424:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000428:	2101      	movs	r1, #1
 800042a:	f003 fef7 	bl	800421c <RCC_APB2PeriphClockCmd>
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // set to full duplex mode, seperate MOSI and MISO lines
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;     // transmit in master mode, NSS pin has to be always high
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b; // one packet of data is 8 bits wide
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;        // clock is low when idle
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;      // data sampled at second edge
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // set the NSS management to internal and pull internal NSS high
 800042e:	2300      	movs	r3, #0
 8000430:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; // SPI frequency is APB2 frequency / 4
 8000434:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000438:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;// data is transmitted MSB first
 800043c:	2300      	movs	r3, #0
 800043e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	SPI_Init(SPI1, &SPI_InitStruct); 
 8000442:	2300      	movs	r3, #0
 8000444:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	
 8000448:	2300      	movs	r3, #0
 800044a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	SPI_Cmd(SPI1, ENABLE);			
 800044e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000452:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	
 8000456:	2308      	movs	r3, #8
 8000458:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

 800045c:	2300      	movs	r3, #0
 800045e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	/* setup DMA */
 8000462:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000466:	4820      	ldr	r0, [pc, #128]	; (80004e8 <init_SPI1+0x1d8>)
 8000468:	4619      	mov	r1, r3
 800046a:	f003 ff0f 	bl	800428c <SPI_Init>
	
	// start with blank DMA configuration
	DMA_DeInit (SPIx_TX_DMA_STREAM);
	DMA_DeInit (SPIx_RX_DMA_STREAM);

	// check if DMA stream is disabled before enabling 
 800046e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000472:	2101      	movs	r1, #1
 8000474:	f003 fe9a 	bl	80041ac <RCC_AHB1PeriphClockCmd>

	/* Configure interrupt pin in this case we will use PA0 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000478:	2301      	movs	r3, #1
 800047a:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_Init(GPIOA, &GPIO_InitStruct);	
 800047c:	2300      	movs	r3, #0
 800047e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	
 8000482:	2300      	movs	r3, #0
 8000484:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	EXTI_InitTypeDef EXTI_InitStruct;
 8000488:	2303      	movs	r3, #3
 800048a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	NVIC_InitTypeDef NVIC_InitStruct1;
 800048e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000492:	4814      	ldr	r0, [pc, #80]	; (80004e4 <init_SPI1+0x1d4>)
 8000494:	4619      	mov	r1, r3
 8000496:	f003 fbb9 	bl	8003c0c <GPIO_Init>
	/* Connect EXTI Line to appropriate GPIO Pin */ 
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
	
	/* Configure EXTI Line */
 800049a:	2000      	movs	r0, #0
 800049c:	2100      	movs	r1, #0
 800049e:	f004 f8e5 	bl	800466c <SYSCFG_EXTILineConfig>
	EXTI_InitStruct.EXTI_Line = EXTI_Line0;
 	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 80004a2:	2301      	movs	r3, #1
 80004a4:	607b      	str	r3, [r7, #4]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80004a6:	2300      	movs	r3, #0
 80004a8:	723b      	strb	r3, [r7, #8]
	EXTI_Init(&EXTI_InitStruct);
 80004aa:	230c      	movs	r3, #12
 80004ac:	727b      	strb	r3, [r7, #9]
 	
 80004ae:	2301      	movs	r3, #1
 80004b0:	72bb      	strb	r3, [r7, #10]
 	/* Enable and set EXTI Line Interrupt */
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	4618      	mov	r0, r3
 80004b6:	f003 fa51 	bl	800395c <EXTI_Init>
	NVIC_InitStruct1.NVIC_IRQChannel = EXTI0_IRQn;
 	NVIC_InitStruct1.NVIC_IRQChannelPreemptionPriority = 0x1;
	NVIC_InitStruct1.NVIC_IRQChannelSubPriority = 0x0;
 80004ba:	2306      	movs	r3, #6
 80004bc:	733b      	strb	r3, [r7, #12]
 	NVIC_InitStruct1.NVIC_IRQChannelCmd = ENABLE;
 80004be:	2301      	movs	r3, #1
 80004c0:	737b      	strb	r3, [r7, #13]
	NVIC_Init(&NVIC_InitStruct1);
 80004c2:	2301      	movs	r3, #1
 80004c4:	73bb      	strb	r3, [r7, #14]

 80004c6:	2301      	movs	r3, #1
 80004c8:	73fb      	strb	r3, [r7, #15]

 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	4618      	mov	r0, r3
 80004d0:	f003 f9ca 	bl	8003868 <NVIC_Init>
	
}
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <init_SPI1+0x1d8>)
 80004d6:	2101      	movs	r1, #1
 80004d8:	f003 ffca 	bl	8004470 <SPI_Cmd>

void DMA2_Stream2_IRQHandler()
 80004dc:	3768      	adds	r7, #104	; 0x68
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020000 	.word	0x40020000
 80004e8:	40013000 	.word	0x40013000

080004ec <SPI1_send>:
	 xSemaphoreGive( xSemaphoreDMASPI );
//	xHigherPriorityTaskWoken = pdFalse;
//	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 	taskEXIT_CRITICAL();  
 }
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
}


 80004f6:	bf00      	nop
 80004f8:	480f      	ldr	r0, [pc, #60]	; (8000538 <SPI1_send+0x4c>)
 80004fa:	2102      	movs	r1, #2
 80004fc:	f004 f858 	bl	80045b0 <SPI_I2S_GetFlagStatus>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0f8      	beq.n	80004f8 <SPI1_send+0xc>
/* This funtion is used to transmit and/ receive data 
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	b29b      	uxth	r3, r3
 800050a:	480b      	ldr	r0, [pc, #44]	; (8000538 <SPI1_send+0x4c>)
 800050c:	4619      	mov	r1, r3
 800050e:	f004 f81f 	bl	8004550 <SPI_I2S_SendData>
 * with SPI1
 * 			data --> data to be transmitted
 8000512:	bf00      	nop
 8000514:	4808      	ldr	r0, [pc, #32]	; (8000538 <SPI1_send+0x4c>)
 8000516:	2101      	movs	r1, #1
 8000518:	f004 f84a 	bl	80045b0 <SPI_I2S_GetFlagStatus>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d0f8      	beq.n	8000514 <SPI1_send+0x28>
 * 			returns received value
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <SPI1_send+0x4c>)
 8000524:	f003 ffe6 	bl	80044f4 <SPI_I2S_ReceiveData>
 8000528:	4603      	mov	r3, r0
 800052a:	73fb      	strb	r3, [r7, #15]

 800052c:	7bfb      	ldrb	r3, [r7, #15]
*/
uint8_t SPI1_send(uint8_t data){
 800052e:	4618      	mov	r0, r3
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40013000 	.word	0x40013000

0800053c <SPI1_recive>:

	
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	SPI_I2S_SendData(SPI1, data);
	
 8000540:	bf00      	nop
 8000542:	480d      	ldr	r0, [pc, #52]	; (8000578 <SPI1_recive+0x3c>)
 8000544:	2102      	movs	r1, #2
 8000546:	f004 f833 	bl	80045b0 <SPI_I2S_GetFlagStatus>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d0f8      	beq.n	8000542 <SPI1_recive+0x6>
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE));
 8000550:	4809      	ldr	r0, [pc, #36]	; (8000578 <SPI1_recive+0x3c>)
 8000552:	2100      	movs	r1, #0
 8000554:	f003 fffc 	bl	8004550 <SPI_I2S_SendData>
	uint8_t d = SPI_I2S_ReceiveData(SPI1);
	return d;
 8000558:	bf00      	nop
 800055a:	4807      	ldr	r0, [pc, #28]	; (8000578 <SPI1_recive+0x3c>)
 800055c:	2101      	movs	r1, #1
 800055e:	f004 f827 	bl	80045b0 <SPI_I2S_GetFlagStatus>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0f8      	beq.n	800055a <SPI1_recive+0x1e>
 	
 8000568:	4803      	ldr	r0, [pc, #12]	; (8000578 <SPI1_recive+0x3c>)
 800056a:	f003 ffc3 	bl	80044f4 <SPI_I2S_ReceiveData>
 800056e:	4603      	mov	r3, r0
 8000570:	b2db      	uxtb	r3, r3
}

 8000572:	4618      	mov	r0, r3
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40013000 	.word	0x40013000

0800057c <spi_send>:
		int i;
		for (i = 4 ; i < data_len+4; i++) 
			buffer[i] = (data_buf[i-4]);
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, data_len + 4);
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
		CSON(); // chip select 
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	460b      	mov	r3, r1
 8000584:	603a      	str	r2, [r7, #0]
 8000586:	4602      	mov	r2, r0
 8000588:	80fa      	strh	r2, [r7, #6]
 800058a:	80bb      	strh	r3, [r7, #4]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <spi_send+0x94>)
 800058e:	4a20      	ldr	r2, [pc, #128]	; (8000610 <spi_send+0x94>)
 8000590:	8b52      	ldrh	r2, [r2, #26]
 8000592:	b292      	uxth	r2, r2
 8000594:	f042 0210 	orr.w	r2, r2, #16
 8000598:	b292      	uxth	r2, r2
 800059a:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);	
		/* Block until the semaphore is given */
 800059c:	88fb      	ldrh	r3, [r7, #6]
 800059e:	0a1b      	lsrs	r3, r3, #8
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ffa1 	bl	80004ec <SPI1_send>
        	 xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff9c 	bl	80004ec <SPI1_send>

 80005b4:	88bb      	ldrh	r3, [r7, #4]
 80005b6:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80005ba:	121b      	asrs	r3, r3, #8
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ff90 	bl	80004ec <SPI1_send>
	//	CSOFF(); // chip deselect 
 80005cc:	88bb      	ldrh	r3, [r7, #4]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ff8b 	bl	80004ec <SPI1_send>
			
	
}
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	e009      	b.n	80005f0 <spi_send+0x74>
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	683a      	ldr	r2, [r7, #0]
 80005e0:	4413      	add	r3, r2
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ff81 	bl	80004ec <SPI1_send>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3301      	adds	r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	88ba      	ldrh	r2, [r7, #4]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	dcf1      	bgt.n	80005dc <spi_send+0x60>

 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <spi_send+0x94>)
 80005fa:	4a05      	ldr	r2, [pc, #20]	; (8000610 <spi_send+0x94>)
 80005fc:	8b12      	ldrh	r2, [r2, #24]
 80005fe:	b292      	uxth	r2, r2
 8000600:	f042 0210 	orr.w	r2, r2, #16
 8000604:	b292      	uxth	r2, r2
 8000606:	831a      	strh	r2, [r3, #24]
void spi_dma_send2B(uint16_t address,  uint16_t data_buf)
{
	uint8_t buffer[6];
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40020000 	.word	0x40020000

08000614 <spi_send2B>:
	uint16_t data_len = 2;
	buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
	buffer[1] = ((address & 0x00ff)); //address byte 2 
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	4602      	mov	r2, r0
 800061c:	460b      	mov	r3, r1
 800061e:	80fa      	strh	r2, [r7, #6]
 8000620:	80bb      	strh	r3, [r7, #4]
	buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 8000622:	2302      	movs	r3, #2
 8000624:	81fb      	strh	r3, [r7, #14]
	 buffer[3] = (data_len & 0x00ff);
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <spi_send2B+0x8c>)
 8000628:	4a1d      	ldr	r2, [pc, #116]	; (80006a0 <spi_send2B+0x8c>)
 800062a:	8b52      	ldrh	r2, [r2, #26]
 800062c:	b292      	uxth	r2, r2
 800062e:	f042 0210 	orr.w	r2, r2, #16
 8000632:	b292      	uxth	r2, r2
 8000634:	835a      	strh	r2, [r3, #26]
	 buffer[4] = ((data_buf & 0xff00) >> 8);
	 buffer[5] = (data_buf & 0x00ff);
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	b29b      	uxth	r3, r3
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff54 	bl	80004ec <SPI1_send>
	DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 6);
 8000644:	88fb      	ldrh	r3, [r7, #6]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff4f 	bl	80004ec <SPI1_send>
	SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 800064e:	89fb      	ldrh	r3, [r7, #14]
 8000650:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000654:	121b      	asrs	r3, r3, #8
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800065c:	b2db      	uxtb	r3, r3
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff43 	bl	80004ec <SPI1_send>
	CSON(); // chip select 
 8000666:	89fb      	ldrh	r3, [r7, #14]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ff3e 	bl	80004ec <SPI1_send>
	DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
	DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);	
 8000670:	88bb      	ldrh	r3, [r7, #4]
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	b29b      	uxth	r3, r3
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff37 	bl	80004ec <SPI1_send>
	/* Block until the semaphore is given */
 800067e:	88bb      	ldrh	r3, [r7, #4]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff32 	bl	80004ec <SPI1_send>
        xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
	
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <spi_send2B+0x8c>)
 800068a:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <spi_send2B+0x8c>)
 800068c:	8b12      	ldrh	r2, [r2, #24]
 800068e:	b292      	uxth	r2, r2
 8000690:	f042 0210 	orr.w	r2, r2, #16
 8000694:	b292      	uxth	r2, r2
 8000696:	831a      	strh	r2, [r3, #24]
//	CSOFF(); // chip deselect 
			
}
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020000 	.word	0x40020000

080006a4 <spi_sendByte>:

void spi_dma_sendByte(uint16_t address,  uint8_t data_buf)
{
		uint8_t buffer[5];
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4602      	mov	r2, r0
 80006ac:	460b      	mov	r3, r1
 80006ae:	80fa      	strh	r2, [r7, #6]
 80006b0:	717b      	strb	r3, [r7, #5]
		uint16_t data_len=0x1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	81fb      	strh	r3, [r7, #14]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <spi_sendByte+0x7c>)
 80006b8:	4a19      	ldr	r2, [pc, #100]	; (8000720 <spi_sendByte+0x7c>)
 80006ba:	8b52      	ldrh	r2, [r2, #26]
 80006bc:	b292      	uxth	r2, r2
 80006be:	f042 0210 	orr.w	r2, r2, #16
 80006c2:	b292      	uxth	r2, r2
 80006c4:	835a      	strh	r2, [r3, #26]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff0c 	bl	80004ec <SPI1_send>
		buffer[3] = (data_len & 0x00ff);
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff07 	bl	80004ec <SPI1_send>
		buffer[4] = data_buf ; 
 80006de:	89fb      	ldrh	r3, [r7, #14]
 80006e0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80006e4:	121b      	asrs	r3, r3, #8
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fefb 	bl	80004ec <SPI1_send>
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 5);
 80006f6:	89fb      	ldrh	r3, [r7, #14]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fef6 	bl	80004ec <SPI1_send>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
		CSON(); // chip select 
 8000700:	797b      	ldrb	r3, [r7, #5]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fef2 	bl	80004ec <SPI1_send>
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <spi_sendByte+0x7c>)
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <spi_sendByte+0x7c>)
 800070c:	8b12      	ldrh	r2, [r2, #24]
 800070e:	b292      	uxth	r2, r2
 8000710:	f042 0210 	orr.w	r2, r2, #16
 8000714:	b292      	uxth	r2, r2
 8000716:	831a      	strh	r2, [r3, #24]
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);
		/* Block until the semaphore is given */
	        xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40020000 	.word	0x40020000

08000724 <spi_read2B>:
				
//		CSOFF(); // chip deselect 
			
}
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	80fb      	strh	r3, [r7, #6]

 800072e:	2302      	movs	r3, #2
 8000730:	817b      	strh	r3, [r7, #10]

void spi_send(uint16_t address, uint16_t data_len, uint8_t *data_buf)
 8000732:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <spi_read2B+0xa0>)
 8000734:	4a23      	ldr	r2, [pc, #140]	; (80007c4 <spi_read2B+0xa0>)
 8000736:	8b52      	ldrh	r2, [r2, #26]
 8000738:	b292      	uxth	r2, r2
 800073a:	f042 0210 	orr.w	r2, r2, #16
 800073e:	b292      	uxth	r2, r2
 8000740:	835a      	strh	r2, [r3, #26]
{
		GPIOA->BSRRH |= GPIO_Pin_4; // chip select  
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	0a1b      	lsrs	r3, r3, #8
 8000746:	b29b      	uxth	r3, r3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fece 	bl	80004ec <SPI1_send>
		
 8000750:	88fb      	ldrh	r3, [r7, #6]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fec9 	bl	80004ec <SPI1_send>
		SPI1_send((address & 0xff00) >> 8); // addres byte 1 
 800075a:	897b      	ldrh	r3, [r7, #10]
 800075c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000760:	121b      	asrs	r3, r3, #8
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fec1 	bl	80004ec <SPI1_send>
		SPI1_send((address & 0x00ff)); //address byte 2 
 800076a:	897b      	ldrh	r3, [r7, #10]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff febc 	bl	80004ec <SPI1_send>
		SPI1_send((0x80 | (data_len & 0x7f00) >> 8 ));
		SPI1_send(data_len & 0x00ff);

 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	e00b      	b.n	8000792 <spi_read2B+0x6e>
		int i;
		for (i = 0; i < data_len; i++) SPI1_send(data_buf[i]);
		GPIOA->BSRRL |= GPIO_Pin_4; // chip deselect 
 800077a:	f7ff fedf 	bl	800053c <SPI1_recive>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	f107 0108 	add.w	r1, r7, #8
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	440b      	add	r3, r1
 800078a:	701a      	strb	r2, [r3, #0]
		
		SPI1_send((address & 0xff00) >> 8); // addres byte 1 
		SPI1_send((address & 0x00ff)); //address byte 2 
		SPI1_send((0x80 | (data_len & 0x7f00) >> 8 ));
		SPI1_send(data_len & 0x00ff);

 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3301      	adds	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	897a      	ldrh	r2, [r7, #10]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	429a      	cmp	r2, r3
 8000798:	dcef      	bgt.n	800077a <spi_read2B+0x56>
		for (i = 0; i < data_len; i++) SPI1_send(data_buf[i]);
		GPIOA->BSRRL |= GPIO_Pin_4; // chip deselect 
			
	
}

 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <spi_read2B+0xa0>)
 800079c:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <spi_read2B+0xa0>)
 800079e:	8b12      	ldrh	r2, [r2, #24]
 80007a0:	b292      	uxth	r2, r2
 80007a2:	f042 0210 	orr.w	r2, r2, #16
 80007a6:	b292      	uxth	r2, r2
 80007a8:	831a      	strh	r2, [r3, #24]
void spi_send2B(uint16_t address,  uint16_t data_buf)
{
 80007aa:	2300      	movs	r3, #0
 80007ac:	817b      	strh	r3, [r7, #10]
		int16_t data_len = 2; 
 80007ae:	7a3b      	ldrb	r3, [r7, #8]
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	7a7b      	ldrb	r3, [r7, #9]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	b29b      	uxth	r3, r3
		GPIOA->BSRRH |= GPIO_Pin_4; // chip select  
		
 80007bc:	4618      	mov	r0, r3
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40020000 	.word	0x40020000

080007c8 <spi_read>:
		SPI1_send((address & 0xff00) >> 8); // addres byte 1 
		SPI1_send((address & 0x00ff)); //address byte 2 
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	460b      	mov	r3, r1
 80007d0:	603a      	str	r2, [r7, #0]
 80007d2:	4602      	mov	r2, r0
 80007d4:	80fa      	strh	r2, [r7, #6]
 80007d6:	80bb      	strh	r3, [r7, #4]
		SPI1_send((0x80 | (data_len & 0x7f00) >> 8 ));
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <spi_read+0x8c>)
 80007da:	4a1e      	ldr	r2, [pc, #120]	; (8000854 <spi_read+0x8c>)
 80007dc:	8b52      	ldrh	r2, [r2, #26]
 80007de:	b292      	uxth	r2, r2
 80007e0:	f042 0210 	orr.w	r2, r2, #16
 80007e4:	b292      	uxth	r2, r2
 80007e6:	835a      	strh	r2, [r3, #26]
		SPI1_send(data_len & 0x00ff);

 80007e8:	88fb      	ldrh	r3, [r7, #6]
 80007ea:	0a1b      	lsrs	r3, r3, #8
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fe7b 	bl	80004ec <SPI1_send>
		SPI1_send((data_buf & 0xff00) >> 8);
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fe76 	bl	80004ec <SPI1_send>
		SPI1_send(data_buf & 0x00ff);
 8000800:	88bb      	ldrh	r3, [r7, #4]
 8000802:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000806:	121b      	asrs	r3, r3, #8
 8000808:	b2db      	uxtb	r3, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fe6e 	bl	80004ec <SPI1_send>

 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fe69 	bl	80004ec <SPI1_send>
		GPIOA->BSRRL |= GPIO_Pin_4; // chip deselect 
			
	
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	e009      	b.n	8000834 <spi_read+0x6c>
}


 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	683a      	ldr	r2, [r7, #0]
 8000824:	18d4      	adds	r4, r2, r3
 8000826:	f7ff fe89 	bl	800053c <SPI1_recive>
 800082a:	4603      	mov	r3, r0
 800082c:	7023      	strb	r3, [r4, #0]
		SPI1_send((data_buf & 0xff00) >> 8);
		SPI1_send(data_buf & 0x00ff);

		GPIOA->BSRRL |= GPIO_Pin_4; // chip deselect 
			
	
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	3301      	adds	r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	88ba      	ldrh	r2, [r7, #4]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	429a      	cmp	r2, r3
 800083a:	dcf1      	bgt.n	8000820 <spi_read+0x58>
}


void spi_sendByte(uint16_t address,  uint8_t data_buf)
{
		int16_t data_len = 1; 
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <spi_read+0x8c>)
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <spi_read+0x8c>)
 8000840:	8b12      	ldrh	r2, [r2, #24]
 8000842:	b292      	uxth	r2, r2
 8000844:	f042 0210 	orr.w	r2, r2, #16
 8000848:	b292      	uxth	r2, r2
 800084a:	831a      	strh	r2, [r3, #24]
		GPIOA->BSRRH |= GPIO_Pin_4; // chip select  
		
		SPI1_send((address & 0xff00) >> 8); // addres byte 1 
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bd90      	pop	{r4, r7, pc}
 8000852:	bf00      	nop
 8000854:	40020000 	.word	0x40020000

08000858 <wiznet_initialize>:
			W5200_Sn_SR_SOCK_PPPOE,	// mode is PPPOE
		};


void wiznet_initialize(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
	// hwreset
	//RESET_HIGH();
	//RESET_LOW();
		
	//SW reset 
	spi_sendByte(W5200_MR, W5200_MR_RST);
 800085e:	2000      	movs	r0, #0
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	f7ff ff1f 	bl	80006a4 <spi_sendByte>
	// wait until reset complete
	uint8_t data = W5200_MR_RST; 
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	70fb      	strb	r3, [r7, #3]
	while((data  && W5200_MR_RST) == W5200_MR_RST)
 800086a:	bf00      	nop
	{
		spi_read(W5200_MR, 1, &data);
	}
		
	// PING enable, PPPoE disable 
	spi_sendByte(W5200_MR, 0);
 800086c:	2000      	movs	r0, #0
 800086e:	2100      	movs	r1, #0
 8000870:	f7ff ff18 	bl	80006a4 <spi_sendByte>
	// all socket interrupts sets to nonmask. set '1' is interrupt enable. 
	spi_sendByte(W5200_IMR, 0xff);
 8000874:	2016      	movs	r0, #22
 8000876:	21ff      	movs	r1, #255	; 0xff
 8000878:	f7ff ff14 	bl	80006a4 <spi_sendByte>
	// IP-confilict, PPPoE Close are mask. set '0' interupt disable. 
	spi_sendByte(W5200_IMR2, 0);
 800087c:	2036      	movs	r0, #54	; 0x36
 800087e:	2100      	movs	r1, #0
 8000880:	f7ff ff10 	bl	80006a4 <spi_sendByte>
	// set timeoput to 200msec
	spi_sendByte(W5200_RTR, 200);
 8000884:	2017      	movs	r0, #23
 8000886:	21c8      	movs	r1, #200	; 0xc8
 8000888:	f7ff ff0c 	bl	80006a4 <spi_sendByte>
	// set retry count register to 3rd
	spi_sendByte(W5200_RCR, 3);
 800088c:	2019      	movs	r0, #25
 800088e:	2103      	movs	r1, #3
 8000890:	f7ff ff08 	bl	80006a4 <spi_sendByte>

	int n = 0; 
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]

	for (n = 0; n < 8; n++)
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	e02b      	b.n	80008f6 <wiznet_initialize+0x9e>
	{
		spi_sendByte(W5200_Sn_RXMEM_SIZE(n), 0x2);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	021b      	lsls	r3, r3, #8
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80008aa:	331e      	adds	r3, #30
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	2102      	movs	r1, #2
 80008b2:	f7ff fef7 	bl	80006a4 <spi_sendByte>
		spi_sendByte(W5200_Sn_TXMEM_SIZE(n),0x2);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	b29b      	uxth	r3, r3
 80008be:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80008c2:	331f      	adds	r3, #31
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	2102      	movs	r1, #2
 80008ca:	f7ff feeb 	bl	80006a4 <spi_sendByte>
		spi_sendByte(W5200_Sn_IMR(n), 0xff);	
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80008da:	332c      	adds	r3, #44	; 0x2c
 80008dc:	b29b      	uxth	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	21ff      	movs	r1, #255	; 0xff
 80008e2:	f7ff fedf 	bl	80006a4 <spi_sendByte>
		socket_flg[n] = 0;
 80008e6:	4a07      	ldr	r2, [pc, #28]	; (8000904 <wiznet_initialize+0xac>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4413      	add	r3, r2
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
	// set retry count register to 3rd
	spi_sendByte(W5200_RCR, 3);

	int n = 0; 

	for (n = 0; n < 8; n++)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3301      	adds	r3, #1
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b07      	cmp	r3, #7
 80008fa:	ddd0      	ble.n	800089e <wiznet_initialize+0x46>
			
	}	
	
	
	
}
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000464 	.word	0x20000464

08000908 <wiznet_set_hardware_address>:

void  wiznet_set_hardware_address(const macaddress_t address)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

	spi_send(W5200_SHAR, 6, address);
 8000910:	2009      	movs	r0, #9
 8000912:	2106      	movs	r1, #6
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	f7ff fe31 	bl	800057c <spi_send>
}
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <wiznet_configure_network>:
}

void  wiznet_configure_network(const ipv4address_t address,
                             const ipv4address_t subnet,
                             const ipv4address_t gateway)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
	spi_send(W5200_SIPR, 4, address);
 800092c:	200f      	movs	r0, #15
 800092e:	2104      	movs	r1, #4
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	f7ff fe23 	bl	800057c <spi_send>
	spi_send(W5200_SUBR, 4, subnet);
 8000936:	2005      	movs	r0, #5
 8000938:	2104      	movs	r1, #4
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	f7ff fe1e 	bl	800057c <spi_send>
	spi_send(W5200_GAR, 4 , gateway);
 8000940:	2001      	movs	r0, #1
 8000942:	2104      	movs	r1, #4
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	f7ff fe19 	bl	800057c <spi_send>
}
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <get_CRStatus>:
}



uint8_t get_CRStatus(uint8_t sck_fd)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
	uint8_t var; 
	spi_read(W5200_Sn_CR(sck_fd), 1, &var);
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	b29b      	uxth	r3, r3
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	b29b      	uxth	r3, r3
 8000962:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000966:	3301      	adds	r3, #1
 8000968:	b29a      	uxth	r2, r3
 800096a:	f107 030f 	add.w	r3, r7, #15
 800096e:	4610      	mov	r0, r2
 8000970:	2101      	movs	r1, #1
 8000972:	461a      	mov	r2, r3
 8000974:	f7ff ff28 	bl	80007c8 <spi_read>
	return var;
 8000978:	7bfb      	ldrb	r3, [r7, #15]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop

08000984 <get_SRStatus>:


uint8_t get_SRStatus(uint8_t sck_fd)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	uint8_t var; 
	spi_read(W5200_Sn_SR(sck_fd), 1, &var);
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	b29b      	uxth	r3, r3
 8000992:	021b      	lsls	r3, r3, #8
 8000994:	b29b      	uxth	r3, r3
 8000996:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800099a:	3303      	adds	r3, #3
 800099c:	b29a      	uxth	r2, r3
 800099e:	f107 030f 	add.w	r3, r7, #15
 80009a2:	4610      	mov	r0, r2
 80009a4:	2101      	movs	r1, #1
 80009a6:	461a      	mov	r2, r3
 80009a8:	f7ff ff0e 	bl	80007c8 <spi_read>
	return var;
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop

080009b8 <get_TXFSRStatus>:

uint16_t get_TXFSRStatus(uint8_t sck_fd)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	return spi_read2B(W5200_Sn_TX_FSR(sck_fd));
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	021b      	lsls	r3, r3, #8
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80009ce:	3320      	adds	r3, #32
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fea6 	bl	8000724 <spi_read2B>
 80009d8:	4603      	mov	r3, r0
	
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop

080009e4 <get_TXWRStatus>:

uint16_t get_TXWRStatus(uint8_t sck_fd)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	return spi_read2B(W5200_Sn_TX_WR(sck_fd));
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80009fa:	3324      	adds	r3, #36	; 0x24
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fe90 	bl	8000724 <spi_read2B>
 8000a04:	4603      	mov	r3, r0

	
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop

08000a10 <get_TXRD>:
uint16_t get_TXRD(uint8_t sck_fd)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	return	spi_read2B(W5200_Sn_TX_RD(sck_fd));
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	021b      	lsls	r3, r3, #8
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000a26:	3322      	adds	r3, #34	; 0x22
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fe7a 	bl	8000724 <spi_read2B>
 8000a30:	4603      	mov	r3, r0
	
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop

08000a3c <set_TXWR>:

void  set_TXWR(uint8_t sck_fd, uint16_t val)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4602      	mov	r2, r0
 8000a44:	460b      	mov	r3, r1
 8000a46:	71fa      	strb	r2, [r7, #7]
 8000a48:	80bb      	strh	r3, [r7, #4]
 	spi_send2B(W5200_Sn_TX_WR(sck_fd), val);
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000a56:	3324      	adds	r3, #36	; 0x24
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f7ff fdd8 	bl	8000614 <spi_send2B>
}
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop

08000a6c <get_RXRSR>:

uint16_t get_RXRSR(uint8_t sck_fd)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	return spi_read2B(W5200_Sn_RX_RSR(sck_fd)); 
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	021b      	lsls	r3, r3, #8
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000a82:	3326      	adds	r3, #38	; 0x26
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fe4c 	bl	8000724 <spi_read2B>
 8000a8c:	4603      	mov	r3, r0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop

08000a98 <get_RXRD>:

uint16_t get_RXRD(uint8_t sck_fd)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
	return spi_read2B(W5200_Sn_RX_RD(sck_fd));
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	021b      	lsls	r3, r3, #8
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000aae:	3328      	adds	r3, #40	; 0x28
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fe36 	bl	8000724 <spi_read2B>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop

08000ac4 <set_RXRD>:

void set_RXRD(uint8_t sck_fd, uint16_t val)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4602      	mov	r2, r0
 8000acc:	460b      	mov	r3, r1
 8000ace:	71fa      	strb	r2, [r7, #7]
 8000ad0:	80bb      	strh	r3, [r7, #4]
	spi_send2B(W5200_Sn_RX_RD(sck_fd), val);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	021b      	lsls	r3, r3, #8
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000ade:	3328      	adds	r3, #40	; 0x28
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	4610      	mov	r0, r2
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f7ff fd94 	bl	8000614 <spi_send2B>
}
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop

08000af4 <write_memory>:
/*---------------------------------------------------------------------------
	write data to socket TX memory
----------------------------------------------------------------------------*/

void	write_memory(uint8_t sck_fd, uint16_t write_ptr, uint8_t *buf, uint16_t len)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60ba      	str	r2, [r7, #8]
 8000afc:	4602      	mov	r2, r0
 8000afe:	73fa      	strb	r2, [r7, #15]
 8000b00:	460a      	mov	r2, r1
 8000b02:	81ba      	strh	r2, [r7, #12]
 8000b04:	80fb      	strh	r3, [r7, #6]
	uint16_t	memory_addr, offset;
	uint16_t	upper_size, left_size;

	// calculate offset address 
	offset = write_ptr & 0x07ff;
 8000b06:	89bb      	ldrh	r3, [r7, #12]
 8000b08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b0c:	82fb      	strh	r3, [r7, #22]

	// calculate physical memory start address
	memory_addr = W5200_SOCKET_TX_BASE(sck_fd)  + offset;
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	8afb      	ldrh	r3, [r7, #22]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000b24:	82bb      	strh	r3, [r7, #20]

	// if overflow socket TX memory ?
	if(offset + len > W5200_Sn_TXMEM_SIZE(sck_fd) +1 ){
 8000b26:	8afa      	ldrh	r2, [r7, #22]
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	441a      	add	r2, r3
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	021b      	lsls	r3, r3, #8
 8000b30:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000b34:	3320      	adds	r3, #32
 8000b36:	429a      	cmp	r2, r3
 8000b38:	dd2a      	ble.n	8000b90 <write_memory+0x9c>

		// copy upper_size bytes
		upper_size = W5200_SOCKET_TX_BASE(sck_fd) - offset;
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	8afb      	ldrh	r3, [r7, #22]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000b50:	827b      	strh	r3, [r7, #18]
		spi_send( memory_addr,upper_size, buf);
 8000b52:	8aba      	ldrh	r2, [r7, #20]
 8000b54:	8a7b      	ldrh	r3, [r7, #18]
 8000b56:	4610      	mov	r0, r2
 8000b58:	4619      	mov	r1, r3
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	f7ff fd0e 	bl	800057c <spi_send>
		buf += upper_size;
 8000b60:	8a7b      	ldrh	r3, [r7, #18]
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	4413      	add	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]

		// copy left size bytes
		left_size = len - upper_size;
 8000b68:	88fa      	ldrh	r2, [r7, #6]
 8000b6a:	8a7b      	ldrh	r3, [r7, #18]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	823b      	strh	r3, [r7, #16]
		spi_send( W5200_SOCKET_TX_BASE(sck_fd),
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	021b      	lsls	r3, r3, #8
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	8a3b      	ldrh	r3, [r7, #16]
 8000b84:	4610      	mov	r0, r2
 8000b86:	4619      	mov	r1, r3
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	f7ff fcf7 	bl	800057c <spi_send>
 8000b8e:	e006      	b.n	8000b9e <write_memory+0xaa>
		left_size,  buf);

	}else{

		// copy len size bytes
		spi_send( memory_addr,len,  buf);
 8000b90:	8aba      	ldrh	r2, [r7, #20]
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	4610      	mov	r0, r2
 8000b96:	4619      	mov	r1, r3
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	f7ff fcef 	bl	800057c <spi_send>
	}
}
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <read_memory>:
/*---------------------------------------------------------------------------
	read data from socket RX memory
----------------------------------------------------------------------------*/

void	read_memory(uint8_t sck_fd, uint16_t read_ptr, uint8_t *buf, uint16_t len)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60ba      	str	r2, [r7, #8]
 8000bac:	4602      	mov	r2, r0
 8000bae:	73fa      	strb	r2, [r7, #15]
 8000bb0:	460a      	mov	r2, r1
 8000bb2:	81ba      	strh	r2, [r7, #12]
 8000bb4:	80fb      	strh	r3, [r7, #6]
	uint16_t	memory_addr, offset;
	uint16_t	upper_size, left_size;

	// calculate offset address 
	offset = read_ptr & 0x07ff;
 8000bb6:	89bb      	ldrh	r3, [r7, #12]
 8000bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000bbc:	82fb      	strh	r3, [r7, #22]

	// calculate physical memory start address
	memory_addr = W5200_SOCKET_RX_BASE(sck_fd)  + offset;
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	021b      	lsls	r3, r3, #8
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	8afb      	ldrh	r3, [r7, #22]
 8000bcc:	4413      	add	r3, r2
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000bd4:	82bb      	strh	r3, [r7, #20]

	// if overflow socket RX memory ?
	if(offset + len > 0x0800){
 8000bd6:	8afa      	ldrh	r2, [r7, #22]
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4413      	add	r3, r2
 8000bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000be0:	dd22      	ble.n	8000c28 <read_memory+0x84>

		// copy upper_size bytes
		upper_size = 0x0800 - offset;
 8000be2:	8afb      	ldrh	r3, [r7, #22]
 8000be4:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000be8:	827b      	strh	r3, [r7, #18]
		spi_read( memory_addr,upper_size,  buf);
 8000bea:	8aba      	ldrh	r2, [r7, #20]
 8000bec:	8a7b      	ldrh	r3, [r7, #18]
 8000bee:	4610      	mov	r0, r2
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f7ff fde8 	bl	80007c8 <spi_read>
		buf += upper_size;
 8000bf8:	8a7b      	ldrh	r3, [r7, #18]
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	60bb      	str	r3, [r7, #8]

		// copy left size bytes
		left_size = len - upper_size;
 8000c00:	88fa      	ldrh	r2, [r7, #6]
 8000c02:	8a7b      	ldrh	r3, [r7, #18]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	823b      	strh	r3, [r7, #16]
		spi_read(W5200_SOCKET_RX_BASE(sck_fd), left_size, buf);
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	021b      	lsls	r3, r3, #8
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	8a3b      	ldrh	r3, [r7, #16]
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	4619      	mov	r1, r3
 8000c20:	68ba      	ldr	r2, [r7, #8]
 8000c22:	f7ff fdd1 	bl	80007c8 <spi_read>
 8000c26:	e006      	b.n	8000c36 <read_memory+0x92>

	}else{

		// copy len size bytes
		spi_read( memory_addr,len, buf);
 8000c28:	8aba      	ldrh	r2, [r7, #20]
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	4610      	mov	r0, r2
 8000c2e:	4619      	mov	r1, r3
 8000c30:	68ba      	ldr	r2, [r7, #8]
 8000c32:	f7ff fdc9 	bl	80007c8 <spi_read>
	}
}
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <socket>:
	socket()	create socket, handle open
		ip_proto, RAW mode only.
===========================================================================*/

uint8_t	socket(uint8_t  mode, uint16_t  port, uint8_t ip_proto)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4613      	mov	r3, r2
 8000c44:	4602      	mov	r2, r0
 8000c46:	71fa      	strb	r2, [r7, #7]
 8000c48:	460a      	mov	r2, r1
 8000c4a:	80ba      	strh	r2, [r7, #4]
 8000c4c:	71bb      	strb	r3, [r7, #6]
	uint8_t	sck_fd;
	uint8_t	stat;

	// check free socket exists? 
	for(sck_fd = 0; sck_fd < W5200_MAX_SOCKETS; sck_fd++){
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e00c      	b.n	8000c6e <socket+0x32>
		if(socket_flg[sck_fd] == 0){
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	4a4c      	ldr	r2, [pc, #304]	; (8000d88 <socket+0x14c>)
 8000c58:	5cd3      	ldrb	r3, [r2, r3]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d104      	bne.n	8000c68 <socket+0x2c>
			socket_flg[sck_fd] = 1;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	4a49      	ldr	r2, [pc, #292]	; (8000d88 <socket+0x14c>)
 8000c62:	2101      	movs	r1, #1
 8000c64:	54d1      	strb	r1, [r2, r3]
			break;
 8000c66:	e005      	b.n	8000c74 <socket+0x38>
{
	uint8_t	sck_fd;
	uint8_t	stat;

	// check free socket exists? 
	for(sck_fd = 0; sck_fd < W5200_MAX_SOCKETS; sck_fd++){
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	2b07      	cmp	r3, #7
 8000c72:	d9ef      	bls.n	8000c54 <socket+0x18>
		if(socket_flg[sck_fd] == 0){
			socket_flg[sck_fd] = 1;
			break;
		}
	}
	if(sck_fd >= W5200_MAX_SOCKETS) return -1;	// no more sockets.
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	2b07      	cmp	r3, #7
 8000c78:	d901      	bls.n	8000c7e <socket+0x42>
 8000c7a:	23ff      	movs	r3, #255	; 0xff
 8000c7c:	e07f      	b.n	8000d7e <socket+0x142>
	// check mode parameter
	if((mode & 0x0f) > W5200_MR_PPPOE_ENABLE) return -1;	// mode error.
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 030f 	and.w	r3, r3, #15
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	dd01      	ble.n	8000c8c <socket+0x50>
 8000c88:	23ff      	movs	r3, #255	; 0xff
 8000c8a:	e078      	b.n	8000d7e <socket+0x142>
	if(((mode & 0x0f) != W5200_Sn_MR_UDP) && (mode & W5200_Sn_MR_MULTI)) return -1; // MULTI is UDP only.
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d005      	beq.n	8000ca2 <socket+0x66>
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	da01      	bge.n	8000ca2 <socket+0x66>
 8000c9e:	23ff      	movs	r3, #255	; 0xff
 8000ca0:	e06d      	b.n	8000d7e <socket+0x142>
	if(((mode & 0x0f) != W5200_Sn_MR_TCP) && (mode & W5200_Sn_MR_ND)) return -1; // ND is TCP only.
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f003 030f 	and.w	r3, r3, #15
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d006      	beq.n	8000cba <socket+0x7e>
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 0320 	and.w	r3, r3, #32
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <socket+0x7e>
 8000cb6:	23ff      	movs	r3, #255	; 0xff
 8000cb8:	e061      	b.n	8000d7e <socket+0x142>

	// set MODE register
	spi_sendByte(W5200_Sn_MR(sck_fd) , mode);
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	021b      	lsls	r3, r3, #8
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4610      	mov	r0, r2
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f7ff fce9 	bl	80006a4 <spi_sendByte>
	//socket_mode[sck_fd] = mode & 0x0f;	// omitting ND/MULTICAST
	mode &= 0x0f;
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 030f 	and.w	r3, r3, #15
 8000cd8:	71fb      	strb	r3, [r7, #7]

	uint8_t prt[2];

	// set PORT, PROTOCOL 
	switch(mode){
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	db29      	blt.n	8000d34 <socket+0xf8>
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	dd02      	ble.n	8000cea <socket+0xae>
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d018      	beq.n	8000d1a <socket+0xde>
 8000ce8:	e024      	b.n	8000d34 <socket+0xf8>
	case W5200_Sn_MR_TCP:
	case W5200_Sn_MR_UDP:

		// split port for sending on two 8bits
		prt[0] = (port & 0xff00) >> 8;
 8000cea:	88bb      	ldrh	r3, [r7, #4]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	733b      	strb	r3, [r7, #12]
		prt[1] =  (port & 0x00ff);
 8000cf4:	88bb      	ldrh	r3, [r7, #4]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	737b      	strb	r3, [r7, #13]
		spi_send(W5200_Sn_PORT(sck_fd), 2 , prt);
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	021b      	lsls	r3, r3, #8
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d06:	3304      	adds	r3, #4
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	4610      	mov	r0, r2
 8000d10:	2102      	movs	r1, #2
 8000d12:	461a      	mov	r2, r3
 8000d14:	f7ff fc32 	bl	800057c <spi_send>
		
		break;
 8000d18:	e00c      	b.n	8000d34 <socket+0xf8>
	case W5200_Sn_MR_IPRAW:
		spi_sendByte(W5200_Sn_PROTO(sck_fd), ip_proto);
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	021b      	lsls	r3, r3, #8
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d26:	3314      	adds	r3, #20
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	79bb      	ldrb	r3, [r7, #6]
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f7ff fcb8 	bl	80006a4 <spi_sendByte>
	}

	// execute socket open
	spi_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_OPEN);
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d40:	3301      	adds	r3, #1
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	4618      	mov	r0, r3
 8000d46:	2101      	movs	r1, #1
 8000d48:	f7ff fcac 	bl	80006a4 <spi_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd)  != 0);	// 0 value is command complete. 
 8000d4c:	bf00      	nop
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fdfd 	bl	8000950 <get_CRStatus>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1f8      	bne.n	8000d4e <socket+0x112>

	// check status
	if(stat = get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_INIT) return -1;
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fe10 	bl	8000984 <get_SRStatus>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b13      	cmp	r3, #19
 8000d68:	bf0c      	ite	eq
 8000d6a:	2300      	moveq	r3, #0
 8000d6c:	2301      	movne	r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	73bb      	strb	r3, [r7, #14]
 8000d72:	7bbb      	ldrb	r3, [r7, #14]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <socket+0x140>
 8000d78:	23ff      	movs	r3, #255	; 0xff
 8000d7a:	e000      	b.n	8000d7e <socket+0x142>

	// success return
	return sck_fd;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000464 	.word	0x20000464

08000d8c <closesocket>:
/*==========================================================================
	closesocket()	socket handle close
===========================================================================*/

int	closesocket(int sck_fd)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	// check asign flag
	if(sck_fd < 0 || sck_fd >=W5200_MAX_SOCKETS||  socket_flg[sck_fd] != 1) return -1;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db08      	blt.n	8000dac <closesocket+0x20>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b07      	cmp	r3, #7
 8000d9e:	dc05      	bgt.n	8000dac <closesocket+0x20>
 8000da0:	4a18      	ldr	r2, [pc, #96]	; (8000e04 <closesocket+0x78>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d002      	beq.n	8000db2 <closesocket+0x26>
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000db0:	e023      	b.n	8000dfa <closesocket+0x6e>

	// release socket
	socket_flg[sck_fd] = 0;
 8000db2:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <closesocket+0x78>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
	
	// execute socket close
	spi_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_CLOSE);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000dc8:	3301      	adds	r3, #1
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	2110      	movs	r1, #16
 8000dd0:	f7ff fc68 	bl	80006a4 <spi_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd)  != 0);	// 0 value is command complete. 
 8000dd4:	bf00      	nop
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fdb8 	bl	8000950 <get_CRStatus>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1f7      	bne.n	8000dd6 <closesocket+0x4a>

	// check status
	while( get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_CLOSED);
 8000de6:	bf00      	nop
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fdc9 	bl	8000984 <get_SRStatus>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1f7      	bne.n	8000de8 <closesocket+0x5c>

	// close success
	return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000464 	.word	0x20000464

08000e08 <send>:
/*==========================================================================
	send()	send *buf to  (TCP only)
===========================================================================*/

int	send(uint8_t sck_fd, uint8_t *buf, uint16_t len, uint16_t flag)
{
 8000e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e0c:	b08b      	sub	sp, #44	; 0x2c
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	4601      	mov	r1, r0
 8000e14:	73f9      	strb	r1, [r7, #15]
 8000e16:	81ba      	strh	r2, [r7, #12]
 8000e18:	80fb      	strh	r3, [r7, #6]
	uint16_t	send_size;
	uint16_t	write_ptr;
	uint16_t status = get_SRStatus(sck_fd);
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fdb1 	bl	8000984 <get_SRStatus>
 8000e22:	4603      	mov	r3, r0
 8000e24:	84bb      	strh	r3, [r7, #36]	; 0x24
	// check socket asign flag
	if(sck_fd < 0 || sck_fd >= W5200_MAX_SOCKETS ||  socket_flg[sck_fd] != 1) return -1;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	2b07      	cmp	r3, #7
 8000e2a:	d804      	bhi.n	8000e36 <send+0x2e>
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	4a53      	ldr	r2, [pc, #332]	; (8000f7c <send+0x174>)
 8000e30:	5cd3      	ldrb	r3, [r2, r3]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d002      	beq.n	8000e3c <send+0x34>
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e3a:	e099      	b.n	8000f70 <send+0x168>

	// check parameter
	if(buf == NULL || len == 0) return -1;
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <send+0x40>
 8000e42:	89bb      	ldrh	r3, [r7, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <send+0x46>
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e4c:	e090      	b.n	8000f70 <send+0x168>
	
	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0; // closing or fin close wait.
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fd97 	bl	8000984 <get_SRStatus>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b17      	cmp	r3, #23
 8000e5a:	d001      	beq.n	8000e60 <send+0x58>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e087      	b.n	8000f70 <send+0x168>

	// check TX memory free size?
	while((send_size = get_TXFSRStatus(sck_fd)) == 0){
 8000e60:	e004      	b.n	8000e6c <send+0x64>
		if(flag == 1) return 0;	// NONE BLOCKING
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d101      	bne.n	8000e6c <send+0x64>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	e081      	b.n	8000f70 <send+0x168>
	
	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0; // closing or fin close wait.

	// check TX memory free size?
	while((send_size = get_TXFSRStatus(sck_fd)) == 0){
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fda2 	bl	80009b8 <get_TXFSRStatus>
 8000e74:	4603      	mov	r3, r0
 8000e76:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000e78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f1      	beq.n	8000e62 <send+0x5a>
		if(flag == 1) return 0;	// NONE BLOCKING
	}

	// get write pointer
	write_ptr = get_TXWRStatus(sck_fd);
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fdaf 	bl	80009e4 <get_TXWRStatus>
 8000e86:	4603      	mov	r3, r0
 8000e88:	847b      	strh	r3, [r7, #34]	; 0x22

	// check write length
	if(send_size > len) send_size = len;
 8000e8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e8c:	89bb      	ldrh	r3, [r7, #12]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d901      	bls.n	8000e96 <send+0x8e>
 8000e92:	89bb      	ldrh	r3, [r7, #12]
 8000e94:	84fb      	strh	r3, [r7, #38]	; 0x26

	// data write to memory
	write_memory(sck_fd, write_ptr, buf, send_size);
 8000e96:	7bf9      	ldrb	r1, [r7, #15]
 8000e98:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000e9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	f7ff fe27 	bl	8000af4 <write_memory>

	// pointer update
	write_ptr += send_size;
 8000ea6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000ea8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000eaa:	4413      	add	r3, r2
 8000eac:	847b      	strh	r3, [r7, #34]	; 0x22
	set_TXWR(sck_fd, write_ptr);
 8000eae:	7bfa      	ldrb	r2, [r7, #15]
 8000eb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f7ff fdc1 	bl	8000a3c <set_TXWR>
		
	// test function 
	

	uint16_t start = get_TXRD(sck_fd);
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fda7 	bl	8000a10 <get_TXRD>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	843b      	strh	r3, [r7, #32]
	uint16_t end   = get_TXWRStatus(sck_fd); 
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fd8b 	bl	80009e4 <get_TXWRStatus>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	83fb      	strh	r3, [r7, #30]
	uint8_t data [write_ptr-start]; 	
 8000ed2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000ed4:	8c3b      	ldrh	r3, [r7, #32]
 8000ed6:	1ad1      	subs	r1, r2, r3
 8000ed8:	466b      	mov	r3, sp
 8000eda:	461e      	mov	r6, r3
 8000edc:	1e4b      	subs	r3, r1, #1
 8000ede:	61bb      	str	r3, [r7, #24]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	f04f 0300 	mov.w	r3, #0
 8000ee8:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8000eec:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8000ef0:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	00dd      	lsls	r5, r3, #3
 8000efe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8000f02:	00d4      	lsls	r4, r2, #3
 8000f04:	460b      	mov	r3, r1
 8000f06:	3307      	adds	r3, #7
 8000f08:	08db      	lsrs	r3, r3, #3
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	ebad 0d03 	sub.w	sp, sp, r3
 8000f10:	466b      	mov	r3, sp
 8000f12:	3300      	adds	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
	spi_read(start+0x8000, write_ptr-start  , data);
 8000f16:	8c3b      	ldrh	r3, [r7, #32]
 8000f18:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000f1c:	b299      	uxth	r1, r3
 8000f1e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000f20:	8c3b      	ldrh	r3, [r7, #32]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	4608      	mov	r0, r1
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f7ff fc4b 	bl	80007c8 <spi_read>

	
	// test function 
	
	// send command
	spi_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_SEND);
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000f3e:	3301      	adds	r3, #1
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	2120      	movs	r1, #32
 8000f46:	f7ff fbad 	bl	80006a4 <spi_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 8000f4a:	bf00      	nop
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fcfe 	bl	8000950 <get_CRStatus>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f8      	bne.n	8000f4c <send+0x144>

	// wait sending complete
	while(get_TXRD(sck_fd) != write_ptr);
 8000f5a:	bf00      	nop
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fd56 	bl	8000a10 <get_TXRD>
 8000f64:	4603      	mov	r3, r0
 8000f66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d1f7      	bne.n	8000f5c <send+0x154>

	return send_size;
 8000f6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f6e:	46b5      	mov	sp, r6
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	372c      	adds	r7, #44	; 0x2c
 8000f74:	46bd      	mov	sp, r7
 8000f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000464 	.word	0x20000464

08000f80 <recv>:
	return code is received data size.
	if received disconnect@from peer, size was set to Zero, 
===========================================================================*/

int	recv(uint8_t sck_fd, uint8_t *buf, uint16_t len, uint8_t flag)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6039      	str	r1, [r7, #0]
 8000f88:	4601      	mov	r1, r0
 8000f8a:	71f9      	strb	r1, [r7, #7]
 8000f8c:	80ba      	strh	r2, [r7, #4]
 8000f8e:	71bb      	strb	r3, [r7, #6]
	uint16_t	read_len;
	uint16_t	read_ptr;

	// check asign flag
	if(sck_fd < 0 || sck_fd >= W5200_MAX_SOCKETS ||  socket_flg[sck_fd] != 1) return -1;
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b07      	cmp	r3, #7
 8000f94:	d804      	bhi.n	8000fa0 <recv+0x20>
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4a31      	ldr	r2, [pc, #196]	; (8001060 <recv+0xe0>)
 8000f9a:	5cd3      	ldrb	r3, [r2, r3]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d002      	beq.n	8000fa6 <recv+0x26>
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa4:	e057      	b.n	8001056 <recv+0xd6>

	// check parameter
	if(buf == NULL || len == 0) return -1;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <recv+0x32>
 8000fac:	88bb      	ldrh	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d102      	bne.n	8000fb8 <recv+0x38>
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb6:	e04e      	b.n	8001056 <recv+0xd6>

	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0;	// closing or fin close wait.
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fce2 	bl	8000984 <get_SRStatus>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b17      	cmp	r3, #23
 8000fc4:	d001      	beq.n	8000fca <recv+0x4a>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e045      	b.n	8001056 <recv+0xd6>

	// received data exists?
	while((read_len = get_RXRSR(sck_fd)) == 0){
 8000fca:	e004      	b.n	8000fd6 <recv+0x56>
		if(flag == 1) return 0;	// NONE BLOCKING
 8000fcc:	79bb      	ldrb	r3, [r7, #6]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <recv+0x56>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e03f      	b.n	8001056 <recv+0xd6>

	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0;	// closing or fin close wait.

	// received data exists?
	while((read_len = get_RXRSR(sck_fd)) == 0){
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fd47 	bl	8000a6c <get_RXRSR>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	81fb      	strh	r3, [r7, #14]
 8000fe2:	89fb      	ldrh	r3, [r7, #14]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0f1      	beq.n	8000fcc <recv+0x4c>

	// set read length
	//if(read_len > len) read_len = len;

	// get read pointer
	read_ptr = get_RXRD(sck_fd);
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fd54 	bl	8000a98 <get_RXRD>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	81bb      	strh	r3, [r7, #12]

	// read from RX memory
	read_memory(sck_fd, read_ptr, buf, read_len < len ? read_len: len);
 8000ff4:	88ba      	ldrh	r2, [r7, #4]
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	bf38      	it	cc
 8000ffc:	4613      	movcc	r3, r2
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	79f9      	ldrb	r1, [r7, #7]
 8001002:	89ba      	ldrh	r2, [r7, #12]
 8001004:	4608      	mov	r0, r1
 8001006:	4611      	mov	r1, r2
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	f7ff fdcb 	bl	8000ba4 <read_memory>

	// update pointer
	read_ptr += read_len;
 800100e:	89ba      	ldrh	r2, [r7, #12]
 8001010:	89fb      	ldrh	r3, [r7, #14]
 8001012:	4413      	add	r3, r2
 8001014:	81bb      	strh	r3, [r7, #12]
	set_RXRD(sck_fd, read_ptr);
 8001016:	79fa      	ldrb	r2, [r7, #7]
 8001018:	89bb      	ldrh	r3, [r7, #12]
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	f7ff fd51 	bl	8000ac4 <set_RXRD>

	// recive command
	spi_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_RECV);
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	b29b      	uxth	r3, r3
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b29b      	uxth	r3, r3
 800102a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800102e:	3301      	adds	r3, #1
 8001030:	b29b      	uxth	r3, r3
 8001032:	4618      	mov	r0, r3
 8001034:	2140      	movs	r1, #64	; 0x40
 8001036:	f7ff fb35 	bl	80006a4 <spi_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 800103a:	bf00      	nop
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc86 	bl	8000950 <get_CRStatus>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f8      	bne.n	800103c <recv+0xbc>
	

 	return	(read_len < len ? read_len: len);
 800104a:	88ba      	ldrh	r2, [r7, #4]
 800104c:	89fb      	ldrh	r3, [r7, #14]
 800104e:	429a      	cmp	r2, r3
 8001050:	bf38      	it	cc
 8001052:	4613      	movcc	r3, r2
 8001054:	b29b      	uxth	r3, r3
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000464 	.word	0x20000464

08001064 <listen>:


int	listen(int sck_fd)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	// check socket asign flag
	if(sck_fd < 0 || sck_fd >=W5200_MAX_SOCKETS||  socket_flg[sck_fd] != 1) return -1;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	db08      	blt.n	8001084 <listen+0x20>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b07      	cmp	r3, #7
 8001076:	dc05      	bgt.n	8001084 <listen+0x20>
 8001078:	4a22      	ldr	r2, [pc, #136]	; (8001104 <listen+0xa0>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d002      	beq.n	800108a <listen+0x26>
 8001084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001088:	e038      	b.n	80010fc <listen+0x98>

	// LISTEN start from INIT only.
	if(get_SRStatus(sck_fd)  != W5200_Sn_SR_SOCK_INIT) return -1;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fc78 	bl	8000984 <get_SRStatus>
 8001094:	4603      	mov	r3, r0
 8001096:	2b13      	cmp	r3, #19
 8001098:	d002      	beq.n	80010a0 <listen+0x3c>
 800109a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800109e:	e02d      	b.n	80010fc <listen+0x98>


	uint8_t b;
	spi_read(W5200_Sn_IR(sck_fd), 1, &b);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80010ac:	3302      	adds	r3, #2
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	f107 030f 	add.w	r3, r7, #15
 80010b4:	4610      	mov	r0, r2
 80010b6:	2101      	movs	r1, #1
 80010b8:	461a      	mov	r2, r3
 80010ba:	f7ff fb85 	bl	80007c8 <spi_read>
	

	// CONNECT command
	spi_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_LISTEN);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80010ca:	3301      	adds	r3, #1
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	2102      	movs	r1, #2
 80010d2:	f7ff fae7 	bl	80006a4 <spi_sendByte>
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 80010d6:	bf00      	nop
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fc37 	bl	8000950 <get_CRStatus>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f7      	bne.n	80010d8 <listen+0x74>

	// wait for status change to LISTEN
	while(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_LISTEN);
 80010e8:	bf00      	nop
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fc48 	bl	8000984 <get_SRStatus>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b14      	cmp	r3, #20
 80010f8:	d1f7      	bne.n	80010ea <listen+0x86>
	 
	return 0;	// listen success complete
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000464 	.word	0x20000464

08001108 <locate_interrupt>:



void locate_interrupt()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
	uint8_t code;
	int counter = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]

 	while(!GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0))
 8001112:	e02f      	b.n	8001174 <locate_interrupt+0x6c>
	{
		spi_read(W5200_IMR2, 1, &code);
 8001114:	1cfb      	adds	r3, r7, #3
 8001116:	2036      	movs	r0, #54	; 0x36
 8001118:	2101      	movs	r1, #1
 800111a:	461a      	mov	r2, r3
 800111c:	f7ff fb54 	bl	80007c8 <spi_read>

		spi_read(W5200_Sn_IR(code), 1, &code);
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b29b      	uxth	r3, r3
 8001126:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800112a:	3302      	adds	r3, #2
 800112c:	b29a      	uxth	r2, r3
 800112e:	1cfb      	adds	r3, r7, #3
 8001130:	4610      	mov	r0, r2
 8001132:	2101      	movs	r1, #1
 8001134:	461a      	mov	r2, r3
 8001136:	f7ff fb47 	bl	80007c8 <spi_read>

		spi_sendByte(W5200_Sn_IR(0x0), code);
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	f244 0002 	movw	r0, #16386	; 0x4002
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff faaf 	bl	80006a4 <spi_sendByte>
		switch (code )
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d00a      	beq.n	8001162 <locate_interrupt+0x5a>
 800114c:	2b04      	cmp	r3, #4
 800114e:	d002      	beq.n	8001156 <locate_interrupt+0x4e>
 8001150:	2b01      	cmp	r3, #1
 8001152:	d008      	beq.n	8001166 <locate_interrupt+0x5e>
				break;
			case 0x4:
				vTaskResume(set_macTaskHandle); 
				break;
			default:
				break;		
 8001154:	e008      	b.n	8001168 <locate_interrupt+0x60>
				// do nothing wait for input. 
				break;
			case 0x2:
				break;
			case 0x4:
				vTaskResume(set_macTaskHandle); 
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <locate_interrupt+0x80>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fc38 	bl	80019d0 <vTaskResume>
				break;
 8001160:	e002      	b.n	8001168 <locate_interrupt+0x60>
			case 0x1: 
				// connection established 
				// do nothing wait for input. 
				break;
			case 0x2:
				break;
 8001162:	bf00      	nop
 8001164:	e000      	b.n	8001168 <locate_interrupt+0x60>
		switch (code )
		{
			case 0x1: 
				// connection established 
				// do nothing wait for input. 
				break;
 8001166:	bf00      	nop
				vTaskResume(set_macTaskHandle); 
				break;
			default:
				break;		
		}
		if (counter > 1000)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800116e:	dd01      	ble.n	8001174 <locate_interrupt+0x6c>
		{
			// callbackfunction 
			w5200_interrupt_error();
 8001170:	f000 f80e 	bl	8001190 <w5200_interrupt_error>
void locate_interrupt()
{
	uint8_t code;
	int counter = 0;

 	while(!GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0))
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <locate_interrupt+0x84>)
 8001176:	2101      	movs	r1, #1
 8001178:	f002 fe5e 	bl	8003e38 <GPIO_ReadInputDataBit>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0c8      	beq.n	8001114 <locate_interrupt+0xc>
			// callbackfunction 
			w5200_interrupt_error();
		}

	}
}
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200131c0 	.word	0x200131c0
 800118c:	40020000 	.word	0x40020000

08001190 <w5200_interrupt_error>:

void w5200_interrupt_error(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	// error occured next step notify all tasks
		
}
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void) //EXTI0 ISR
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
 
	if(EXTI_GetITStatus(EXTI_Line0) != RESET) //check if EXTI line is asserted
 80011a0:	2001      	movs	r0, #1
 80011a2:	f002 fc99 	bl	8003ad8 <EXTI_GetITStatus>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d008      	beq.n	80011be <EXTI0_IRQHandler+0x22>
	{
	 	EXTI_ClearFlag(EXTI_Line0); //clear interrupt
 80011ac:	2001      	movs	r0, #1
 80011ae:	f002 fc79 	bl	8003aa4 <EXTI_ClearFlag>
 		portENTER_CRITICAL();
 80011b2:	f001 ff01 	bl	8002fb8 <vPortEnterCritical>
		locate_interrupt();
 80011b6:	f7ff ffa7 	bl	8001108 <locate_interrupt>
		portEXIT_CRITICAL();
 80011ba:	f001 ff0d 	bl	8002fd8 <vPortExitCritical>
	}
}
 80011be:	bd80      	pop	{r7, pc}

080011c0 <NVIC_SetPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <NVIC_SetPendingIRQ+0x30>)
 80011cc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80011d0:	0952      	lsrs	r2, r2, #5
 80011d2:	79f9      	ldrb	r1, [r7, #7]
 80011d4:	f001 011f 	and.w	r1, r1, #31
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f101 	lsl.w	r1, r0, r1
 80011de:	3240      	adds	r2, #64	; 0x40
 80011e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <main>:
volatile unsigned long ulButtonPressCounts = 0UL;

/*-----------------------------------------------------------*/

int main(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af04      	add	r7, sp, #16
	/* Configure the hardware ready to run the test. */
	prvSetupHardware();
 80011fa:	f000 f8cd 	bl	8001398 <prvSetupHardware>
	/* Start standard demo/test application flash tasks.  See the comments at
	the top of this file.  The LED flash tasks are always created.  The other
	tasks are only created if mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to
	0 (at the top of this file).  See the comments at the top of this file for
	more information. */
	vStartLEDFlashTasks( mainFLASH_TASK_PRIORITY );
 80011fe:	2001      	movs	r0, #1
 8001200:	f002 fa66 	bl	80036d0 <vStartLEDFlashTasks>


	/*------------------added by Matic Knap 24 Jun 2014 ---------------------------------*/
	xTaskCreate(set_macTask, "SETMAC", configMINIMAL_STACK_SIZE, NULL, mainFLASH_TASK_PRIORITY, &set_macTaskHandle);
 8001204:	2301      	movs	r3, #1
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <main+0x34>)
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	2300      	movs	r3, #0
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	2300      	movs	r3, #0
 8001212:	9303      	str	r3, [sp, #12]
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <main+0x38>)
 8001216:	4906      	ldr	r1, [pc, #24]	; (8001230 <main+0x3c>)
 8001218:	2282      	movs	r2, #130	; 0x82
 800121a:	2300      	movs	r3, #0
 800121c:	f000 fa52 	bl	80016c4 <xTaskGenericCreate>
	mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to 0 (at the top of this
	file).  See the comments at the top of this file for more information. */
	//prvOptionallyCreateComprehensveTestApplication();

	/* Start the scheduler. */
	vTaskStartScheduler();
 8001220:	f000 fc24 	bl	8001a6c <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 8001224:	e7fe      	b.n	8001224 <main+0x30>
 8001226:	bf00      	nop
 8001228:	200131c0 	.word	0x200131c0
 800122c:	08001235 	.word	0x08001235
 8001230:	08004a88 	.word	0x08004a88

08001234 <set_macTask>:

/*------added by Matic Knap 24 Jun 2014 ----------------------*/
	

void set_macTask(void *pvParameters)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b0a8      	sub	sp, #160	; 0xa0
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

	uint8_t address[6] = {0xdd, 0xaa, 0xbb, 0xcc, 0x11, 0x22}; 
 800123c:	4a4d      	ldr	r2, [pc, #308]	; (8001374 <set_macTask+0x140>)
 800123e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001242:	6810      	ldr	r0, [r2, #0]
 8001244:	6018      	str	r0, [r3, #0]
 8001246:	8892      	ldrh	r2, [r2, #4]
 8001248:	809a      	strh	r2, [r3, #4]
	const  uint8_t ip[4] = {0xc0, 0xa8, 0x0, 0x08};
 800124a:	4a4b      	ldr	r2, [pc, #300]	; (8001378 <set_macTask+0x144>)
 800124c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001250:	6810      	ldr	r0, [r2, #0]
 8001252:	6018      	str	r0, [r3, #0]
	const uint8_t subnet[4] = {0xff,0xff,0xff,0x0};
 8001254:	4a49      	ldr	r2, [pc, #292]	; (800137c <set_macTask+0x148>)
 8001256:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800125a:	6810      	ldr	r0, [r2, #0]
 800125c:	6018      	str	r0, [r3, #0]
	const uint8_t gw[4] = {0xc0, 0xa8, 0x0, 0x01};
 800125e:	4a48      	ldr	r2, [pc, #288]	; (8001380 <set_macTask+0x14c>)
 8001260:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001264:	6810      	ldr	r0, [r2, #0]
 8001266:	6018      	str	r0, [r3, #0]

	 const portTickType xFrequency = 1;
 8001268:	2301      	movs	r3, #1
 800126a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	portTickType xLastWakeTime;
     // Initialise the xLastWakeTime variable with the current time.
     	xLastWakeTime = xTaskGetTickCount();
 800126e:	f000 fcc9 	bl	8001c04 <xTaskGetTickCount>
 8001272:	4603      	mov	r3, r0
 8001274:	677b      	str	r3, [r7, #116]	; 0x74
	
	RESET_HIGH();
 8001276:	4b43      	ldr	r3, [pc, #268]	; (8001384 <set_macTask+0x150>)
 8001278:	4a42      	ldr	r2, [pc, #264]	; (8001384 <set_macTask+0x150>)
 800127a:	8b52      	ldrh	r2, [r2, #26]
 800127c:	b292      	uxth	r2, r2
 800127e:	f042 0208 	orr.w	r2, r2, #8
 8001282:	b292      	uxth	r2, r2
 8001284:	835a      	strh	r2, [r3, #26]
	RESET_LOW();	
 8001286:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <set_macTask+0x150>)
 8001288:	4a3e      	ldr	r2, [pc, #248]	; (8001384 <set_macTask+0x150>)
 800128a:	8b12      	ldrh	r2, [r2, #24]
 800128c:	b292      	uxth	r2, r2
 800128e:	f042 0208 	orr.w	r2, r2, #8
 8001292:	b292      	uxth	r2, r2
 8001294:	831a      	strh	r2, [r3, #24]

	vTaskDelayUntil(&xLastWakeTime, 500/portTICK_RATE_MS );		
 8001296:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800129a:	4618      	mov	r0, r3
 800129c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80012a0:	f000 fac4 	bl	800182c <vTaskDelayUntil>
	
	wiznet_initialize();
 80012a4:	f7ff fad8 	bl	8000858 <wiznet_initialize>
	vTaskDelayUntil(&xLastWakeTime, 500/portTICK_RATE_MS );		
 80012a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012ac:	4618      	mov	r0, r3
 80012ae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80012b2:	f000 fabb 	bl	800182c <vTaskDelayUntil>
	wiznet_configure_network(ip, subnet, gw);
 80012b6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80012ba:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80012be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012c2:	4608      	mov	r0, r1
 80012c4:	4611      	mov	r1, r2
 80012c6:	461a      	mov	r2, r3
 80012c8:	f7ff fb2a 	bl	8000920 <wiznet_configure_network>
	wiznet_set_hardware_address(address);
 80012cc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fb19 	bl	8000908 <wiznet_set_hardware_address>
	
	/*create socket and send byte */

	uint8_t dest[4] = {0xc0, 0xa8,0x0,0xa};
 80012d6:	4a2c      	ldr	r2, [pc, #176]	; (8001388 <set_macTask+0x154>)
 80012d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012dc:	6810      	ldr	r0, [r2, #0]
 80012de:	6018      	str	r0, [r3, #0]
	uint8_t s, *cmp = "quit";	
 80012e0:	4b2a      	ldr	r3, [pc, #168]	; (800138c <set_macTask+0x158>)
 80012e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	s = socket(W5200_Sn_MR_TCP, 80, 0);
 80012e6:	2001      	movs	r0, #1
 80012e8:	2150      	movs	r1, #80	; 0x50
 80012ea:	2200      	movs	r2, #0
 80012ec:	f7ff fca6 	bl	8000c3c <socket>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t buf [100];//= "Hello my name is Dummy Server!"; 
	listen(s);
 80012f6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff feb2 	bl	8001064 <listen>
	int len;
	for( ;; )
        {
		/*we are now listening
		suspend task set_macTask()*/
		vTaskSuspend(set_macTaskHandle);
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <set_macTask+0x15c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fae9 	bl	80018dc <vTaskSuspend>
		len = recv(s, buf, 100, 0);
 800130a:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	2264      	movs	r2, #100	; 0x64
 8001318:	2300      	movs	r3, #0
 800131a:	f7ff fe31 	bl	8000f80 <recv>
 800131e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		
		if ( !strncmp(buf, "quit", 4))
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	4618      	mov	r0, r3
 8001328:	4918      	ldr	r1, [pc, #96]	; (800138c <set_macTask+0x158>)
 800132a:	2204      	movs	r2, #4
 800132c:	f003 fad6 	bl	80048dc <strncmp>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d110      	bne.n	8001358 <set_macTask+0x124>
		{
			uint8_t *r = "Bye\n"; 
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <set_macTask+0x160>)
 8001338:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			send(s, r, 4,0);
 800133c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001340:	4618      	mov	r0, r3
 8001342:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001346:	2204      	movs	r2, #4
 8001348:	2300      	movs	r3, #0
 800134a:	f7ff fd5d 	bl	8000e08 <send>
			closesocket(s);
 800134e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fd1a 	bl	8000d8c <closesocket>
		} 
		send(s, buf, len, 0);
 8001358:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800135c:	b29b      	uxth	r3, r3
 800135e:	f897 1097 	ldrb.w	r1, [r7, #151]	; 0x97
 8001362:	f107 020c 	add.w	r2, r7, #12
 8001366:	4608      	mov	r0, r1
 8001368:	4611      	mov	r1, r2
 800136a:	461a      	mov	r2, r3
 800136c:	2300      	movs	r3, #0
 800136e:	f7ff fd4b 	bl	8000e08 <send>
	
	}	
 8001372:	e7c5      	b.n	8001300 <set_macTask+0xcc>
 8001374:	08004aa0 	.word	0x08004aa0
 8001378:	08004aa8 	.word	0x08004aa8
 800137c:	08004aac 	.word	0x08004aac
 8001380:	08004ab0 	.word	0x08004ab0
 8001384:	40020000 	.word	0x40020000
 8001388:	08004ab4 	.word	0x08004ab4
 800138c:	08004a90 	.word	0x08004a90
 8001390:	200131c0 	.word	0x200131c0
 8001394:	08004a98 	.word	0x08004a98

08001398 <prvSetupHardware>:
	}
}
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	/* Setup STM32 system (clock, PLL and Flash configuration) */
	SystemInit();
 800139c:	f000 f8e4 	bl	8001568 <SystemInit>

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 80013a0:	f44f 7040 	mov.w	r0, #768	; 0x300
 80013a4:	f002 fa36 	bl	8003814 <NVIC_PriorityGroupConfig>
	
	init_SPI1();	
 80013a8:	f7fe ffb2 	bl	8000310 <init_SPI1>
	/* Setup the LED outputs. */
	vParTestInitialise();
 80013ac:	f000 f882 	bl	80014b4 <vParTestInitialise>

	/* Configure the button input.  This configures the interrupt to use the
	lowest interrupt priority, so it is ok to use the ISR safe FreeRTOS API
	from the button interrupt handler. */
	//STM_EVAL_PBInit( BUTTON_USER, BUTTON_MODE_EXTI );
}
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop

080013b4 <vApplicationTickHook>:
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
		/* Just to verify that the interrupt nesting behaves as expected,
		increment ulFPUInterruptNesting on entry, and decrement it on exit. */
		ulFPUInterruptNesting++;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <vApplicationTickHook+0x20>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <vApplicationTickHook+0x20>)
 80013c0:	601a      	str	r2, [r3, #0]

		/* Trigger a timer 2 interrupt, which will fill the registers with a
		different value and itself trigger a timer 3 interrupt.  Note that the
		timers are not actually used.  The timer 2 and 3 interrupt vectors are
		just used for convenience. */
		NVIC_SetPendingIRQ( TIM2_IRQn );
 80013c2:	201c      	movs	r0, #28
 80013c4:	f7ff fefc 	bl	80011c0 <NVIC_SetPendingIRQ>
		/* Ensure that, after returning from the nested interrupts, all the FPU
		registers contain the value to which they were set by the tick hook
		function. */
		//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 0UL ) );

		ulFPUInterruptNesting--;
 80013c8:	4b02      	ldr	r3, [pc, #8]	; (80013d4 <vApplicationTickHook+0x20>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	1e5a      	subs	r2, r3, #1
 80013ce:	4b01      	ldr	r3, [pc, #4]	; (80013d4 <vApplicationTickHook+0x20>)
 80013d0:	601a      	str	r2, [r3, #0]
	}
	#endif
}
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000046c 	.word	0x2000046c

080013d8 <TIM3_IRQHandler>:
	NVIC_Init( &NVIC_InitStructure );
}
/*-----------------------------------------------------------*/

void TIM3_IRQHandler( void )
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <TIM3_IRQHandler+0x34>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <TIM3_IRQHandler+0x34>)
 80013e4:	601a      	str	r2, [r3, #0]

	/* This is the highest priority interrupt in the chain of forced nesting
	interrupts, so latch the maximum value reached by ulFPUInterruptNesting.
	This is done purely to allow verification that the nesting depth reaches
	that intended. */
	if( ulFPUInterruptNesting > ulMaxFPUInterruptNesting )
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <TIM3_IRQHandler+0x34>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <TIM3_IRQHandler+0x38>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d903      	bls.n	80013fa <TIM3_IRQHandler+0x22>
	{
		ulMaxFPUInterruptNesting = ulFPUInterruptNesting;
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <TIM3_IRQHandler+0x34>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <TIM3_IRQHandler+0x38>)
 80013f8:	601a      	str	r2, [r3, #0]

	/* Fill the FPU registers with 99 to overwrite the values written by
	TIM2_IRQHandler(). */
	//vRegTestClearFlopRegistersToParameterValue( 99UL );

	ulFPUInterruptNesting--;
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <TIM3_IRQHandler+0x34>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	1e5a      	subs	r2, r3, #1
 8001400:	4b02      	ldr	r3, [pc, #8]	; (800140c <TIM3_IRQHandler+0x34>)
 8001402:	601a      	str	r2, [r3, #0]
}
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	2000046c 	.word	0x2000046c
 8001410:	20000470 	.word	0x20000470

08001414 <TIM2_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM2_IRQHandler( void )
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <TIM2_IRQHandler+0x20>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <TIM2_IRQHandler+0x20>)
 8001420:	601a      	str	r2, [r3, #0]
	/* Fill the FPU registers with 1. */
	//vRegTestClearFlopRegistersToParameterValue( 1UL );

	/* Trigger a timer 3 interrupt, which will fill the registers with a
	different value. */
	NVIC_SetPendingIRQ( TIM3_IRQn );
 8001422:	201d      	movs	r0, #29
 8001424:	f7ff fecc 	bl	80011c0 <NVIC_SetPendingIRQ>
	/* Ensure that, after returning from the nesting interrupt, all the FPU
	registers contain the value to which they were set by this interrupt
	function. */
	//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 1UL ) );

	ulFPUInterruptNesting--;
 8001428:	4b02      	ldr	r3, [pc, #8]	; (8001434 <TIM2_IRQHandler+0x20>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	1e5a      	subs	r2, r3, #1
 800142e:	4b01      	ldr	r3, [pc, #4]	; (8001434 <TIM2_IRQHandler+0x20>)
 8001430:	601a      	str	r2, [r3, #0]
}
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000046c 	.word	0x2000046c

08001438 <EXTI9_5_IRQHandler>:
	#endif /* mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY */
}
/*-----------------------------------------------------------*/

void EXTI9_5_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
long lHigherPriorityTaskWoken = pdFALSE;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]

	/* Only line 6 is enabled, so there is no need to test which line generated
	the interrupt. */
	EXTI_ClearITPendingBit( EXTI_Line6 );
 8001442:	2040      	movs	r0, #64	; 0x40
 8001444:	f002 fbc6 	bl	8003bd4 <EXTI_ClearITPendingBit>

	/* This interrupt does nothing more than demonstrate how to synchronise a
	task with an interrupt.  First the handler releases a semaphore.
	lHigherPriorityTaskWoken has been initialised to zero. */
	xSemaphoreGiveFromISR( xTestSemaphore, &lHigherPriorityTaskWoken );
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <EXTI9_5_IRQHandler+0x38>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	4610      	mov	r0, r2
 8001450:	2100      	movs	r1, #0
 8001452:	461a      	mov	r2, r3
 8001454:	2300      	movs	r3, #0
 8001456:	f001 f9c1 	bl	80027dc <xQueueGenericSendFromISR>
	semaphore caused the task to unblock, and the unblocked task has a priority
	higher than the currently executing task (the task that this interrupt
	interrupted), then lHigherPriorityTaskWoken will have been set to pdTRUE.
	Passing pdTRUE into the following macro call will cause this interrupt to
	return directly to the unblocked, higher priority, task. */
	portEND_SWITCHING_ISR( lHigherPriorityTaskWoken );
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <EXTI9_5_IRQHandler+0x30>
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <EXTI9_5_IRQHandler+0x3c>)
 8001462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001466:	601a      	str	r2, [r3, #0]
}
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000474 	.word	0x20000474
 8001474:	e000ed04 	.word	0xe000ed04

08001478 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800147c:	f001 fdbe 	bl	8002ffc <ulPortSetInterruptMask>
	for( ;; );
 8001480:	e7fe      	b.n	8001480 <vApplicationMallocFailedHook+0x8>
 8001482:	bf00      	nop

08001484 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	unction, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800149a:	f001 fdaf 	bl	8002ffc <ulPortSetInterruptMask>
	for( ;; );
 800149e:	e7fe      	b.n	800149e <vApplicationStackOverflowHook+0xe>

080014a0 <assert_failed>:
}
///*-----------------------------------------------------------*/
void assert_failed(uint8_t* file, uint32_t line){
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]

}
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <vParTestInitialise>:
static const Led_TypeDef xLEDs[ partstMAX_LEDS ] = { LED3, LED4, LED5, LED6 };

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	/* Initialise all four LEDs that are built onto the starter kit. */
	STM_EVAL_LEDInit( LED3 );
 80014b8:	2001      	movs	r0, #1
 80014ba:	f002 f95f 	bl	800377c <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED4 );
 80014be:	2000      	movs	r0, #0
 80014c0:	f002 f95c 	bl	800377c <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED5 );
 80014c4:	2002      	movs	r0, #2
 80014c6:	f002 f959 	bl	800377c <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED6 );
 80014ca:	2003      	movs	r0, #3
 80014cc:	f002 f956 	bl	800377c <STM_EVAL_LEDInit>
}
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop

080014d4 <vParTestToggleLED>:
	}
}
/*-----------------------------------------------------------*/

void vParTestToggleLED( unsigned long ulLED )
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	if( ulLED < partstMAX_LEDS )
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d80a      	bhi.n	80014f8 <vParTestToggleLED+0x24>
	{
		taskENTER_CRITICAL();
 80014e2:	f001 fd69 	bl	8002fb8 <vPortEnterCritical>
		{
			STM_EVAL_LEDToggle( xLEDs[ ulLED ] );
 80014e6:	4a06      	ldr	r2, [pc, #24]	; (8001500 <vParTestToggleLED+0x2c>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 f972 	bl	80037d8 <STM_EVAL_LEDToggle>
		}
		taskEXIT_CRITICAL();
 80014f4:	f001 fd70 	bl	8002fd8 <vPortExitCritical>
	}
}
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	08004cd0 	.word	0x08004cd0

08001504 <Reset_Handler>:
 8001504:	2100      	movs	r1, #0
 8001506:	f000 b804 	b.w	8001512 <LoopCopyDataInit>

0800150a <CopyDataInit>:
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <LoopFillZerobss+0x22>)
 800150c:	585b      	ldr	r3, [r3, r1]
 800150e:	5043      	str	r3, [r0, r1]
 8001510:	3104      	adds	r1, #4

08001512 <LoopCopyDataInit>:
 8001512:	480f      	ldr	r0, [pc, #60]	; (8001550 <LoopFillZerobss+0x26>)
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <LoopFillZerobss+0x2a>)
 8001516:	1842      	adds	r2, r0, r1
 8001518:	429a      	cmp	r2, r3
 800151a:	f4ff aff6 	bcc.w	800150a <CopyDataInit>
 800151e:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <LoopFillZerobss+0x2e>)
 8001520:	f000 b803 	b.w	800152a <LoopFillZerobss>

08001524 <FillZerobss>:
 8001524:	2300      	movs	r3, #0
 8001526:	f842 3b04 	str.w	r3, [r2], #4

0800152a <LoopFillZerobss>:
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <LoopFillZerobss+0x32>)
 800152c:	429a      	cmp	r2, r3
 800152e:	f4ff aff9 	bcc.w	8001524 <FillZerobss>
 8001532:	480b      	ldr	r0, [pc, #44]	; (8001560 <LoopFillZerobss+0x36>)
 8001534:	6801      	ldr	r1, [r0, #0]
 8001536:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800153a:	6001      	str	r1, [r0, #0]
 800153c:	f000 f814 	bl	8001568 <SystemInit>
 8001540:	f003 f926 	bl	8004790 <__libc_init_array>
 8001544:	f7ff fe56 	bl	80011f4 <main>
 8001548:	4770      	bx	lr
 800154a:	0000      	.short	0x0000
 800154c:	08004d2c 	.word	0x08004d2c
 8001550:	20000000 	.word	0x20000000
 8001554:	20000448 	.word	0x20000448
 8001558:	20000448 	.word	0x20000448
 800155c:	200131c4 	.word	0x200131c4
 8001560:	e000ed88 	.word	0xe000ed88

08001564 <ADC_IRQHandler>:
 8001564:	f7ff bffe 	b.w	8001564 <ADC_IRQHandler>

08001568 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <SystemInit+0x5c>)
 800156e:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <SystemInit+0x5c>)
 8001570:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8001574:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <SystemInit+0x60>)
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <SystemInit+0x60>)
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <SystemInit+0x60>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <SystemInit+0x60>)
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <SystemInit+0x60>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <SystemInit+0x60>)
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <SystemInit+0x64>)
 80015a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <SystemInit+0x60>)
 80015a6:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <SystemInit+0x60>)
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015ae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <SystemInit+0x60>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80015b6:	f000 f80b 	bl	80015d0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015ba:	4b02      	ldr	r3, [pc, #8]	; (80015c4 <SystemInit+0x5c>)
 80015bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015c0:	609a      	str	r2, [r3, #8]
#endif
}
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	e000ed00 	.word	0xe000ed00
 80015c8:	40023800 	.word	0x40023800
 80015cc:	24003010 	.word	0x24003010

080015d0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	2300      	movs	r3, #0
 80015dc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80015de:	4b35      	ldr	r3, [pc, #212]	; (80016b4 <SetSysClock+0xe4>)
 80015e0:	4a34      	ldr	r2, [pc, #208]	; (80016b4 <SetSysClock+0xe4>)
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015e8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80015ea:	4b32      	ldr	r3, [pc, #200]	; (80016b4 <SetSysClock+0xe4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3301      	adds	r3, #1
 80015f8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d103      	bne.n	8001608 <SetSysClock+0x38>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001606:	d1f0      	bne.n	80015ea <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001608:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <SetSysClock+0xe4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d002      	beq.n	800161a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001614:	2301      	movs	r3, #1
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	e001      	b.n	800161e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800161a:	2300      	movs	r3, #0
 800161c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d142      	bne.n	80016aa <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <SetSysClock+0xe4>)
 8001626:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <SetSysClock+0xe4>)
 8001628:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800162a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800162e:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <SetSysClock+0xe8>)
 8001632:	4a21      	ldr	r2, [pc, #132]	; (80016b8 <SetSysClock+0xe8>)
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800163a:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <SetSysClock+0xe4>)
 800163e:	4a1d      	ldr	r2, [pc, #116]	; (80016b4 <SetSysClock+0xe4>)
 8001640:	6892      	ldr	r2, [r2, #8]
 8001642:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <SetSysClock+0xe4>)
 8001646:	4a1b      	ldr	r2, [pc, #108]	; (80016b4 <SetSysClock+0xe4>)
 8001648:	6892      	ldr	r2, [r2, #8]
 800164a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800164e:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <SetSysClock+0xe4>)
 8001652:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <SetSysClock+0xe4>)
 8001654:	6892      	ldr	r2, [r2, #8]
 8001656:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800165a:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <SetSysClock+0xe4>)
 800165e:	4a17      	ldr	r2, [pc, #92]	; (80016bc <SetSysClock+0xec>)
 8001660:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <SetSysClock+0xe4>)
 8001664:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <SetSysClock+0xe4>)
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800166c:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800166e:	bf00      	nop
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <SetSysClock+0xe4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f9      	beq.n	8001670 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <SetSysClock+0xf0>)
 800167e:	f240 6204 	movw	r2, #1540	; 0x604
 8001682:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <SetSysClock+0xe4>)
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <SetSysClock+0xe4>)
 8001688:	6892      	ldr	r2, [r2, #8]
 800168a:	f022 0203 	bic.w	r2, r2, #3
 800168e:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <SetSysClock+0xe4>)
 8001692:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <SetSysClock+0xe4>)
 8001694:	6892      	ldr	r2, [r2, #8]
 8001696:	f042 0202 	orr.w	r2, r2, #2
 800169a:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800169c:	bf00      	nop
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <SetSysClock+0xe4>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d1f9      	bne.n	800169e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000
 80016bc:	07404b19 	.word	0x07404b19
 80016c0:	40023c00 	.word	0x40023c00

080016c4 <xTaskGenericCreate>:
	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;

#endif

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	4613      	mov	r3, r2
 80016d2:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <xTaskGenericCreate+0x1c>
 80016da:	f001 fc8f 	bl	8002ffc <ulPortSetInterruptMask>
 80016de:	e7fe      	b.n	80016de <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 80016e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d902      	bls.n	80016ec <xTaskGenericCreate+0x28>
 80016e6:	f001 fc89 	bl	8002ffc <ulPortSetInterruptMask>
 80016ea:	e7fe      	b.n	80016ea <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	4618      	mov	r0, r3
 80016f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016f2:	f000 fe21 	bl	8002338 <prvAllocateTCBAndStack>
 80016f6:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d072      	beq.n	80017e4 <xTaskGenericCreate+0x120>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001708:	3b01      	subs	r3, #1
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f023 0307 	bic.w	r3, r3, #7
 8001716:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <xTaskGenericCreate+0x64>
 8001722:	f001 fc6b 	bl	8002ffc <ulPortSetInterruptMask>
 8001726:	e7fe      	b.n	8001726 <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	69b8      	ldr	r0, [r7, #24]
 800172e:	68b9      	ldr	r1, [r7, #8]
 8001730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001734:	f000 fd0a 	bl	800214c <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001738:	6978      	ldr	r0, [r7, #20]
 800173a:	68f9      	ldr	r1, [r7, #12]
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	f001 fb6b 	bl	8002e18 <pxPortInitialiseStack>
 8001742:	4602      	mov	r2, r0
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8001748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 800174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	601a      	str	r2, [r3, #0]
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8001754:	f001 fc30 	bl	8002fb8 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8001758:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <xTaskGenericCreate+0x150>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <xTaskGenericCreate+0x150>)
 8001760:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8001762:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <xTaskGenericCreate+0x154>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 800176a:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <xTaskGenericCreate+0x154>)
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8001770:	4b28      	ldr	r3, [pc, #160]	; (8001814 <xTaskGenericCreate+0x150>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d10f      	bne.n	8001798 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8001778:	f000 fd30 	bl	80021dc <prvInitialiseTaskLists>
 800177c:	e00c      	b.n	8001798 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 800177e:	4b27      	ldr	r3, [pc, #156]	; (800181c <xTaskGenericCreate+0x158>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d108      	bne.n	8001798 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8001786:	4b24      	ldr	r3, [pc, #144]	; (8001818 <xTaskGenericCreate+0x154>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178e:	429a      	cmp	r2, r3
 8001790:	d802      	bhi.n	8001798 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <xTaskGenericCreate+0x154>)
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	601a      	str	r2, [r3, #0]
					}
				}
			}

			uxTaskNumber++;
 8001798:	4b21      	ldr	r3, [pc, #132]	; (8001820 <xTaskGenericCreate+0x15c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <xTaskGenericCreate+0x15c>)
 80017a0:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <xTaskGenericCreate+0x15c>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <xTaskGenericCreate+0x160>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d903      	bls.n	80017be <xTaskGenericCreate+0xfa>
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <xTaskGenericCreate+0x160>)
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <xTaskGenericCreate+0x164>)
 80017cc:	441a      	add	r2, r3
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	3304      	adds	r3, #4
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f001 fa99 	bl	8002d0c <vListInsertEnd>

			xReturn = pdPASS;
 80017da:	2301      	movs	r3, #1
 80017dc:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80017de:	f001 fbfb 	bl	8002fd8 <vPortExitCritical>
 80017e2:	e002      	b.n	80017ea <xTaskGenericCreate+0x126>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017e8:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d10b      	bne.n	8001808 <xTaskGenericCreate+0x144>
	{
		if( xSchedulerRunning != pdFALSE )
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <xTaskGenericCreate+0x158>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d007      	beq.n	8001808 <xTaskGenericCreate+0x144>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <xTaskGenericCreate+0x154>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001800:	429a      	cmp	r2, r3
 8001802:	d201      	bcs.n	8001808 <xTaskGenericCreate+0x144>
			{
				portYIELD_WITHIN_API();
 8001804:	f001 fbc8 	bl	8002f98 <vPortYield>
			}
		}
	}

	return xReturn;
 8001808:	69fb      	ldr	r3, [r7, #28]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000550 	.word	0x20000550
 8001818:	20000478 	.word	0x20000478
 800181c:	2000055c 	.word	0x2000055c
 8001820:	20000570 	.word	0x20000570
 8001824:	20000558 	.word	0x20000558
 8001828:	2000047c 	.word	0x2000047c

0800182c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <vTaskDelayUntil+0x1a>
 8001840:	f001 fbdc 	bl	8002ffc <ulPortSetInterruptMask>
 8001844:	e7fe      	b.n	8001844 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <vTaskDelayUntil+0x26>
 800184c:	f001 fbd6 	bl	8002ffc <ulPortSetInterruptMask>
 8001850:	e7fe      	b.n	8001850 <vTaskDelayUntil+0x24>

		vTaskSuspendAll();
 8001852:	f000 f943 	bl	8001adc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <vTaskDelayUntil+0xa8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	4413      	add	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d90b      	bls.n	8001888 <vTaskDelayUntil+0x5c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	429a      	cmp	r2, r3
 8001878:	d911      	bls.n	800189e <vTaskDelayUntil+0x72>
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	429a      	cmp	r2, r3
 8001880:	d90d      	bls.n	800189e <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 8001882:	2301      	movs	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e00a      	b.n	800189e <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	429a      	cmp	r2, r3
 8001890:	d803      	bhi.n	800189a <vTaskDelayUntil+0x6e>
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	429a      	cmp	r2, r3
 8001898:	d901      	bls.n	800189e <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 800189a:	2301      	movs	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <vTaskDelayUntil+0xac>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3304      	adds	r3, #4
 80018b0:	4618      	mov	r0, r3
 80018b2:	f001 fa87 	bl	8002dc4 <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 fd08 	bl	80022cc <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80018bc:	f000 f91c 	bl	8001af8 <xTaskResumeAll>
 80018c0:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
 80018c8:	f001 fb66 	bl	8002f98 <vPortYield>
		}
	}
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000554 	.word	0x20000554
 80018d8:	20000478 	.word	0x20000478

080018dc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle xTaskToSuspend )
	{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 80018e4:	f001 fb68 	bl	8002fb8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d102      	bne.n	80018f4 <vTaskSuspend+0x18>
 80018ee:	4b1b      	ldr	r3, [pc, #108]	; (800195c <vTaskSuspend+0x80>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	e000      	b.n	80018f6 <vTaskSuspend+0x1a>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	3304      	adds	r3, #4
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 fa61 	bl	8002dc4 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3318      	adds	r3, #24
 800190e:	4618      	mov	r0, r3
 8001910:	f001 fa58 	bl	8002dc4 <uxListRemove>
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3304      	adds	r3, #4
 8001918:	4811      	ldr	r0, [pc, #68]	; (8001960 <vTaskSuspend+0x84>)
 800191a:	4619      	mov	r1, r3
 800191c:	f001 f9f6 	bl	8002d0c <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8001920:	f001 fb5a 	bl	8002fd8 <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
 8001924:	4b0d      	ldr	r3, [pc, #52]	; (800195c <vTaskSuspend+0x80>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	429a      	cmp	r2, r3
 800192c:	d112      	bne.n	8001954 <vTaskSuspend+0x78>
		{
			if( xSchedulerRunning != pdFALSE )
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <vTaskSuspend+0x88>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <vTaskSuspend+0x60>
			{
				/* The current task has just been suspended. */
				portYIELD_WITHIN_API();
 8001936:	f001 fb2f 	bl	8002f98 <vPortYield>
 800193a:	e00b      	b.n	8001954 <vTaskSuspend+0x78>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <vTaskSuspend+0x84>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <vTaskSuspend+0x8c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d103      	bne.n	8001950 <vTaskSuspend+0x74>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <vTaskSuspend+0x80>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	e001      	b.n	8001954 <vTaskSuspend+0x78>
				}
				else
				{
					vTaskSwitchContext();
 8001950:	f000 fa40 	bl	8001dd4 <vTaskSwitchContext>
				}
			}
		}
	}
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000478 	.word	0x20000478
 8001960:	2000053c 	.word	0x2000053c
 8001964:	2000055c 	.word	0x2000055c
 8001968:	20000550 	.word	0x20000550

0800196c <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	60bb      	str	r3, [r7, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <xTaskIsTaskSuspended+0x1c>
 8001982:	f001 fb3b 	bl	8002ffc <ulPortSetInterruptMask>
 8001986:	e7fe      	b.n	8001986 <xTaskIsTaskSuspended+0x1a>

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <xTaskIsTaskSuspended+0x5c>)
 800198e:	429a      	cmp	r2, r3
 8001990:	d101      	bne.n	8001996 <xTaskIsTaskSuspended+0x2a>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <xTaskIsTaskSuspended+0x2c>
 8001996:	2300      	movs	r3, #0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00f      	beq.n	80019bc <xTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <xTaskIsTaskSuspended+0x60>)
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d00a      	beq.n	80019bc <xTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <xTaskIsTaskSuspended+0x46>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <xTaskIsTaskSuspended+0x48>
 80019b2:	2300      	movs	r3, #0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <xTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 80019b8:	2301      	movs	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
 80019bc:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000053c 	.word	0x2000053c
 80019cc:	20000510 	.word	0x20000510

080019d0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle xTaskToResume )
	{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <vTaskResume+0x18>
 80019e2:	f001 fb0b 	bl	8002ffc <ulPortSetInterruptMask>
 80019e6:	e7fe      	b.n	80019e6 <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d034      	beq.n	8001a58 <vTaskResume+0x88>
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <vTaskResume+0x90>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d02f      	beq.n	8001a58 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 80019f8:	f001 fade 	bl	8002fb8 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7ff ffb5 	bl	800196c <xTaskIsTaskSuspended>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d125      	bne.n	8001a54 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f001 f9d9 	bl	8002dc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <vTaskResume+0x94>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d903      	bls.n	8001a26 <vTaskResume+0x56>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <vTaskResume+0x94>)
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4a0d      	ldr	r2, [pc, #52]	; (8001a68 <vTaskResume+0x98>)
 8001a34:	441a      	add	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f001 f965 	bl	8002d0c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <vTaskResume+0x90>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d301      	bcc.n	8001a54 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
 8001a50:	f001 faa2 	bl	8002f98 <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
 8001a54:	f001 fac0 	bl	8002fd8 <vPortExitCritical>
		}
	}
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000478 	.word	0x20000478
 8001a64:	20000558 	.word	0x20000558
 8001a68:	2000047c 	.word	0x2000047c

08001a6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8001a72:	2300      	movs	r3, #0
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2300      	movs	r3, #0
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	9303      	str	r3, [sp, #12]
 8001a82:	4812      	ldr	r0, [pc, #72]	; (8001acc <vTaskStartScheduler+0x60>)
 8001a84:	4912      	ldr	r1, [pc, #72]	; (8001ad0 <vTaskStartScheduler+0x64>)
 8001a86:	2282      	movs	r2, #130	; 0x82
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f7ff fe1b 	bl	80016c4 <xTaskGenericCreate>
 8001a8e:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d102      	bne.n	8001a9c <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 8001a96:	f001 fb4b 	bl	8003130 <xTimerCreateTimerTask>
 8001a9a:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d10a      	bne.n	8001ab8 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8001aa2:	f001 faab 	bl	8002ffc <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <vTaskStartScheduler+0x68>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <vTaskStartScheduler+0x6c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001ab2:	f001 fa0b 	bl	8002ecc <xPortStartScheduler>
 8001ab6:	e005      	b.n	8001ac4 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <vTaskStartScheduler+0x58>
 8001abe:	f001 fa9d 	bl	8002ffc <ulPortSetInterruptMask>
 8001ac2:	e7fe      	b.n	8001ac2 <vTaskStartScheduler+0x56>
	}
}
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	08002129 	.word	0x08002129
 8001ad0:	08004adc 	.word	0x08004adc
 8001ad4:	2000055c 	.word	0x2000055c
 8001ad8:	20000554 	.word	0x20000554

08001adc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <vTaskSuspendAll+0x18>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <vTaskSuspendAll+0x18>)
 8001ae8:	601a      	str	r2, [r3, #0]
}
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000560 	.word	0x20000560

08001af8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
tskTCB *pxTCB;
portBASE_TYPE xAlreadyYielded = pdFALSE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001b02:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <xTaskResumeAll+0xec>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d102      	bne.n	8001b10 <xTaskResumeAll+0x18>
 8001b0a:	f001 fa77 	bl	8002ffc <ulPortSetInterruptMask>
 8001b0e:	e7fe      	b.n	8001b0e <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001b10:	f001 fa52 	bl	8002fb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001b14:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <xTaskResumeAll+0xec>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	1e5a      	subs	r2, r3, #1
 8001b1a:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <xTaskResumeAll+0xec>)
 8001b1c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001b1e:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <xTaskResumeAll+0xec>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d156      	bne.n	8001bd4 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8001b26:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <xTaskResumeAll+0xf0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d052      	beq.n	8001bd4 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b2e:	e02f      	b.n	8001b90 <xTaskResumeAll+0x98>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001b30:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <xTaskResumeAll+0xf4>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	3318      	adds	r3, #24
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f001 f941 	bl	8002dc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	3304      	adds	r3, #4
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 f93c 	bl	8002dc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <xTaskResumeAll+0xf8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d903      	bls.n	8001b60 <xTaskResumeAll+0x68>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <xTaskResumeAll+0xf8>)
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <xTaskResumeAll+0xfc>)
 8001b6e:	441a      	add	r2, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	3304      	adds	r3, #4
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f001 f8c8 	bl	8002d0c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <xTaskResumeAll+0x100>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d302      	bcc.n	8001b90 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <xTaskResumeAll+0x104>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <xTaskResumeAll+0xf4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1cb      	bne.n	8001b30 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <xTaskResumeAll+0x108>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d011      	beq.n	8001bc4 <xTaskResumeAll+0xcc>
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001ba0:	e00c      	b.n	8001bbc <xTaskResumeAll+0xc4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8001ba2:	f000 f841 	bl	8001c28 <xTaskIncrementTick>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 8001bac:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <xTaskResumeAll+0x104>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]
						}
						--uxPendedTicks;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <xTaskResumeAll+0x108>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	1e5a      	subs	r2, r3, #1
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <xTaskResumeAll+0x108>)
 8001bba:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <xTaskResumeAll+0x108>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ee      	bne.n	8001ba2 <xTaskResumeAll+0xaa>
						}
						--uxPendedTicks;
					}
				}

				if( xYieldPending == pdTRUE )
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <xTaskResumeAll+0x104>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d103      	bne.n	8001bd4 <xTaskResumeAll+0xdc>
				{
					xAlreadyYielded = pdTRUE;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	607b      	str	r3, [r7, #4]
					portYIELD_WITHIN_API();
 8001bd0:	f001 f9e2 	bl	8002f98 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8001bd4:	f001 fa00 	bl	8002fd8 <vPortExitCritical>

	return xAlreadyYielded;
 8001bd8:	687b      	ldr	r3, [r7, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000560 	.word	0x20000560
 8001be8:	20000550 	.word	0x20000550
 8001bec:	20000510 	.word	0x20000510
 8001bf0:	20000558 	.word	0x20000558
 8001bf4:	2000047c 	.word	0x2000047c
 8001bf8:	20000478 	.word	0x20000478
 8001bfc:	20000568 	.word	0x20000568
 8001c00:	20000564 	.word	0x20000564

08001c04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8001c0a:	f001 f9d5 	bl	8002fb8 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <xTaskGetTickCount+0x20>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8001c14:	f001 f9e0 	bl	8002fd8 <vPortExitCritical>

	return xTicks;
 8001c18:	687b      	ldr	r3, [r7, #4]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000554 	.word	0x20000554

08001c28 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

portBASE_TYPE xTaskIncrementTick( void )
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
tskTCB * pxTCB;
portTickType xItemValue;
portBASE_TYPE xSwitchRequired = pdFALSE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001c32:	4b5d      	ldr	r3, [pc, #372]	; (8001da8 <xTaskIncrementTick+0x180>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 80a4 	bne.w	8001d84 <xTaskIncrementTick+0x15c>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8001c3c:	4b5b      	ldr	r3, [pc, #364]	; (8001dac <xTaskIncrementTick+0x184>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	4b5a      	ldr	r3, [pc, #360]	; (8001dac <xTaskIncrementTick+0x184>)
 8001c44:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 8001c46:	4b59      	ldr	r3, [pc, #356]	; (8001dac <xTaskIncrementTick+0x184>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( portTickType ) 0U )
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d12e      	bne.n	8001cb0 <xTaskIncrementTick+0x88>
			{
				taskSWITCH_DELAYED_LISTS();
 8001c52:	4b57      	ldr	r3, [pc, #348]	; (8001db0 <xTaskIncrementTick+0x188>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <xTaskIncrementTick+0x3a>
 8001c5c:	f001 f9ce 	bl	8002ffc <ulPortSetInterruptMask>
 8001c60:	e7fe      	b.n	8001c60 <xTaskIncrementTick+0x38>
 8001c62:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <xTaskIncrementTick+0x188>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	4b52      	ldr	r3, [pc, #328]	; (8001db4 <xTaskIncrementTick+0x18c>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <xTaskIncrementTick+0x188>)
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <xTaskIncrementTick+0x18c>)
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	4b50      	ldr	r3, [pc, #320]	; (8001db8 <xTaskIncrementTick+0x190>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	4b4e      	ldr	r3, [pc, #312]	; (8001db8 <xTaskIncrementTick+0x190>)
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <xTaskIncrementTick+0x188>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <xTaskIncrementTick+0x66>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <xTaskIncrementTick+0x68>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <xTaskIncrementTick+0x76>
 8001c94:	4b49      	ldr	r3, [pc, #292]	; (8001dbc <xTaskIncrementTick+0x194>)
 8001c96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	e008      	b.n	8001cb0 <xTaskIncrementTick+0x88>
 8001c9e:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <xTaskIncrementTick+0x188>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <xTaskIncrementTick+0x194>)
 8001cae:	601a      	str	r2, [r3, #0]

			/* See if this tick has made a timeout expire.  Tasks are stored in the
			queue in the order of their wake time - meaning once one tasks has been
			found whose block time has not expired there is no need not look any
			further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8001cb0:	4b42      	ldr	r3, [pc, #264]	; (8001dbc <xTaskIncrementTick+0x194>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d34f      	bcc.n	8001d5a <xTaskIncrementTick+0x132>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cba:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <xTaskIncrementTick+0x188>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <xTaskIncrementTick+0xa0>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <xTaskIncrementTick+0xa2>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d004      	beq.n	8001cd8 <xTaskIncrementTick+0xb0>
					{
						/* The delayed list is empty.  Set xNextTaskUnblockTime to
						the	maximum possible value so it is extremely unlikely that
						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8001cce:	4b3b      	ldr	r3, [pc, #236]	; (8001dbc <xTaskIncrementTick+0x194>)
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cd4:	601a      	str	r2, [r3, #0]
						break;
 8001cd6:	e040      	b.n	8001d5a <xTaskIncrementTick+0x132>
					{
						/* The delayed list is not empty, get the value of the item
						at the head of the delayed list.  This is the time at which
						the task at the head of the delayed list must be removed
						from the Blocked state. */
						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001cd8:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <xTaskIncrementTick+0x188>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d203      	bcs.n	8001cf8 <xTaskIncrementTick+0xd0>
						{
							/* It is not time to unblock this item yet, but the item
							value is the time at which the task at the head of the
							blocked list must be removed from the Blocked state -
							so record the item value in xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8001cf0:	4b32      	ldr	r3, [pc, #200]	; (8001dbc <xTaskIncrementTick+0x194>)
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	601a      	str	r2, [r3, #0]
							break;
 8001cf6:	e030      	b.n	8001d5a <xTaskIncrementTick+0x132>
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f001 f861 	bl	8002dc4 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove it
						from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d004      	beq.n	8001d14 <xTaskIncrementTick+0xec>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	3318      	adds	r3, #24
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f001 f858 	bl	8002dc4 <uxListRemove>
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d18:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <xTaskIncrementTick+0x198>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d903      	bls.n	8001d28 <xTaskIncrementTick+0x100>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d24:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <xTaskIncrementTick+0x198>)
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4a23      	ldr	r2, [pc, #140]	; (8001dc4 <xTaskIncrementTick+0x19c>)
 8001d36:	441a      	add	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f000 ffe4 	bl	8002d0c <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should only
							be performed if the unblocked task has a priority that
							is equal to or higher than the currently executing
							task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d48:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <xTaskIncrementTick+0x1a0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d302      	bcc.n	8001d58 <xTaskIncrementTick+0x130>
							{
								xSwitchRequired = pdTRUE;
 8001d52:	2301      	movs	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 8001d56:	e7b0      	b.n	8001cba <xTaskIncrementTick+0x92>
 8001d58:	e7af      	b.n	8001cba <xTaskIncrementTick+0x92>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <xTaskIncrementTick+0x1a0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d60:	4918      	ldr	r1, [pc, #96]	; (8001dc4 <xTaskIncrementTick+0x19c>)
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d901      	bls.n	8001d76 <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 8001d72:	2301      	movs	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
		
		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( unsigned portBASE_TYPE ) 0U )
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <xTaskIncrementTick+0x1a4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d109      	bne.n	8001d92 <xTaskIncrementTick+0x16a>
			{
				vApplicationTickHook();
 8001d7e:	f7ff fb19 	bl	80013b4 <vApplicationTickHook>
 8001d82:	e006      	b.n	8001d92 <xTaskIncrementTick+0x16a>
		}
		#endif /* configUSE_TICK_HOOK */		
	}
	else
	{
		++uxPendedTicks;
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <xTaskIncrementTick+0x1a4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <xTaskIncrementTick+0x1a4>)
 8001d8c:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8001d8e:	f7ff fb11 	bl	80013b4 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <xTaskIncrementTick+0x1a8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <xTaskIncrementTick+0x176>
		{
			xSwitchRequired = pdTRUE;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001d9e:	697b      	ldr	r3, [r7, #20]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000560 	.word	0x20000560
 8001dac:	20000554 	.word	0x20000554
 8001db0:	20000508 	.word	0x20000508
 8001db4:	2000050c 	.word	0x2000050c
 8001db8:	2000056c 	.word	0x2000056c
 8001dbc:	20000004 	.word	0x20000004
 8001dc0:	20000558 	.word	0x20000558
 8001dc4:	2000047c 	.word	0x2000047c
 8001dc8:	20000478 	.word	0x20000478
 8001dcc:	20000564 	.word	0x20000564
 8001dd0:	20000568 	.word	0x20000568

08001dd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8001dda:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <vTaskSwitchContext+0xdc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001de2:	4b34      	ldr	r3, [pc, #208]	; (8001eb4 <vTaskSwitchContext+0xe0>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e05e      	b.n	8001ea8 <vTaskSwitchContext+0xd4>
	}
	else
	{
		xYieldPending = pdFALSE;
 8001dea:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <vTaskSwitchContext+0xe0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8001df0:	4b31      	ldr	r3, [pc, #196]	; (8001eb8 <vTaskSwitchContext+0xe4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b30      	ldr	r3, [pc, #192]	; (8001eb8 <vTaskSwitchContext+0xe4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d808      	bhi.n	8001e12 <vTaskSwitchContext+0x3e>
 8001e00:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <vTaskSwitchContext+0xe4>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <vTaskSwitchContext+0xe4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3334      	adds	r3, #52	; 0x34
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7ff fb3f 	bl	8001490 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8001e12:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <vTaskSwitchContext+0xe4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	4618      	mov	r0, r3
 8001e1a:	4928      	ldr	r1, [pc, #160]	; (8001ebc <vTaskSwitchContext+0xe8>)
 8001e1c:	2214      	movs	r2, #20
 8001e1e:	f002 fcdf 	bl	80047e0 <memcmp>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d009      	beq.n	8001e3c <vTaskSwitchContext+0x68>
 8001e28:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <vTaskSwitchContext+0xe4>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <vTaskSwitchContext+0xe4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3334      	adds	r3, #52	; 0x34
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7ff fb2b 	bl	8001490 <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001e3a:	e00c      	b.n	8001e56 <vTaskSwitchContext+0x82>
 8001e3c:	e00b      	b.n	8001e56 <vTaskSwitchContext+0x82>
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <vTaskSwitchContext+0xec>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <vTaskSwitchContext+0x78>
 8001e46:	f001 f8d9 	bl	8002ffc <ulPortSetInterruptMask>
 8001e4a:	e7fe      	b.n	8001e4a <vTaskSwitchContext+0x76>
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <vTaskSwitchContext+0xec>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	1e5a      	subs	r2, r3, #1
 8001e52:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <vTaskSwitchContext+0xec>)
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <vTaskSwitchContext+0xec>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	491a      	ldr	r1, [pc, #104]	; (8001ec4 <vTaskSwitchContext+0xf0>)
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0e8      	beq.n	8001e3e <vTaskSwitchContext+0x6a>
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <vTaskSwitchContext+0xec>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <vTaskSwitchContext+0xf0>)
 8001e7a:	4413      	add	r3, r2
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3308      	adds	r3, #8
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d104      	bne.n	8001e9e <vTaskSwitchContext+0xca>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <vTaskSwitchContext+0xe4>)
 8001ea6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000560 	.word	0x20000560
 8001eb4:	20000568 	.word	0x20000568
 8001eb8:	20000478 	.word	0x20000478
 8001ebc:	08004cd4 	.word	0x08004cd4
 8001ec0:	20000558 	.word	0x20000558
 8001ec4:	2000047c 	.word	0x2000047c

08001ec8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <vTaskPlaceOnEventList+0x16>
 8001ed8:	f001 f890 	bl	8002ffc <ulPortSetInterruptMask>
 8001edc:	e7fe      	b.n	8001edc <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <vTaskPlaceOnEventList+0x60>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3318      	adds	r3, #24
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f000 ff34 	bl	8002d54 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <vTaskPlaceOnEventList+0x60>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 ff66 	bl	8002dc4 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001efe:	d107      	bne.n	8001f10 <vTaskPlaceOnEventList+0x48>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <vTaskPlaceOnEventList+0x60>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3304      	adds	r3, #4
 8001f06:	4809      	ldr	r0, [pc, #36]	; (8001f2c <vTaskPlaceOnEventList+0x64>)
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f000 feff 	bl	8002d0c <vListInsertEnd>
 8001f0e:	e007      	b.n	8001f20 <vTaskPlaceOnEventList+0x58>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8001f10:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <vTaskPlaceOnEventList+0x68>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f9d6 	bl	80022cc <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000478 	.word	0x20000478
 8001f2c:	2000053c 	.word	0x2000053c
 8001f30:	20000554 	.word	0x20000554

08001f34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( xList * const pxEventList, portTickType xTicksToWait )
	{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <vTaskPlaceOnEventListRestricted+0x16>
 8001f44:	f001 f85a 	bl	8002ffc <ulPortSetInterruptMask>
 8001f48:	e7fe      	b.n	8001f48 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <vTaskPlaceOnEventListRestricted+0x48>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3318      	adds	r3, #24
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4619      	mov	r1, r3
 8001f54:	f000 feda 	bl	8002d0c <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <vTaskPlaceOnEventListRestricted+0x48>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 ff30 	bl	8002dc4 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <vTaskPlaceOnEventListRestricted+0x4c>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 f9ac 	bl	80022cc <prvAddCurrentTaskToDelayedList>
	}
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000478 	.word	0x20000478
 8001f80:	20000554 	.word	0x20000554

08001f84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d102      	bne.n	8001fa0 <xTaskRemoveFromEventList+0x1c>
 8001f9a:	f001 f82f 	bl	8002ffc <ulPortSetInterruptMask>
 8001f9e:	e7fe      	b.n	8001f9e <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	3318      	adds	r3, #24
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 ff0d 	bl	8002dc4 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001faa:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <xTaskRemoveFromEventList+0xa0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11d      	bne.n	8001fee <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 ff04 	bl	8002dc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc0:	4b19      	ldr	r3, [pc, #100]	; (8002028 <xTaskRemoveFromEventList+0xa4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d903      	bls.n	8001fd0 <xTaskRemoveFromEventList+0x4c>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fcc:	4b16      	ldr	r3, [pc, #88]	; (8002028 <xTaskRemoveFromEventList+0xa4>)
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4a13      	ldr	r2, [pc, #76]	; (800202c <xTaskRemoveFromEventList+0xa8>)
 8001fde:	441a      	add	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f000 fe90 	bl	8002d0c <vListInsertEnd>
 8001fec:	e005      	b.n	8001ffa <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	3318      	adds	r3, #24
 8001ff2:	480f      	ldr	r0, [pc, #60]	; (8002030 <xTaskRemoveFromEventList+0xac>)
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f000 fe89 	bl	8002d0c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <xTaskRemoveFromEventList+0xb0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	429a      	cmp	r2, r3
 8002006:	d305      	bcc.n	8002014 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8002008:	2301      	movs	r3, #1
 800200a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <xTaskRemoveFromEventList+0xb4>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e001      	b.n	8002018 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8002018:	68fb      	ldr	r3, [r7, #12]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000560 	.word	0x20000560
 8002028:	20000558 	.word	0x20000558
 800202c:	2000047c 	.word	0x2000047c
 8002030:	20000510 	.word	0x20000510
 8002034:	20000478 	.word	0x20000478
 8002038:	20000568 	.word	0x20000568

0800203c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <vTaskSetTimeOutState+0x14>
 800204a:	f000 ffd7 	bl	8002ffc <ulPortSetInterruptMask>
 800204e:	e7fe      	b.n	800204e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <vTaskSetTimeOutState+0x2c>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <vTaskSetTimeOutState+0x30>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	605a      	str	r2, [r3, #4]
}
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000056c 	.word	0x2000056c
 800206c:	20000554 	.word	0x20000554

08002070 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d102      	bne.n	8002086 <xTaskCheckForTimeOut+0x16>
 8002080:	f000 ffbc 	bl	8002ffc <ulPortSetInterruptMask>
 8002084:	e7fe      	b.n	8002084 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d102      	bne.n	8002092 <xTaskCheckForTimeOut+0x22>
 800208c:	f000 ffb6 	bl	8002ffc <ulPortSetInterruptMask>
 8002090:	e7fe      	b.n	8002090 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8002092:	f000 ff91 	bl	8002fb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const portTickType xConstTickCount = xTickCount;
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <xTaskCheckForTimeOut+0x98>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020a4:	d102      	bne.n	80020ac <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	e026      	b.n	80020fa <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <xTaskCheckForTimeOut+0x9c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d007      	beq.n	80020c8 <xTaskCheckForTimeOut+0x58>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d802      	bhi.n	80020c8 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80020c2:	2301      	movs	r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	e018      	b.n	80020fa <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	1ad2      	subs	r2, r2, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d20e      	bcs.n	80020f6 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6859      	ldr	r1, [r3, #4]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	1acb      	subs	r3, r1, r3
 80020e4:	441a      	add	r2, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ffa6 	bl	800203c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	e001      	b.n	80020fa <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
 80020f6:	2301      	movs	r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80020fa:	f000 ff6d 	bl	8002fd8 <vPortExitCritical>

	return xReturn;
 80020fe:	68fb      	ldr	r3, [r7, #12]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000554 	.word	0x20000554
 800210c:	2000056c 	.word	0x2000056c

08002110 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <vTaskMissedYield+0x14>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]
}
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000568 	.word	0x20000568

08002128 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8002130:	f000 f892 	bl	8002258 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <prvIdleTask+0x20>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d901      	bls.n	8002140 <prvIdleTask+0x18>
			{
				taskYIELD();
 800213c:	f000 ff2c 	bl	8002f98 <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8002140:	f7ff f9a0 	bl	8001484 <vApplicationIdleHook>
				}
				( void ) xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8002144:	e7f4      	b.n	8002130 <prvIdleTask+0x8>
 8002146:	bf00      	nop
 8002148:	2000047c 	.word	0x2000047c

0800214c <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e012      	b.n	8002186 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	4413      	add	r3, r2
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	68f9      	ldr	r1, [r7, #12]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	440b      	add	r3, r1
 800216e:	3330      	adds	r3, #48	; 0x30
 8002170:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d100      	bne.n	8002180 <prvInitialiseTCBVariables+0x34>
		{
			break;
 800217e:	e005      	b.n	800218c <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3301      	adds	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b09      	cmp	r3, #9
 800218a:	d9e9      	bls.n	8002160 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b04      	cmp	r3, #4
 8002198:	d901      	bls.n	800219e <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 800219a:	2304      	movs	r3, #4
 800219c:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	3304      	adds	r3, #4
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fda0 	bl	8002cf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3318      	adds	r3, #24
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 fd9b 	bl	8002cf4 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f1c3 0205 	rsb	r2, r3, #5
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop

080021dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	e00c      	b.n	8002202 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4a11      	ldr	r2, [pc, #68]	; (8002238 <prvInitialiseTaskLists+0x5c>)
 80021f4:	4413      	add	r3, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 fd5c 	bl	8002cb4 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3301      	adds	r3, #1
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b04      	cmp	r3, #4
 8002206:	d9ef      	bls.n	80021e8 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002208:	480c      	ldr	r0, [pc, #48]	; (800223c <prvInitialiseTaskLists+0x60>)
 800220a:	f000 fd53 	bl	8002cb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800220e:	480c      	ldr	r0, [pc, #48]	; (8002240 <prvInitialiseTaskLists+0x64>)
 8002210:	f000 fd50 	bl	8002cb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002214:	480b      	ldr	r0, [pc, #44]	; (8002244 <prvInitialiseTaskLists+0x68>)
 8002216:	f000 fd4d 	bl	8002cb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800221a:	480b      	ldr	r0, [pc, #44]	; (8002248 <prvInitialiseTaskLists+0x6c>)
 800221c:	f000 fd4a 	bl	8002cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002220:	480a      	ldr	r0, [pc, #40]	; (800224c <prvInitialiseTaskLists+0x70>)
 8002222:	f000 fd47 	bl	8002cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <prvInitialiseTaskLists+0x74>)
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <prvInitialiseTaskLists+0x60>)
 800222a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <prvInitialiseTaskLists+0x78>)
 800222e:	4a04      	ldr	r2, [pc, #16]	; (8002240 <prvInitialiseTaskLists+0x64>)
 8002230:	601a      	str	r2, [r3, #0]
}
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	2000047c 	.word	0x2000047c
 800223c:	200004e0 	.word	0x200004e0
 8002240:	200004f4 	.word	0x200004f4
 8002244:	20000510 	.word	0x20000510
 8002248:	20000524 	.word	0x20000524
 800224c:	2000053c 	.word	0x2000053c
 8002250:	20000508 	.word	0x20000508
 8002254:	2000050c 	.word	0x2000050c

08002258 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 800225e:	e028      	b.n	80022b2 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002260:	f7ff fc3c 	bl	8001adc <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <prvCheckTasksWaitingTermination+0x68>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf14      	ite	ne
 800226c:	2300      	movne	r3, #0
 800226e:	2301      	moveq	r3, #1
 8002270:	b2db      	uxtb	r3, r3
 8002272:	607b      	str	r3, [r7, #4]
			( void ) xTaskResumeAll();
 8002274:	f7ff fc40 	bl	8001af8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d119      	bne.n	80022b2 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 800227e:	f000 fe9b 	bl	8002fb8 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <prvCheckTasksWaitingTermination+0x68>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	3304      	adds	r3, #4
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fd98 	bl	8002dc4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <prvCheckTasksWaitingTermination+0x6c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	1e5a      	subs	r2, r3, #1
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <prvCheckTasksWaitingTermination+0x6c>)
 800229c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <prvCheckTasksWaitingTermination+0x70>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	1e5a      	subs	r2, r3, #1
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <prvCheckTasksWaitingTermination+0x70>)
 80022a6:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 80022a8:	f000 fe96 	bl	8002fd8 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80022ac:	6838      	ldr	r0, [r7, #0]
 80022ae:	f000 f875 	bl	800239c <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <prvCheckTasksWaitingTermination+0x70>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1d2      	bne.n	8002260 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000524 	.word	0x20000524
 80022c4:	20000550 	.word	0x20000550
 80022c8:	20000538 	.word	0x20000538

080022cc <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <prvAddCurrentTaskToDelayedList+0x58>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <prvAddCurrentTaskToDelayedList+0x5c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d209      	bcs.n	80022fa <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <prvAddCurrentTaskToDelayedList+0x60>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <prvAddCurrentTaskToDelayedList+0x58>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3304      	adds	r3, #4
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	f000 fd2e 	bl	8002d54 <vListInsert>
 80022f8:	e010      	b.n	800231c <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <prvAddCurrentTaskToDelayedList+0x64>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <prvAddCurrentTaskToDelayedList+0x58>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3304      	adds	r3, #4
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	f000 fd24 	bl	8002d54 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <prvAddCurrentTaskToDelayedList+0x68>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	d202      	bcs.n	800231c <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <prvAddCurrentTaskToDelayedList+0x68>)
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000478 	.word	0x20000478
 8002328:	20000554 	.word	0x20000554
 800232c:	2000050c 	.word	0x2000050c
 8002330:	20000508 	.word	0x20000508
 8002334:	20000004 	.word	0x20000004

08002338 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8002344:	204c      	movs	r0, #76	; 0x4c
 8002346:	f001 f969 	bl	800361c <pvPortMalloc>
 800234a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d01f      	beq.n	8002392 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d106      	bne.n	8002366 <prvAllocateTCBAndStack+0x2e>
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4618      	mov	r0, r3
 800235e:	f001 f95d 	bl	800361c <pvPortMalloc>
 8002362:	4603      	mov	r3, r0
 8002364:	e000      	b.n	8002368 <prvAllocateTCBAndStack+0x30>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f001 f99d 	bl	80036b4 <vPortFree>
			pxNewTCB = NULL;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e008      	b.n	8002392 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4610      	mov	r0, r2
 800238a:	21a5      	movs	r1, #165	; 0xa5
 800238c:	461a      	mov	r2, r3
 800238e:	f002 fa5b 	bl	8004848 <memset>
		}
	}

	return pxNewTCB;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	4618      	mov	r0, r3
 80023aa:	f001 f983 	bl	80036b4 <vPortFree>
		vPortFree( pxTCB );
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f001 f980 	bl	80036b4 <vPortFree>
	}
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop

080023bc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <xTaskGetCurrentTaskHandle+0x1c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80023c8:	687b      	ldr	r3, [r7, #4]
	}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000478 	.word	0x20000478

080023dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <xTaskGetSchedulerState+0x34>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d102      	bne.n	80023f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	e008      	b.n	8002402 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <xTaskGetSchedulerState+0x38>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80023f8:	2301      	movs	r3, #1
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	e001      	b.n	8002402 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80023fe:	2302      	movs	r3, #2
 8002400:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002402:	687b      	ldr	r3, [r7, #4]
	}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	2000055c 	.word	0x2000055c
 8002414:	20000560 	.word	0x20000560

08002418 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle const pxMutexHolder )
	{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d046      	beq.n	80024b8 <vTaskPriorityInherit+0xa0>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242e:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <vTaskPriorityInherit+0xa8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	429a      	cmp	r2, r3
 8002436:	d23f      	bcs.n	80024b8 <vTaskPriorityInherit+0xa0>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002438:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <vTaskPriorityInherit+0xa8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	f1c3 0205 	rsb	r2, r3, #5
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6959      	ldr	r1, [r3, #20]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4a1b      	ldr	r2, [pc, #108]	; (80024c4 <vTaskPriorityInherit+0xac>)
 8002458:	4413      	add	r3, r2
 800245a:	4299      	cmp	r1, r3
 800245c:	d101      	bne.n	8002462 <vTaskPriorityInherit+0x4a>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <vTaskPriorityInherit+0x4c>
 8002462:	2300      	movs	r3, #0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d022      	beq.n	80024ae <vTaskPriorityInherit+0x96>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3304      	adds	r3, #4
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fca9 	bl	8002dc4 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <vTaskPriorityInherit+0xa8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <vTaskPriorityInherit+0xb0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d903      	bls.n	8002490 <vTaskPriorityInherit+0x78>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <vTaskPriorityInherit+0xb0>)
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <vTaskPriorityInherit+0xac>)
 800249e:	441a      	add	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	3304      	adds	r3, #4
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	f000 fc30 	bl	8002d0c <vListInsertEnd>
 80024ac:	e004      	b.n	80024b8 <vTaskPriorityInherit+0xa0>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <vTaskPriorityInherit+0xa8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000478 	.word	0x20000478
 80024c4:	2000047c 	.word	0x2000047c
 80024c8:	20000558 	.word	0x20000558

080024cc <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder )
	{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d02c      	beq.n	8002538 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d026      	beq.n	8002538 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3304      	adds	r3, #4
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fc68 	bl	8002dc4 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	f1c3 0205 	rsb	r2, r3, #5
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyList( pxTCB );
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <vTaskPriorityDisinherit+0x74>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d903      	bls.n	800251c <vTaskPriorityDisinherit+0x50>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <vTaskPriorityDisinherit+0x74>)
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4a06      	ldr	r2, [pc, #24]	; (8002544 <vTaskPriorityDisinherit+0x78>)
 800252a:	441a      	add	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3304      	adds	r3, #4
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	f000 fbea 	bl	8002d0c <vListInsertEnd>
			}
		}
	}
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000558 	.word	0x20000558
 8002544:	2000047c 	.word	0x2000047c

08002548 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <xQueueGenericReset+0x1a>
 800255c:	f000 fd4e 	bl	8002ffc <ulPortSetInterruptMask>
 8002560:	e7fe      	b.n	8002560 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8002562:	f000 fd29 	bl	8002fb8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256e:	68f9      	ldr	r1, [r7, #12]
 8002570:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	441a      	add	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002592:	3b01      	subs	r3, #1
 8002594:	68f9      	ldr	r1, [r7, #12]
 8002596:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	441a      	add	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025a8:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025b0:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10e      	bne.n	80025d6 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d014      	beq.n	80025ea <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	3310      	adds	r3, #16
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fcdd 	bl	8001f84 <xTaskRemoveFromEventList>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d10c      	bne.n	80025ea <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
 80025d0:	f000 fce2 	bl	8002f98 <vPortYield>
 80025d4:	e009      	b.n	80025ea <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3310      	adds	r3, #16
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fb6a 	bl	8002cb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3324      	adds	r3, #36	; 0x24
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fb65 	bl	8002cb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025ea:	f000 fcf5 	bl	8002fd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025ee:	2301      	movs	r3, #1
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	4613      	mov	r3, r2
 8002604:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d02a      	beq.n	8002666 <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8002610:	2050      	movs	r0, #80	; 0x50
 8002612:	f001 f803 	bl	800361c <pvPortMalloc>
 8002616:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d023      	beq.n	8002666 <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	3301      	adds	r3, #1
 8002628:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f000 fff6 	bl	800361c <pvPortMalloc>
 8002630:	4602      	mov	r2, r0
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d010      	beq.n	8002660 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800264a:	69b8      	ldr	r0, [r7, #24]
 800264c:	2101      	movs	r1, #1
 800264e:	f7ff ff7b 	bl	8002548 <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	79fa      	ldrb	r2, [r7, #7]
 8002656:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e002      	b.n	8002666 <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8002660:	69b8      	ldr	r0, [r7, #24]
 8002662:	f001 f827 	bl	80036b4 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <xQueueGenericCreate+0x7a>
 800266c:	f000 fcc6 	bl	8002ffc <ulPortSetInterruptMask>
 8002670:	e7fe      	b.n	8002670 <xQueueGenericCreate+0x78>

	return xReturn;
 8002672:	69fb      	ldr	r3, [r7, #28]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3720      	adds	r7, #32
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <xQueueGenericSend+0x22>
 8002698:	f000 fcb0 	bl	8002ffc <ulPortSetInterruptMask>
 800269c:	e7fe      	b.n	800269c <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d103      	bne.n	80026ac <xQueueGenericSend+0x30>
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <xQueueGenericSend+0x34>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <xQueueGenericSend+0x36>
 80026b0:	2300      	movs	r3, #0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d102      	bne.n	80026bc <xQueueGenericSend+0x40>
 80026b6:	f000 fca1 	bl	8002ffc <ulPortSetInterruptMask>
 80026ba:	e7fe      	b.n	80026ba <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d103      	bne.n	80026ca <xQueueGenericSend+0x4e>
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <xQueueGenericSend+0x52>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <xQueueGenericSend+0x54>
 80026ce:	2300      	movs	r3, #0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <xQueueGenericSend+0x5e>
 80026d4:	f000 fc92 	bl	8002ffc <ulPortSetInterruptMask>
 80026d8:	e7fe      	b.n	80026d8 <xQueueGenericSend+0x5c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80026da:	f000 fc6d 	bl	8002fb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d302      	bcc.n	80026f0 <xQueueGenericSend+0x74>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d116      	bne.n	800271e <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026f0:	69b8      	ldr	r0, [r7, #24]
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	f000 f9a9 	bl	8002a4c <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d009      	beq.n	8002716 <xQueueGenericSend+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	3324      	adds	r3, #36	; 0x24
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fc3c 	bl	8001f84 <xTaskRemoveFromEventList>
 800270c:	4603      	mov	r3, r0
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <xQueueGenericSend+0x9a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 8002712:	f000 fc41 	bl	8002f98 <vPortYield>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002716:	f000 fc5f 	bl	8002fd8 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 800271a:	2301      	movs	r3, #1
 800271c:	e059      	b.n	80027d2 <xQueueGenericSend+0x156>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d103      	bne.n	800272c <xQueueGenericSend+0xb0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002724:	f000 fc58 	bl	8002fd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002728:	2300      	movs	r3, #0
 800272a:	e052      	b.n	80027d2 <xQueueGenericSend+0x156>
				}
				else if( xEntryTimeSet == pdFALSE )
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002732:	f107 0310 	add.w	r3, r7, #16
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fc80 	bl	800203c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800273c:	2301      	movs	r3, #1
 800273e:	61fb      	str	r3, [r7, #28]
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 8002740:	f000 fc4a 	bl	8002fd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002744:	f7ff f9ca 	bl	8001adc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002748:	f000 fc36 	bl	8002fb8 <vPortEnterCritical>
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002754:	d102      	bne.n	800275c <xQueueGenericSend+0xe0>
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2200      	movs	r2, #0
 800275a:	645a      	str	r2, [r3, #68]	; 0x44
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002764:	d102      	bne.n	800276c <xQueueGenericSend+0xf0>
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2200      	movs	r2, #0
 800276a:	649a      	str	r2, [r3, #72]	; 0x48
 800276c:	f000 fc34 	bl	8002fd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002770:	f107 0210 	add.w	r2, r7, #16
 8002774:	1d3b      	adds	r3, r7, #4
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	f7ff fc79 	bl	8002070 <xTaskCheckForTimeOut>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d11e      	bne.n	80027c2 <xQueueGenericSend+0x146>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002784:	69b8      	ldr	r0, [r7, #24]
 8002786:	f000 fa51 	bl	8002c2c <prvIsQueueFull>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d012      	beq.n	80027b6 <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	f103 0210 	add.w	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f7ff fb94 	bl	8001ec8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80027a0:	69b8      	ldr	r0, [r7, #24]
 80027a2:	f000 f9e1 	bl	8002b68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80027a6:	f7ff f9a7 	bl	8001af8 <xTaskResumeAll>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10f      	bne.n	80027d0 <xQueueGenericSend+0x154>
				{
					portYIELD_WITHIN_API();
 80027b0:	f000 fbf2 	bl	8002f98 <vPortYield>
 80027b4:	e00c      	b.n	80027d0 <xQueueGenericSend+0x154>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80027b6:	69b8      	ldr	r0, [r7, #24]
 80027b8:	f000 f9d6 	bl	8002b68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027bc:	f7ff f99c 	bl	8001af8 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80027c0:	e78b      	b.n	80026da <xQueueGenericSend+0x5e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80027c2:	69b8      	ldr	r0, [r7, #24]
 80027c4:	f000 f9d0 	bl	8002b68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027c8:	f7ff f996 	bl	8001af8 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e000      	b.n	80027d2 <xQueueGenericSend+0x156>
		}
	}
 80027d0:	e783      	b.n	80026da <xQueueGenericSend+0x5e>
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3720      	adds	r7, #32
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop

080027dc <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <xQueueGenericSendFromISR+0x1e>
 80027f4:	f000 fc02 	bl	8002ffc <ulPortSetInterruptMask>
 80027f8:	e7fe      	b.n	80027f8 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d103      	bne.n	8002808 <xQueueGenericSendFromISR+0x2c>
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <xQueueGenericSendFromISR+0x30>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <xQueueGenericSendFromISR+0x32>
 800280c:	2300      	movs	r3, #0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <xQueueGenericSendFromISR+0x3c>
 8002812:	f000 fbf3 	bl	8002ffc <ulPortSetInterruptMask>
 8002816:	e7fe      	b.n	8002816 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d103      	bne.n	8002826 <xQueueGenericSendFromISR+0x4a>
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <xQueueGenericSendFromISR+0x4e>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <xQueueGenericSendFromISR+0x50>
 800282a:	2300      	movs	r3, #0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <xQueueGenericSendFromISR+0x5a>
 8002830:	f000 fbe4 	bl	8002ffc <ulPortSetInterruptMask>
 8002834:	e7fe      	b.n	8002834 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002836:	f000 fc4f 	bl	80030d8 <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800283a:	f000 fbdf 	bl	8002ffc <ulPortSetInterruptMask>
 800283e:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002848:	429a      	cmp	r2, r3
 800284a:	d302      	bcc.n	8002852 <xQueueGenericSendFromISR+0x76>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d124      	bne.n	800289c <xQueueGenericSendFromISR+0xc0>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002852:	69b8      	ldr	r0, [r7, #24]
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	f000 f8f8 	bl	8002a4c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002864:	d112      	bne.n	800288c <xQueueGenericSendFromISR+0xb0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	2b00      	cmp	r3, #0
 800286c:	d013      	beq.n	8002896 <xQueueGenericSendFromISR+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	3324      	adds	r3, #36	; 0x24
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fb86 	bl	8001f84 <xTaskRemoveFromEventList>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <xQueueGenericSendFromISR+0xba>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <xQueueGenericSendFromISR+0xba>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	e004      	b.n	8002896 <xQueueGenericSendFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8002896:	2301      	movs	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	e001      	b.n	80028a0 <xQueueGenericSendFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80028a0:	6978      	ldr	r0, [r7, #20]
 80028a2:	f000 fbb5 	bl	8003010 <vPortClearInterruptMask>

	return xReturn;
 80028a6:	69fb      	ldr	r3, [r7, #28]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3720      	adds	r7, #32
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <xQueueGenericReceive+0x22>
 80028cc:	f000 fb96 	bl	8002ffc <ulPortSetInterruptMask>
 80028d0:	e7fe      	b.n	80028d0 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d103      	bne.n	80028e0 <xQueueGenericReceive+0x30>
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <xQueueGenericReceive+0x34>
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <xQueueGenericReceive+0x36>
 80028e4:	2300      	movs	r3, #0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <xQueueGenericReceive+0x40>
 80028ea:	f000 fb87 	bl	8002ffc <ulPortSetInterruptMask>
 80028ee:	e7fe      	b.n	80028ee <xQueueGenericReceive+0x3e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80028f0:	f000 fb62 	bl	8002fb8 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d03b      	beq.n	8002974 <xQueueGenericReceive+0xc4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002902:	6a38      	ldr	r0, [r7, #32]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	f000 f909 	bl	8002b1c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d11c      	bne.n	800294a <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	1e5a      	subs	r2, r3, #1
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d104      	bne.n	800292c <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as xTaskHandle is a typedef. */
 8002922:	f7ff fd4b 	bl	80023bc <xTaskGetCurrentTaskHandle>
 8002926:	4602      	mov	r2, r0
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01b      	beq.n	800296c <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	3310      	adds	r3, #16
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fb23 	bl	8001f84 <xTaskRemoveFromEventList>
 800293e:	4603      	mov	r3, r0
 8002940:	2b01      	cmp	r3, #1
 8002942:	d113      	bne.n	800296c <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
 8002944:	f000 fb28 	bl	8002f98 <vPortYield>
 8002948:	e010      	b.n	800296c <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	2b00      	cmp	r3, #0
 8002956:	d009      	beq.n	800296c <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	3324      	adds	r3, #36	; 0x24
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fb11 	bl	8001f84 <xTaskRemoveFromEventList>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8002968:	f000 fb16 	bl	8002f98 <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
 800296c:	f000 fb34 	bl	8002fd8 <vPortExitCritical>
				return pdPASS;
 8002970:	2301      	movs	r3, #1
 8002972:	e066      	b.n	8002a42 <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d103      	bne.n	8002982 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800297a:	f000 fb2d 	bl	8002fd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800297e:	2300      	movs	r3, #0
 8002980:	e05f      	b.n	8002a42 <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	2b00      	cmp	r3, #0
 8002986:	d106      	bne.n	8002996 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fb55 	bl	800203c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002992:	2301      	movs	r3, #1
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 8002996:	f000 fb1f 	bl	8002fd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800299a:	f7ff f89f 	bl	8001adc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800299e:	f000 fb0b 	bl	8002fb8 <vPortEnterCritical>
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029aa:	d102      	bne.n	80029b2 <xQueueGenericReceive+0x102>
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	2200      	movs	r2, #0
 80029b0:	645a      	str	r2, [r3, #68]	; 0x44
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ba:	d102      	bne.n	80029c2 <xQueueGenericReceive+0x112>
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	2200      	movs	r2, #0
 80029c0:	649a      	str	r2, [r3, #72]	; 0x48
 80029c2:	f000 fb09 	bl	8002fd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029c6:	f107 0214 	add.w	r2, r7, #20
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	4610      	mov	r0, r2
 80029ce:	4619      	mov	r1, r3
 80029d0:	f7ff fb4e 	bl	8002070 <xTaskCheckForTimeOut>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d12b      	bne.n	8002a32 <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029da:	6a38      	ldr	r0, [r7, #32]
 80029dc:	f000 f910 	bl	8002c00 <prvIsQueueEmpty>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01f      	beq.n	8002a26 <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d108      	bne.n	8002a00 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
 80029ee:	f000 fae3 	bl	8002fb8 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fd0e 	bl	8002418 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 80029fc:	f000 faec 	bl	8002fd8 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f7ff fa5c 	bl	8001ec8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a10:	6a38      	ldr	r0, [r7, #32]
 8002a12:	f000 f8a9 	bl	8002b68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a16:	f7ff f86f 	bl	8001af8 <xTaskResumeAll>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10f      	bne.n	8002a40 <xQueueGenericReceive+0x190>
				{
					portYIELD_WITHIN_API();
 8002a20:	f000 faba 	bl	8002f98 <vPortYield>
 8002a24:	e00c      	b.n	8002a40 <xQueueGenericReceive+0x190>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a26:	6a38      	ldr	r0, [r7, #32]
 8002a28:	f000 f89e 	bl	8002b68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a2c:	f7ff f864 	bl	8001af8 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8002a30:	e75e      	b.n	80028f0 <xQueueGenericReceive+0x40>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8002a32:	6a38      	ldr	r0, [r7, #32]
 8002a34:	f000 f898 	bl	8002b68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a38:	f7ff f85e 	bl	8001af8 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e000      	b.n	8002a42 <xQueueGenericReceive+0x192>
		}
	}
 8002a40:	e756      	b.n	80028f0 <xQueueGenericReceive+0x40>
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3728      	adds	r7, #40	; 0x28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop

08002a4c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10c      	bne.n	8002a7a <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d151      	bne.n	8002b0c <prvCopyDataToQueue+0xc0>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fd2d 	bl	80024cc <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	e048      	b.n	8002b0c <prvCopyDataToQueue+0xc0>
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d11a      	bne.n	8002ab6 <prvCopyDataToQueue+0x6a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	4610      	mov	r0, r2
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f7fd fba5 	bl	80001dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	441a      	add	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d32f      	bcc.n	8002b0c <prvCopyDataToQueue+0xc0>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	e02a      	b.n	8002b0c <prvCopyDataToQueue+0xc0>
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	4610      	mov	r0, r2
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f7fd fb8a 	bl	80001dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	425b      	negs	r3, r3
 8002ad2:	441a      	add	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d207      	bcs.n	8002af4 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	425b      	negs	r3, r3
 8002aee:	441a      	add	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	60da      	str	r2, [r3, #12]
		}

		if( xPosition == queueOVERWRITE )
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d108      	bne.n	8002b0c <prvCopyDataToQueue+0xc0>
		{
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d004      	beq.n	8002b0c <prvCopyDataToQueue+0xc0>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	1e5a      	subs	r2, r3, #1
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d019      	beq.n	8002b62 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	441a      	add	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d303      	bcc.n	8002b50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	60da      	str	r2, [r3, #12]
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	6838      	ldr	r0, [r7, #0]
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f7fd fb3d 	bl	80001dc <memcpy>
	}
}
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b70:	f000 fa22 	bl	8002fb8 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002b74:	e014      	b.n	8002ba0 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3324      	adds	r3, #36	; 0x24
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f9fe 	bl	8001f84 <xTaskRemoveFromEventList>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8002b8e:	f7ff fabf 	bl	8002110 <vTaskMissedYield>
 8002b92:	e000      	b.n	8002b96 <prvUnlockQueue+0x2e>
					}
				}
				else
				{
					break;
 8002b94:	e008      	b.n	8002ba8 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9a:	1e5a      	subs	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	dce6      	bgt.n	8002b76 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bae:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8002bb0:	f000 fa12 	bl	8002fd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002bb4:	f000 fa00 	bl	8002fb8 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002bb8:	e014      	b.n	8002be4 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00f      	beq.n	8002be2 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3310      	adds	r3, #16
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff f9dc 	bl	8001f84 <xTaskRemoveFromEventList>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8002bd2:	f7ff fa9d 	bl	8002110 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	1e5a      	subs	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	645a      	str	r2, [r3, #68]	; 0x44
 8002be0:	e000      	b.n	8002be4 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 8002be2:	e003      	b.n	8002bec <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	dce6      	bgt.n	8002bba <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bf2:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002bf4:	f000 f9f0 	bl	8002fd8 <vPortExitCritical>
}
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop

08002c00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002c08:	f000 f9d6 	bl	8002fb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE )  0 )
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d102      	bne.n	8002c1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c14:	2301      	movs	r3, #1
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e001      	b.n	8002c1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c1e:	f000 f9db 	bl	8002fd8 <vPortExitCritical>

	return xReturn;
 8002c22:	68fb      	ldr	r3, [r7, #12]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002c34:	f000 f9c0 	bl	8002fb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d102      	bne.n	8002c4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002c44:	2301      	movs	r3, #1
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	e001      	b.n	8002c4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c4e:	f000 f9c3 	bl	8002fd8 <vPortExitCritical>

	return xReturn;
 8002c52:	68fb      	ldr	r3, [r7, #12]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c6a:	f000 f9a5 	bl	8002fb8 <vPortEnterCritical>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c76:	d102      	bne.n	8002c7e <vQueueWaitForMessageRestricted+0x22>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c86:	d102      	bne.n	8002c8e <vQueueWaitForMessageRestricted+0x32>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	649a      	str	r2, [r3, #72]	; 0x48
 8002c8e:	f000 f9a3 	bl	8002fd8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d105      	bne.n	8002ca6 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3324      	adds	r3, #36	; 0x24
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	f7ff f947 	bl	8001f34 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f7ff ff5e 	bl	8002b68 <prvUnlockQueue>
	}
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop

08002cb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList * const pxList )
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f103 0208 	add.w	r2, r3, #8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ccc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f103 0208 	add.w	r2, r3, #8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f103 0208 	add.w	r2, r3, #8
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
}
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop

08002cf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem * const pxItem )
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]
}
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList * const pxList, xListItem * const pxNewListItem )
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
xListItem * pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry. */
	pxIndex = pxList->pxIndex;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	601a      	str	r2, [r3, #0]
}
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop

08002d54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList * const pxList, xListItem * const pxNewListItem )
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d6a:	d103      	bne.n	8002d74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	e00c      	b.n	8002d8e <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3308      	adds	r3, #8
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	e002      	b.n	8002d82 <vListInsert+0x2e>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d9f6      	bls.n	8002d7c <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	601a      	str	r2, [r3, #0]
}
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem * const pxItemToRemove )
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6892      	ldr	r2, [r2, #8]
 8002dd4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6852      	ldr	r2, [r2, #4]
 8002dde:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d103      	bne.n	8002df8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	1e5a      	subs	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3b04      	subs	r3, #4
 8002e28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	3b04      	subs	r3, #4
 8002e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3b04      	subs	r3, #4
 8002e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e44:	4a0c      	ldr	r2, [pc, #48]	; (8002e78 <pxPortInitialiseStack+0x60>)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3b14      	subs	r3, #20
 8002e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	3b04      	subs	r3, #4
 8002e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f06f 0202 	mvn.w	r2, #2
 8002e62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	3b20      	subs	r3, #32
 8002e68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	08002e7d 	.word	0x08002e7d

08002e7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <prvTaskExitError+0x1c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e88:	d002      	beq.n	8002e90 <prvTaskExitError+0x14>
 8002e8a:	f000 f8b7 	bl	8002ffc <ulPortSetInterruptMask>
 8002e8e:	e7fe      	b.n	8002e8e <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
 8002e90:	f000 f8b4 	bl	8002ffc <ulPortSetInterruptMask>
	for( ;; );
 8002e94:	e7fe      	b.n	8002e94 <prvTaskExitError+0x18>
 8002e96:	bf00      	nop
 8002e98:	20000008 	.word	0x20000008

08002e9c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <pxCurrentTCBConst2>)
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	6808      	ldr	r0, [r1, #0]
 8002ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea6:	f380 8809 	msr	PSP, r0
 8002eaa:	f04f 0000 	mov.w	r0, #0
 8002eae:	f380 8811 	msr	BASEPRI, r0
 8002eb2:	4770      	bx	lr

08002eb4 <pxCurrentTCBConst2>:
 8002eb4:	20000478 	.word	0x20000478

08002eb8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002eb8:	4803      	ldr	r0, [pc, #12]	; (8002ec8 <prvPortStartFirstTask+0x10>)
 8002eba:	6800      	ldr	r0, [r0, #0]
 8002ebc:	6800      	ldr	r0, [r0, #0]
 8002ebe:	f380 8808 	msr	MSP, r0
 8002ec2:	b662      	cpsie	i
 8002ec4:	df00      	svc	0
 8002ec6:	bf00      	nop
 8002ec8:	e000ed08 	.word	0xe000ed08

08002ecc <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile unsigned long ulOriginalPriority;
		volatile char * const pcFirstUserPriorityRegister = ( volatile char * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002ed2:	4b2b      	ldr	r3, [pc, #172]	; (8002f80 <xPortStartScheduler+0xb4>)
 8002ed4:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pcFirstUserPriorityRegister;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pcFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	22ff      	movs	r2, #255	; 0xff
 8002ee2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pcFirstUserPriorityRegister;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <xPortStartScheduler+0xb8>)
 8002ef8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002efa:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <xPortStartScheduler+0xbc>)
 8002efc:	2207      	movs	r2, #7
 8002efe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f00:	e009      	b.n	8002f16 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002f02:	4b21      	ldr	r3, [pc, #132]	; (8002f88 <xPortStartScheduler+0xbc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	1e5a      	subs	r2, r3, #1
 8002f08:	4b1f      	ldr	r3, [pc, #124]	; (8002f88 <xPortStartScheduler+0xbc>)
 8002f0a:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	b25b      	sxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	dbef      	blt.n	8002f02 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f22:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <xPortStartScheduler+0xbc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	021a      	lsls	r2, r3, #8
 8002f28:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <xPortStartScheduler+0xbc>)
 8002f2a:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f2c:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <xPortStartScheduler+0xbc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <xPortStartScheduler+0xbc>)
 8002f36:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pcFirstUserPriorityRegister = ulOriginalPriority;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <xPortStartScheduler+0xc0>)
 8002f42:	4a12      	ldr	r2, [pc, #72]	; (8002f8c <xPortStartScheduler+0xc0>)
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002f4a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <xPortStartScheduler+0xc0>)
 8002f4e:	4a0f      	ldr	r2, [pc, #60]	; (8002f8c <xPortStartScheduler+0xc0>)
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002f56:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002f58:	f000 f89a 	bl	8003090 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <xPortStartScheduler+0xc4>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002f62:	f000 f8af 	bl	80030c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <xPortStartScheduler+0xc8>)
 8002f68:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <xPortStartScheduler+0xc8>)
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8002f70:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002f72:	f7ff ffa1 	bl	8002eb8 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	e000e400 	.word	0xe000e400
 8002f84:	20000574 	.word	0x20000574
 8002f88:	20000578 	.word	0x20000578
 8002f8c:	e000ed20 	.word	0xe000ed20
 8002f90:	20000008 	.word	0x20000008
 8002f94:	e000ef34 	.word	0xe000ef34

08002f98 <vPortYield>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <vPortYield+0x1c>)
 8002f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8002fa4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002fa8:	f3bf 8f6f 	isb	sy
}
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed04 	.word	0xe000ed04

08002fb8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8002fbc:	f000 f81e 	bl	8002ffc <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <vPortEnterCritical+0x1c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <vPortEnterCritical+0x1c>)
 8002fc8:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8002fca:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002fce:	f3bf 8f6f 	isb	sy
}
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000008 	.word	0x20000008

08002fd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <vPortExitCritical+0x20>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	1e5a      	subs	r2, r3, #1
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <vPortExitCritical+0x20>)
 8002fe4:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8002fe6:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <vPortExitCritical+0x20>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f000 f80e 	bl	8003010 <vPortClearInterruptMask>
	}
}
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000008 	.word	0x20000008

08002ffc <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8002ffc:	f3ef 8011 	mrs	r0, BASEPRI
 8003000:	f04f 0150 	mov.w	r1, #80	; 0x50
 8003004:	f381 8811 	msr	BASEPRI, r1
 8003008:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	bf00      	nop

08003010 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 8003010:	f380 8811 	msr	BASEPRI, r0
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop

08003018 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003018:	f3ef 8009 	mrs	r0, PSP
 800301c:	4b11      	ldr	r3, [pc, #68]	; (8003064 <pxCurrentTCBConst>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	f01e 0f10 	tst.w	lr, #16
 8003024:	bf08      	it	eq
 8003026:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800302a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800302e:	6010      	str	r0, [r2, #0]
 8003030:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003034:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003038:	f380 8811 	msr	BASEPRI, r0
 800303c:	f7fe feca 	bl	8001dd4 <vTaskSwitchContext>
 8003040:	f04f 0000 	mov.w	r0, #0
 8003044:	f380 8811 	msr	BASEPRI, r0
 8003048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800304c:	6819      	ldr	r1, [r3, #0]
 800304e:	6808      	ldr	r0, [r1, #0]
 8003050:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003054:	f01e 0f10 	tst.w	lr, #16
 8003058:	bf08      	it	eq
 800305a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800305e:	f380 8809 	msr	PSP, r0
 8003062:	4770      	bx	lr

08003064 <pxCurrentTCBConst>:
 8003064:	20000478 	.word	0x20000478

08003068 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 800306c:	f7ff ffc6 	bl	8002ffc <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003070:	f7fe fdda 	bl	8001c28 <xTaskIncrementTick>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800307a:	4b04      	ldr	r3, [pc, #16]	; (800308c <SysTick_Handler+0x24>)
 800307c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003080:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8003082:	2000      	movs	r0, #0
 8003084:	f7ff ffc4 	bl	8003010 <vPortClearInterruptMask>
}
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	e000ed04 	.word	0xe000ed04

08003090 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <vPortSetupTimerInterrupt+0x24>)
 8003096:	4a08      	ldr	r2, [pc, #32]	; (80030b8 <vPortSetupTimerInterrupt+0x28>)
 8003098:	6811      	ldr	r1, [r2, #0]
 800309a:	4a08      	ldr	r2, [pc, #32]	; (80030bc <vPortSetupTimerInterrupt+0x2c>)
 800309c:	fba2 0201 	umull	r0, r2, r2, r1
 80030a0:	0992      	lsrs	r2, r2, #6
 80030a2:	3a01      	subs	r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <vPortSetupTimerInterrupt+0x30>)
 80030a8:	2207      	movs	r2, #7
 80030aa:	601a      	str	r2, [r3, #0]
}
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000e014 	.word	0xe000e014
 80030b8:	20000000 	.word	0x20000000
 80030bc:	10624dd3 	.word	0x10624dd3
 80030c0:	e000e010 	.word	0xe000e010

080030c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80030c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80030d4 <vPortEnableVFP+0x10>
 80030c8:	6801      	ldr	r1, [r0, #0]
 80030ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80030ce:	6001      	str	r1, [r0, #0]
 80030d0:	4770      	bx	lr
 80030d2:	0000      	.short	0x0000
 80030d4:	e000ed88 	.word	0xe000ed88

080030d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
	unsigned long ulCurrentInterrupt;
	unsigned char ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80030de:	f3ef 8305 	mrs	r3, IPSR
 80030e2:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b0f      	cmp	r3, #15
 80030e8:	d90c      	bls.n	8003104 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80030ea:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <vPortValidateInterruptPriority+0x48>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <vPortValidateInterruptPriority+0x4c>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d202      	bcs.n	8003104 <vPortValidateInterruptPriority+0x2c>
 80030fe:	f7ff ff7d 	bl	8002ffc <ulPortSetInterruptMask>
 8003102:	e7fe      	b.n	8003102 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003104:	4b08      	ldr	r3, [pc, #32]	; (8003128 <vPortValidateInterruptPriority+0x50>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800310c:	4b07      	ldr	r3, [pc, #28]	; (800312c <vPortValidateInterruptPriority+0x54>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d902      	bls.n	800311a <vPortValidateInterruptPriority+0x42>
 8003114:	f7ff ff72 	bl	8002ffc <ulPortSetInterruptMask>
 8003118:	e7fe      	b.n	8003118 <vPortValidateInterruptPriority+0x40>
	}
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	e000e3f0 	.word	0xe000e3f0
 8003124:	20000574 	.word	0x20000574
 8003128:	e000ed0c 	.word	0xe000ed0c
 800312c:	20000578 	.word	0x20000578

08003130 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8003136:	2300      	movs	r3, #0
 8003138:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800313a:	f000 fa45 	bl	80035c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800313e:	4b0f      	ldr	r3, [pc, #60]	; (800317c <xTimerCreateTimerTask+0x4c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00f      	beq.n	8003166 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8003146:	2302      	movs	r3, #2
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2300      	movs	r3, #0
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	2300      	movs	r3, #0
 8003150:	9302      	str	r3, [sp, #8]
 8003152:	2300      	movs	r3, #0
 8003154:	9303      	str	r3, [sp, #12]
 8003156:	480a      	ldr	r0, [pc, #40]	; (8003180 <xTimerCreateTimerTask+0x50>)
 8003158:	490a      	ldr	r1, [pc, #40]	; (8003184 <xTimerCreateTimerTask+0x54>)
 800315a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800315e:	2300      	movs	r3, #0
 8003160:	f7fe fab0 	bl	80016c4 <xTaskGenericCreate>
 8003164:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d102      	bne.n	8003172 <xTimerCreateTimerTask+0x42>
 800316c:	f7ff ff46 	bl	8002ffc <ulPortSetInterruptMask>
 8003170:	e7fe      	b.n	8003170 <xTimerCreateTimerTask+0x40>
	return xReturn;
 8003172:	687b      	ldr	r3, [r7, #4]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	200005ac 	.word	0x200005ac
 8003180:	08003285 	.word	0x08003285
 8003184:	08004ae4 	.word	0x08004ae4

08003188 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800319a:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <xTimerGenericCommand+0x88>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d030      	beq.n	8003204 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d11c      	bne.n	80031ee <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80031b4:	f7ff f912 	bl	80023dc <xTaskGetSchedulerState>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d10b      	bne.n	80031d6 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <xTimerGenericCommand+0x88>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	f107 0310 	add.w	r3, r7, #16
 80031c6:	4610      	mov	r0, r2
 80031c8:	4619      	mov	r1, r3
 80031ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031cc:	2300      	movs	r3, #0
 80031ce:	f7ff fa55 	bl	800267c <xQueueGenericSend>
 80031d2:	61f8      	str	r0, [r7, #28]
 80031d4:	e016      	b.n	8003204 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <xTimerGenericCommand+0x88>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	f107 0310 	add.w	r3, r7, #16
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	2200      	movs	r2, #0
 80031e4:	2300      	movs	r3, #0
 80031e6:	f7ff fa49 	bl	800267c <xQueueGenericSend>
 80031ea:	61f8      	str	r0, [r7, #28]
 80031ec:	e00a      	b.n	8003204 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <xTimerGenericCommand+0x88>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	f107 0310 	add.w	r3, r7, #16
 80031f6:	4610      	mov	r0, r2
 80031f8:	4619      	mov	r1, r3
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	2300      	movs	r3, #0
 80031fe:	f7ff faed 	bl	80027dc <xQueueGenericSendFromISR>
 8003202:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 8003204:	69fb      	ldr	r3, [r7, #28]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3720      	adds	r7, #32
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200005ac 	.word	0x200005ac

08003214 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af02      	add	r7, sp, #8
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800321e:	4b18      	ldr	r3, [pc, #96]	; (8003280 <prvProcessExpiredTimer+0x6c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	60fb      	str	r3, [r7, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3304      	adds	r3, #4
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fdc9 	bl	8002dc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d11b      	bne.n	8003272 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4413      	add	r3, r2
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	4619      	mov	r1, r3
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f000 f8a9 	bl	80033a0 <prvInsertTimerInActiveList>
 800324e:	4603      	mov	r3, r0
 8003250:	2b01      	cmp	r3, #1
 8003252:	d10e      	bne.n	8003272 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8003254:	2300      	movs	r3, #0
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	2100      	movs	r1, #0
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	2300      	movs	r3, #0
 8003260:	f7ff ff92 	bl	8003188 <xTimerGenericCommand>
 8003264:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <prvProcessExpiredTimer+0x5e>
 800326c:	f7ff fec6 	bl	8002ffc <ulPortSetInterruptMask>
 8003270:	e7fe      	b.n	8003270 <prvProcessExpiredTimer+0x5c>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	4798      	blx	r3
}
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	200005a4 	.word	0x200005a4

08003284 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800328c:	f107 0308 	add.w	r3, r7, #8
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f83f 	bl	8003314 <prvGetNextExpireTime>
 8003296:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	4619      	mov	r1, r3
 800329e:	f000 f803 	bl	80032a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80032a2:	f000 f8bf 	bl	8003424 <prvProcessReceivedCommands>
	}
 80032a6:	e7f1      	b.n	800328c <prvTimerTask+0x8>

080032a8 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 80032b2:	f7fe fc13 	bl	8001adc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80032b6:	f107 0308 	add.w	r3, r7, #8
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f84e 	bl	800335c <prvSampleTimeNow>
 80032c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d11e      	bne.n	8003306 <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10a      	bne.n	80032e4 <prvProcessTimerOrBlockTask+0x3c>
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d806      	bhi.n	80032e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80032d6:	f7fe fc0f 	bl	8001af8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	68f9      	ldr	r1, [r7, #12]
 80032de:	f7ff ff99 	bl	8003214 <prvProcessExpiredTimer>
 80032e2:	e012      	b.n	800330a <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 80032e4:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <prvProcessTimerOrBlockTask+0x68>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1acb      	subs	r3, r1, r3
 80032ee:	4610      	mov	r0, r2
 80032f0:	4619      	mov	r1, r3
 80032f2:	f7ff fcb3 	bl	8002c5c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80032f6:	f7fe fbff 	bl	8001af8 <xTaskResumeAll>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d104      	bne.n	800330a <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8003300:	f7ff fe4a 	bl	8002f98 <vPortYield>
 8003304:	e001      	b.n	800330a <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8003306:	f7fe fbf7 	bl	8001af8 <xTaskResumeAll>
		}
	}
}
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	200005ac 	.word	0x200005ac

08003314 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800331c:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <prvGetNextExpireTime+0x44>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf14      	ite	ne
 8003326:	2300      	movne	r3, #0
 8003328:	2301      	moveq	r3, #1
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800333a:	4b07      	ldr	r3, [pc, #28]	; (8003358 <prvGetNextExpireTime+0x44>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	e001      	b.n	800334a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800334a:	68fb      	ldr	r3, [r7, #12]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	200005a4 	.word	0x200005a4

0800335c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003364:	f7fe fc4e 	bl	8001c04 <xTaskGetTickCount>
 8003368:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800336a:	4b0c      	ldr	r3, [pc, #48]	; (800339c <prvSampleTimeNow+0x40>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	429a      	cmp	r2, r3
 8003372:	d208      	bcs.n	8003386 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <prvSampleTimeNow+0x40>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 f8cb 	bl	8003514 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	e002      	b.n	800338c <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <prvSampleTimeNow+0x40>)
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	200005b0 	.word	0x200005b0

080033a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d812      	bhi.n	80033ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	1ad2      	subs	r2, r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d302      	bcc.n	80033da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e01b      	b.n	8003412 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <prvInsertTimerInActiveList+0x7c>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	3304      	adds	r3, #4
 80033e2:	4610      	mov	r0, r2
 80033e4:	4619      	mov	r1, r3
 80033e6:	f7ff fcb5 	bl	8002d54 <vListInsert>
 80033ea:	e012      	b.n	8003412 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d206      	bcs.n	8003402 <prvInsertTimerInActiveList+0x62>
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d302      	bcc.n	8003402 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80033fc:	2301      	movs	r3, #1
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	e007      	b.n	8003412 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003402:	4b07      	ldr	r3, [pc, #28]	; (8003420 <prvInsertTimerInActiveList+0x80>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3304      	adds	r3, #4
 800340a:	4610      	mov	r0, r2
 800340c:	4619      	mov	r1, r3
 800340e:	f7ff fca1 	bl	8002d54 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003412:	697b      	ldr	r3, [r7, #20]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	200005a8 	.word	0x200005a8
 8003420:	200005a4 	.word	0x200005a4

08003424 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800342a:	e060      	b.n	80034ee <prvProcessReceivedCommands+0xca>
	{
		pxTimer = xMessage.pxTimer;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d004      	beq.n	8003442 <prvProcessReceivedCommands+0x1e>
		{
			/* The timer is in a list, remove it. */
			( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	3304      	adds	r3, #4
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fcc1 	bl	8002dc4 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003442:	1d3b      	adds	r3, r7, #4
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ff89 	bl	800335c <prvSampleTimeNow>
 800344a:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d84c      	bhi.n	80034ec <prvProcessReceivedCommands+0xc8>
 8003452:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <prvProcessReceivedCommands+0x34>)
 8003454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003458:	08003469 	.word	0x08003469
 800345c:	080034ed 	.word	0x080034ed
 8003460:	080034bb 	.word	0x080034bb
 8003464:	080034e5 	.word	0x080034e5
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	441a      	add	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	69f8      	ldr	r0, [r7, #28]
 8003474:	4611      	mov	r1, r2
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	f7ff ff92 	bl	80033a0 <prvInsertTimerInActiveList>
 800347c:	4603      	mov	r3, r0
 800347e:	2b01      	cmp	r3, #1
 8003480:	d11a      	bne.n	80034b8 <prvProcessReceivedCommands+0x94>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	69f8      	ldr	r0, [r7, #28]
 8003488:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d112      	bne.n	80034b8 <prvProcessReceivedCommands+0x94>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	4413      	add	r3, r2
 800349a:	2200      	movs	r2, #0
 800349c:	9200      	str	r2, [sp, #0]
 800349e:	69f8      	ldr	r0, [r7, #28]
 80034a0:	2100      	movs	r1, #0
 80034a2:	461a      	mov	r2, r3
 80034a4:	2300      	movs	r3, #0
 80034a6:	f7ff fe6f 	bl	8003188 <xTimerGenericCommand>
 80034aa:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d102      	bne.n	80034b8 <prvProcessReceivedCommands+0x94>
 80034b2:	f7ff fda3 	bl	8002ffc <ulPortSetInterruptMask>
 80034b6:	e7fe      	b.n	80034b6 <prvProcessReceivedCommands+0x92>
						( void ) xResult;
					}
				}
				break;
 80034b8:	e019      	b.n	80034ee <prvProcessReceivedCommands+0xca>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <prvProcessReceivedCommands+0xaa>
 80034c8:	f7ff fd98 	bl	8002ffc <ulPortSetInterruptMask>
 80034cc:	e7fe      	b.n	80034cc <prvProcessReceivedCommands+0xa8>
				longer or shorter than the old one.  The command time is 
				therefore set to the current time, and as the period cannot be
				zero the next expiry time can only be in the future, meaning
				(unlike for the xTimerStart() case above) there is no fail case
				that needs to be handled here. */
				( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	4413      	add	r3, r2
 80034d6:	69f8      	ldr	r0, [r7, #28]
 80034d8:	4619      	mov	r1, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	f7ff ff5f 	bl	80033a0 <prvInsertTimerInActiveList>
				break;
 80034e2:	e004      	b.n	80034ee <prvProcessReceivedCommands+0xca>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 80034e4:	69f8      	ldr	r0, [r7, #28]
 80034e6:	f000 f8e5 	bl	80036b4 <vPortFree>
				break;
 80034ea:	e000      	b.n	80034ee <prvProcessReceivedCommands+0xca>

			default	:
				/* Don't expect to get here. */
				break;
 80034ec:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <prvProcessReceivedCommands+0xec>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	f107 0308 	add.w	r3, r7, #8
 80034f6:	4610      	mov	r0, r2
 80034f8:	4619      	mov	r1, r3
 80034fa:	2200      	movs	r2, #0
 80034fc:	2300      	movs	r3, #0
 80034fe:	f7ff f9d7 	bl	80028b0 <xQueueGenericReceive>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d191      	bne.n	800342c <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 8003508:	3720      	adds	r7, #32
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	200005ac 	.word	0x200005ac

08003514 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	; 0x28
 8003518:	af02      	add	r7, sp, #8
 800351a:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800351c:	e03d      	b.n	800359a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800351e:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <prvSwitchTimerLists+0xac>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <prvSwitchTimerLists+0xac>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	61bb      	str	r3, [r7, #24]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	3304      	adds	r3, #4
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fc44 	bl	8002dc4 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	69b8      	ldr	r0, [r7, #24]
 8003542:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d126      	bne.n	800359a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	699a      	ldr	r2, [r3, #24]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	4413      	add	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	429a      	cmp	r2, r3
 800355c:	d90e      	bls.n	800357c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800356a:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <prvSwitchTimerLists+0xac>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	3304      	adds	r3, #4
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	f7ff fbed 	bl	8002d54 <vListInsert>
 800357a:	e00e      	b.n	800359a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 800357c:	2300      	movs	r3, #0
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	69b8      	ldr	r0, [r7, #24]
 8003582:	2100      	movs	r1, #0
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	2300      	movs	r3, #0
 8003588:	f7ff fdfe 	bl	8003188 <xTimerGenericCommand>
 800358c:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d102      	bne.n	800359a <prvSwitchTimerLists+0x86>
 8003594:	f7ff fd32 	bl	8002ffc <ulPortSetInterruptMask>
 8003598:	e7fe      	b.n	8003598 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800359a:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <prvSwitchTimerLists+0xac>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1bc      	bne.n	800351e <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <prvSwitchTimerLists+0xac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <prvSwitchTimerLists+0xb0>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <prvSwitchTimerLists+0xac>)
 80035b0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80035b2:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <prvSwitchTimerLists+0xb0>)
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	601a      	str	r2, [r3, #0]
}
 80035b8:	3720      	adds	r7, #32
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	200005a4 	.word	0x200005a4
 80035c4:	200005a8 	.word	0x200005a8

080035c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80035cc:	f7ff fcf4 	bl	8002fb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80035d0:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <prvCheckForValidListAndQueue+0x40>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d113      	bne.n	8003600 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 80035d8:	480c      	ldr	r0, [pc, #48]	; (800360c <prvCheckForValidListAndQueue+0x44>)
 80035da:	f7ff fb6b 	bl	8002cb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80035de:	480c      	ldr	r0, [pc, #48]	; (8003610 <prvCheckForValidListAndQueue+0x48>)
 80035e0:	f7ff fb68 	bl	8002cb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <prvCheckForValidListAndQueue+0x4c>)
 80035e6:	4a09      	ldr	r2, [pc, #36]	; (800360c <prvCheckForValidListAndQueue+0x44>)
 80035e8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80035ea:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <prvCheckForValidListAndQueue+0x50>)
 80035ec:	4a08      	ldr	r2, [pc, #32]	; (8003610 <prvCheckForValidListAndQueue+0x48>)
 80035ee:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 80035f0:	200a      	movs	r0, #10
 80035f2:	210c      	movs	r1, #12
 80035f4:	2200      	movs	r2, #0
 80035f6:	f7fe ffff 	bl	80025f8 <xQueueGenericCreate>
 80035fa:	4602      	mov	r2, r0
 80035fc:	4b02      	ldr	r3, [pc, #8]	; (8003608 <prvCheckForValidListAndQueue+0x40>)
 80035fe:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8003600:	f7ff fcea 	bl	8002fd8 <vPortExitCritical>
}
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	200005ac 	.word	0x200005ac
 800360c:	2000057c 	.word	0x2000057c
 8003610:	20000590 	.word	0x20000590
 8003614:	200005a4 	.word	0x200005a4
 8003618:	200005a8 	.word	0x200005a8

0800361c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
static unsigned char *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	2b00      	cmp	r3, #0
 8003630:	d004      	beq.n	800363c <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f023 0307 	bic.w	r3, r3, #7
 8003638:	3308      	adds	r3, #8
 800363a:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 800363c:	f7fe fa4e 	bl	8001adc <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8003640:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <pvPortMalloc+0x88>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d105      	bne.n	8003654 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 8003648:	4b17      	ldr	r3, [pc, #92]	; (80036a8 <pvPortMalloc+0x8c>)
 800364a:	f023 0307 	bic.w	r3, r3, #7
 800364e:	461a      	mov	r2, r3
 8003650:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <pvPortMalloc+0x88>)
 8003652:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8003654:	4b15      	ldr	r3, [pc, #84]	; (80036ac <pvPortMalloc+0x90>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	441a      	add	r2, r3
 800365c:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <pvPortMalloc+0x94>)
 800365e:	429a      	cmp	r2, r3
 8003660:	d813      	bhi.n	800368a <pvPortMalloc+0x6e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <pvPortMalloc+0x90>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	441a      	add	r2, r3
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <pvPortMalloc+0x90>)
 800366c:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800366e:	429a      	cmp	r2, r3
 8003670:	d90b      	bls.n	800368a <pvPortMalloc+0x6e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <pvPortMalloc+0x88>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <pvPortMalloc+0x90>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4413      	add	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <pvPortMalloc+0x90>)
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	441a      	add	r2, r3
 8003686:	4b09      	ldr	r3, [pc, #36]	; (80036ac <pvPortMalloc+0x90>)
 8003688:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}	
	xTaskResumeAll();
 800368a:	f7fe fa35 	bl	8001af8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <pvPortMalloc+0x7c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8003694:	f7fd fef0 	bl	8001478 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8003698:	68fb      	ldr	r3, [r7, #12]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	200131b8 	.word	0x200131b8
 80036a8:	200005bc 	.word	0x200005bc
 80036ac:	200131b4 	.word	0x200131b4
 80036b0:	00012bf7 	.word	0x00012bf7

080036b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <vPortFree+0x14>
 80036c2:	f7ff fc9b 	bl	8002ffc <ulPortSetInterruptMask>
 80036c6:	e7fe      	b.n	80036c6 <vPortFree+0x12>
}
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop

080036d0 <vStartLEDFlashTasks>:
static portTASK_FUNCTION_PROTO( vLEDFlashTask, pvParameters );

/*-----------------------------------------------------------*/

void vStartLEDFlashTasks( unsigned portBASE_TYPE uxPriority )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af04      	add	r7, sp, #16
 80036d6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xLEDTask;

	/* Create the three tasks. */
	//for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
	for( xLEDTask = 0; xLEDTask < 3; ++xLEDTask )
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	e010      	b.n	8003700 <vStartLEDFlashTasks+0x30>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, ( signed char * ) "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( xTaskHandle * ) NULL );
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	2300      	movs	r3, #0
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	2300      	movs	r3, #0
 80036e8:	9302      	str	r3, [sp, #8]
 80036ea:	2300      	movs	r3, #0
 80036ec:	9303      	str	r3, [sp, #12]
 80036ee:	4807      	ldr	r0, [pc, #28]	; (800370c <vStartLEDFlashTasks+0x3c>)
 80036f0:	4907      	ldr	r1, [pc, #28]	; (8003710 <vStartLEDFlashTasks+0x40>)
 80036f2:	2282      	movs	r2, #130	; 0x82
 80036f4:	2300      	movs	r3, #0
 80036f6:	f7fd ffe5 	bl	80016c4 <xTaskGenericCreate>
{
signed portBASE_TYPE xLEDTask;

	/* Create the three tasks. */
	//for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
	for( xLEDTask = 0; xLEDTask < 3; ++xLEDTask )
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3301      	adds	r3, #1
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b02      	cmp	r3, #2
 8003704:	ddeb      	ble.n	80036de <vStartLEDFlashTasks+0xe>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, ( signed char * ) "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( xTaskHandle * ) NULL );
	}
}
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	08003715 	.word	0x08003715
 8003710:	08004aec 	.word	0x08004aec

08003714 <vLEDFlashTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vLEDFlashTask, pvParameters )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]

	/* The parameters are not used. */
	( void ) pvParameters;

	/* Calculate the LED and flash rate. */
	portENTER_CRITICAL();
 800371c:	f7ff fc4c 	bl	8002fb8 <vPortEnterCritical>
	{
		/* See which of the eight LED's we should use. */
		uxLED = uxFlashTaskNumber;
 8003720:	4b15      	ldr	r3, [pc, #84]	; (8003778 <vLEDFlashTask+0x64>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	617b      	str	r3, [r7, #20]

		/* Update so the next task uses the next LED. */
		uxFlashTaskNumber++;
 8003726:	4b14      	ldr	r3, [pc, #80]	; (8003778 <vLEDFlashTask+0x64>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	4b12      	ldr	r3, [pc, #72]	; (8003778 <vLEDFlashTask+0x64>)
 800372e:	601a      	str	r2, [r3, #0]
	}
	portEXIT_CRITICAL();
 8003730:	f7ff fc52 	bl	8002fd8 <vPortExitCritical>

	xFlashRate = ledFLASH_RATE_BASE + ( ledFLASH_RATE_BASE * ( portTickType ) uxLED );
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	3301      	adds	r3, #1
 8003738:	f240 124d 	movw	r2, #333	; 0x14d
 800373c:	fb02 f303 	mul.w	r3, r2, r3
 8003740:	613b      	str	r3, [r7, #16]
	xFlashRate /= portTICK_RATE_MS;

	/* We will turn the LED on and off again in the delay period, so each
	delay is only half the total period. */
	xFlashRate /= ( portTickType ) 2;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	613b      	str	r3, [r7, #16]

	/* We need to initialise xLastFlashTime prior to the first call to 
	vTaskDelayUntil(). */
	xLastFlashTime = xTaskGetTickCount();
 8003748:	f7fe fa5c 	bl	8001c04 <xTaskGetTickCount>
 800374c:	4603      	mov	r3, r0
 800374e:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		/* Delay for half the flash period then turn the LED on. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 8003750:	f107 030c 	add.w	r3, r7, #12
 8003754:	4618      	mov	r0, r3
 8003756:	6939      	ldr	r1, [r7, #16]
 8003758:	f7fe f868 	bl	800182c <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 800375c:	6978      	ldr	r0, [r7, #20]
 800375e:	f7fd feb9 	bl	80014d4 <vParTestToggleLED>

		/* Delay for half the flash period then turn the LED off. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 8003762:	f107 030c 	add.w	r3, r7, #12
 8003766:	4618      	mov	r0, r3
 8003768:	6939      	ldr	r1, [r7, #16]
 800376a:	f7fe f85f 	bl	800182c <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 800376e:	6978      	ldr	r0, [r7, #20]
 8003770:	f7fd feb0 	bl	80014d4 <vParTestToggleLED>
	}
 8003774:	e7ec      	b.n	8003750 <vLEDFlashTask+0x3c>
 8003776:	bf00      	nop
 8003778:	200131bc 	.word	0x200131bc

0800377c <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8003786:	79fa      	ldrb	r2, [r7, #7]
 8003788:	4b10      	ldr	r3, [pc, #64]	; (80037cc <STM_EVAL_LEDInit+0x50>)
 800378a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800378e:	4618      	mov	r0, r3
 8003790:	2101      	movs	r1, #1
 8003792:	f000 fd0b 	bl	80041ac <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8003796:	79fa      	ldrb	r2, [r7, #7]
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <STM_EVAL_LEDInit+0x54>)
 800379a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800379e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80037a0:	2301      	movs	r3, #1
 80037a2:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80037a4:	2300      	movs	r3, #0
 80037a6:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80037ac:	2302      	movs	r3, #2
 80037ae:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80037b0:	79fa      	ldrb	r2, [r7, #7]
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <STM_EVAL_LEDInit+0x58>)
 80037b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80037b8:	f107 0308 	add.w	r3, r7, #8
 80037bc:	4610      	mov	r0, r2
 80037be:	4619      	mov	r1, r3
 80037c0:	f000 fa24 	bl	8003c0c <GPIO_Init>
}
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	08004cf0 	.word	0x08004cf0
 80037d0:	08004ce8 	.word	0x08004ce8
 80037d4:	2000000c 	.word	0x2000000c

080037d8 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 80037e2:	79fa      	ldrb	r2, [r7, #7]
 80037e4:	4b09      	ldr	r3, [pc, #36]	; (800380c <STM_EVAL_LEDToggle+0x34>)
 80037e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ea:	79f9      	ldrb	r1, [r7, #7]
 80037ec:	4a07      	ldr	r2, [pc, #28]	; (800380c <STM_EVAL_LEDToggle+0x34>)
 80037ee:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80037f2:	6951      	ldr	r1, [r2, #20]
 80037f4:	79f8      	ldrb	r0, [r7, #7]
 80037f6:	4a06      	ldr	r2, [pc, #24]	; (8003810 <STM_EVAL_LEDToggle+0x38>)
 80037f8:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 80037fc:	404a      	eors	r2, r1
 80037fe:	615a      	str	r2, [r3, #20]
}
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	2000000c 	.word	0x2000000c
 8003810:	08004ce8 	.word	0x08004ce8

08003814 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003822:	d013      	beq.n	800384c <NVIC_PriorityGroupConfig+0x38>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800382a:	d00f      	beq.n	800384c <NVIC_PriorityGroupConfig+0x38>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003832:	d00b      	beq.n	800384c <NVIC_PriorityGroupConfig+0x38>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383a:	d007      	beq.n	800384c <NVIC_PriorityGroupConfig+0x38>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003842:	d003      	beq.n	800384c <NVIC_PriorityGroupConfig+0x38>
 8003844:	4806      	ldr	r0, [pc, #24]	; (8003860 <NVIC_PriorityGroupConfig+0x4c>)
 8003846:	2173      	movs	r1, #115	; 0x73
 8003848:	f7fd fe2a 	bl	80014a0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800384c:	4a05      	ldr	r2, [pc, #20]	; (8003864 <NVIC_PriorityGroupConfig+0x50>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003858:	60d3      	str	r3, [r2, #12]
}
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	08004af4 	.word	0x08004af4
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8003870:	2300      	movs	r3, #0
 8003872:	73fb      	strb	r3, [r7, #15]
 8003874:	2300      	movs	r3, #0
 8003876:	73bb      	strb	r3, [r7, #14]
 8003878:	230f      	movs	r3, #15
 800387a:	737b      	strb	r3, [r7, #13]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	78db      	ldrb	r3, [r3, #3]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d007      	beq.n	8003894 <NVIC_Init+0x2c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	78db      	ldrb	r3, [r3, #3]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d003      	beq.n	8003894 <NVIC_Init+0x2c>
 800388c:	4830      	ldr	r0, [pc, #192]	; (8003950 <NVIC_Init+0xe8>)
 800388e:	2187      	movs	r1, #135	; 0x87
 8003890:	f7fd fe06 	bl	80014a0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	785b      	ldrb	r3, [r3, #1]
 8003898:	2b0f      	cmp	r3, #15
 800389a:	d903      	bls.n	80038a4 <NVIC_Init+0x3c>
 800389c:	482c      	ldr	r0, [pc, #176]	; (8003950 <NVIC_Init+0xe8>)
 800389e:	2188      	movs	r1, #136	; 0x88
 80038a0:	f7fd fdfe 	bl	80014a0 <assert_failed>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	789b      	ldrb	r3, [r3, #2]
 80038a8:	2b0f      	cmp	r3, #15
 80038aa:	d903      	bls.n	80038b4 <NVIC_Init+0x4c>
 80038ac:	4828      	ldr	r0, [pc, #160]	; (8003950 <NVIC_Init+0xe8>)
 80038ae:	2189      	movs	r1, #137	; 0x89
 80038b0:	f7fd fdf6 	bl	80014a0 <assert_failed>
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	78db      	ldrb	r3, [r3, #3]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d037      	beq.n	800392c <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80038bc:	4b25      	ldr	r3, [pc, #148]	; (8003954 <NVIC_Init+0xec>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	f1c3 0304 	rsb	r3, r3, #4
 80038d0:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80038d2:	7b7a      	ldrb	r2, [r7, #13]
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	fa42 f303 	asr.w	r3, r2, r3
 80038da:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	785b      	ldrb	r3, [r3, #1]
 80038e0:	461a      	mov	r2, r3
 80038e2:	7bbb      	ldrb	r3, [r7, #14]
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	789a      	ldrb	r2, [r3, #2]
 80038ee:	7b7b      	ldrb	r3, [r7, #13]
 80038f0:	4013      	ands	r3, r2
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003900:	4a15      	ldr	r2, [pc, #84]	; (8003958 <NVIC_Init+0xf0>)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	4413      	add	r3, r2
 8003908:	7bfa      	ldrb	r2, [r7, #15]
 800390a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800390e:	4b12      	ldr	r3, [pc, #72]	; (8003958 <NVIC_Init+0xf0>)
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	7812      	ldrb	r2, [r2, #0]
 8003914:	0952      	lsrs	r2, r2, #5
 8003916:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	7809      	ldrb	r1, [r1, #0]
 800391c:	f001 011f 	and.w	r1, r1, #31
 8003920:	2001      	movs	r0, #1
 8003922:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800392a:	e00e      	b.n	800394a <NVIC_Init+0xe2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <NVIC_Init+0xf0>)
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	7812      	ldrb	r2, [r2, #0]
 8003932:	0952      	lsrs	r2, r2, #5
 8003934:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	7809      	ldrb	r1, [r1, #0]
 800393a:	f001 011f 	and.w	r1, r1, #31
 800393e:	2001      	movs	r0, #1
 8003940:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003944:	3220      	adds	r2, #32
 8003946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	08004af4 	.word	0x08004af4
 8003954:	e000ed00 	.word	0xe000ed00
 8003958:	e000e100 	.word	0xe000e100

0800395c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	791b      	ldrb	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <EXTI_Init+0x24>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	791b      	ldrb	r3, [r3, #4]
 8003974:	2b04      	cmp	r3, #4
 8003976:	d003      	beq.n	8003980 <EXTI_Init+0x24>
 8003978:	4848      	ldr	r0, [pc, #288]	; (8003a9c <EXTI_Init+0x140>)
 800397a:	217c      	movs	r1, #124	; 0x7c
 800397c:	f7fd fd90 	bl	80014a0 <assert_failed>
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	795b      	ldrb	r3, [r3, #5]
 8003984:	2b08      	cmp	r3, #8
 8003986:	d00b      	beq.n	80039a0 <EXTI_Init+0x44>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	795b      	ldrb	r3, [r3, #5]
 800398c:	2b0c      	cmp	r3, #12
 800398e:	d007      	beq.n	80039a0 <EXTI_Init+0x44>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	795b      	ldrb	r3, [r3, #5]
 8003994:	2b10      	cmp	r3, #16
 8003996:	d003      	beq.n	80039a0 <EXTI_Init+0x44>
 8003998:	4840      	ldr	r0, [pc, #256]	; (8003a9c <EXTI_Init+0x140>)
 800399a:	217d      	movs	r1, #125	; 0x7d
 800399c:	f7fd fd80 	bl	80014a0 <assert_failed>
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	0ddb      	lsrs	r3, r3, #23
 80039a6:	05db      	lsls	r3, r3, #23
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d103      	bne.n	80039b4 <EXTI_Init+0x58>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d103      	bne.n	80039bc <EXTI_Init+0x60>
 80039b4:	4839      	ldr	r0, [pc, #228]	; (8003a9c <EXTI_Init+0x140>)
 80039b6:	217e      	movs	r1, #126	; 0x7e
 80039b8:	f7fd fd72 	bl	80014a0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	799b      	ldrb	r3, [r3, #6]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <EXTI_Init+0x78>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	799b      	ldrb	r3, [r3, #6]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d003      	beq.n	80039d4 <EXTI_Init+0x78>
 80039cc:	4833      	ldr	r0, [pc, #204]	; (8003a9c <EXTI_Init+0x140>)
 80039ce:	217f      	movs	r1, #127	; 0x7f
 80039d0:	f7fd fd66 	bl	80014a0 <assert_failed>

  tmp = (uint32_t)EXTI_BASE;
 80039d4:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <EXTI_Init+0x144>)
 80039d6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	799b      	ldrb	r3, [r3, #6]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d04d      	beq.n	8003a7c <EXTI_Init+0x120>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80039e0:	4b2f      	ldr	r3, [pc, #188]	; (8003aa0 <EXTI_Init+0x144>)
 80039e2:	4a2f      	ldr	r2, [pc, #188]	; (8003aa0 <EXTI_Init+0x144>)
 80039e4:	6811      	ldr	r1, [r2, #0]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	43d2      	mvns	r2, r2
 80039ec:	400a      	ands	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80039f0:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <EXTI_Init+0x144>)
 80039f2:	4a2b      	ldr	r2, [pc, #172]	; (8003aa0 <EXTI_Init+0x144>)
 80039f4:	6851      	ldr	r1, [r2, #4]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	43d2      	mvns	r2, r2
 80039fc:	400a      	ands	r2, r1
 80039fe:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	791b      	ldrb	r3, [r3, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	6811      	ldr	r1, [r2, #0]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8003a18:	4b21      	ldr	r3, [pc, #132]	; (8003aa0 <EXTI_Init+0x144>)
 8003a1a:	4a21      	ldr	r2, [pc, #132]	; (8003aa0 <EXTI_Init+0x144>)
 8003a1c:	6891      	ldr	r1, [r2, #8]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6812      	ldr	r2, [r2, #0]
 8003a22:	43d2      	mvns	r2, r2
 8003a24:	400a      	ands	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8003a28:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <EXTI_Init+0x144>)
 8003a2a:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <EXTI_Init+0x144>)
 8003a2c:	68d1      	ldr	r1, [r2, #12]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	43d2      	mvns	r2, r2
 8003a34:	400a      	ands	r2, r1
 8003a36:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	795b      	ldrb	r3, [r3, #5]
 8003a3c:	2b10      	cmp	r3, #16
 8003a3e:	d10e      	bne.n	8003a5e <EXTI_Init+0x102>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8003a40:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <EXTI_Init+0x144>)
 8003a42:	4a17      	ldr	r2, [pc, #92]	; (8003aa0 <EXTI_Init+0x144>)
 8003a44:	6891      	ldr	r1, [r2, #8]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8003a4e:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <EXTI_Init+0x144>)
 8003a50:	4a13      	ldr	r2, [pc, #76]	; (8003aa0 <EXTI_Init+0x144>)
 8003a52:	68d1      	ldr	r1, [r2, #12]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	60da      	str	r2, [r3, #12]
 8003a5c:	e01b      	b.n	8003a96 <EXTI_Init+0x13a>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8003a5e:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <EXTI_Init+0x144>)
 8003a60:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	795b      	ldrb	r3, [r3, #5]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	6811      	ldr	r1, [r2, #0]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e00c      	b.n	8003a96 <EXTI_Init+0x13a>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	791b      	ldrb	r3, [r3, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4413      	add	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	6811      	ldr	r1, [r2, #0]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	43d2      	mvns	r2, r2
 8003a92:	400a      	ands	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]
  }
}
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	08004b3c 	.word	0x08004b3c
 8003aa0:	40013c00 	.word	0x40013c00

08003aa4 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	0ddb      	lsrs	r3, r3, #23
 8003ab0:	05db      	lsls	r3, r3, #23
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d102      	bne.n	8003abc <EXTI_ClearFlag+0x18>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d103      	bne.n	8003ac4 <EXTI_ClearFlag+0x20>
 8003abc:	4804      	ldr	r0, [pc, #16]	; (8003ad0 <EXTI_ClearFlag+0x2c>)
 8003abe:	21f6      	movs	r1, #246	; 0xf6
 8003ac0:	f7fd fcee 	bl	80014a0 <assert_failed>
  
  EXTI->PR = EXTI_Line;
 8003ac4:	4b03      	ldr	r3, [pc, #12]	; (8003ad4 <EXTI_ClearFlag+0x30>)
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	615a      	str	r2, [r3, #20]
}
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	08004b3c 	.word	0x08004b3c
 8003ad4:	40013c00 	.word	0x40013c00

08003ad8 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d055      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d052      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d04f      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d04c      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d049      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d046      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b40      	cmp	r3, #64	; 0x40
 8003b10:	d043      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b80      	cmp	r3, #128	; 0x80
 8003b16:	d040      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b1e:	d03c      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b26:	d038      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2e:	d034      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b36:	d030      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3e:	d02c      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b46:	d028      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b4e:	d024      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b56:	d020      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b5e:	d01c      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b66:	d018      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b6e:	d014      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b76:	d010      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b7e:	d00c      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b86:	d008      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b8e:	d004      	beq.n	8003b9a <EXTI_GetITStatus+0xc2>
 8003b90:	480e      	ldr	r0, [pc, #56]	; (8003bcc <EXTI_GetITStatus+0xf4>)
 8003b92:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003b96:	f7fd fc83 	bl	80014a0 <assert_failed>
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <EXTI_GetITStatus+0xf8>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <EXTI_GetITStatus+0xf8>)
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <EXTI_GetITStatus+0xe4>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <EXTI_GetITStatus+0xe4>
  {
    bitstatus = SET;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
 8003bba:	e001      	b.n	8003bc0 <EXTI_GetITStatus+0xe8>
  }
  else
  {
    bitstatus = RESET;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	08004b3c 	.word	0x08004b3c
 8003bd0:	40013c00 	.word	0x40013c00

08003bd4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	0ddb      	lsrs	r3, r3, #23
 8003be0:	05db      	lsls	r3, r3, #23
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <EXTI_ClearITPendingBit+0x18>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d104      	bne.n	8003bf6 <EXTI_ClearITPendingBit+0x22>
 8003bec:	4805      	ldr	r0, [pc, #20]	; (8003c04 <EXTI_ClearITPendingBit+0x30>)
 8003bee:	f240 111d 	movw	r1, #285	; 0x11d
 8003bf2:	f7fd fc55 	bl	80014a0 <assert_failed>
  
  EXTI->PR = EXTI_Line;
 8003bf6:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <EXTI_ClearITPendingBit+0x34>)
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	615a      	str	r2, [r3, #20]
}
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	08004b3c 	.word	0x08004b3c
 8003c08:	40013c00 	.word	0x40013c00

08003c0c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	4b7a      	ldr	r3, [pc, #488]	; (8003e10 <GPIO_Init+0x204>)
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d023      	beq.n	8003c72 <GPIO_Init+0x66>
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4b79      	ldr	r3, [pc, #484]	; (8003e14 <GPIO_Init+0x208>)
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d01f      	beq.n	8003c72 <GPIO_Init+0x66>
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4b78      	ldr	r3, [pc, #480]	; (8003e18 <GPIO_Init+0x20c>)
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d01b      	beq.n	8003c72 <GPIO_Init+0x66>
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	4b77      	ldr	r3, [pc, #476]	; (8003e1c <GPIO_Init+0x210>)
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d017      	beq.n	8003c72 <GPIO_Init+0x66>
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4b76      	ldr	r3, [pc, #472]	; (8003e20 <GPIO_Init+0x214>)
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d013      	beq.n	8003c72 <GPIO_Init+0x66>
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4b75      	ldr	r3, [pc, #468]	; (8003e24 <GPIO_Init+0x218>)
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d00f      	beq.n	8003c72 <GPIO_Init+0x66>
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	4b74      	ldr	r3, [pc, #464]	; (8003e28 <GPIO_Init+0x21c>)
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d00b      	beq.n	8003c72 <GPIO_Init+0x66>
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4b73      	ldr	r3, [pc, #460]	; (8003e2c <GPIO_Init+0x220>)
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d007      	beq.n	8003c72 <GPIO_Init+0x66>
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	4b72      	ldr	r3, [pc, #456]	; (8003e30 <GPIO_Init+0x224>)
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d003      	beq.n	8003c72 <GPIO_Init+0x66>
 8003c6a:	4872      	ldr	r0, [pc, #456]	; (8003e34 <GPIO_Init+0x228>)
 8003c6c:	21bb      	movs	r1, #187	; 0xbb
 8003c6e:	f7fd fc17 	bl	80014a0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d103      	bne.n	8003c82 <GPIO_Init+0x76>
 8003c7a:	486e      	ldr	r0, [pc, #440]	; (8003e34 <GPIO_Init+0x228>)
 8003c7c:	21bc      	movs	r1, #188	; 0xbc
 8003c7e:	f7fd fc0f 	bl	80014a0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	791b      	ldrb	r3, [r3, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00f      	beq.n	8003caa <GPIO_Init+0x9e>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	791b      	ldrb	r3, [r3, #4]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d00b      	beq.n	8003caa <GPIO_Init+0x9e>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	791b      	ldrb	r3, [r3, #4]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d007      	beq.n	8003caa <GPIO_Init+0x9e>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	791b      	ldrb	r3, [r3, #4]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d003      	beq.n	8003caa <GPIO_Init+0x9e>
 8003ca2:	4864      	ldr	r0, [pc, #400]	; (8003e34 <GPIO_Init+0x228>)
 8003ca4:	21bd      	movs	r1, #189	; 0xbd
 8003ca6:	f7fd fbfb 	bl	80014a0 <assert_failed>
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	79db      	ldrb	r3, [r3, #7]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <GPIO_Init+0xbe>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	79db      	ldrb	r3, [r3, #7]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d007      	beq.n	8003cca <GPIO_Init+0xbe>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	79db      	ldrb	r3, [r3, #7]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d003      	beq.n	8003cca <GPIO_Init+0xbe>
 8003cc2:	485c      	ldr	r0, [pc, #368]	; (8003e34 <GPIO_Init+0x228>)
 8003cc4:	21be      	movs	r1, #190	; 0xbe
 8003cc6:	f7fd fbeb 	bl	80014a0 <assert_failed>

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	e097      	b.n	8003e00 <GPIO_Init+0x1f4>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	f040 8086 	bne.w	8003dfa <GPIO_Init+0x1ee>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	2103      	movs	r1, #3
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	401a      	ands	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	791b      	ldrb	r3, [r3, #4]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	791b      	ldrb	r3, [r3, #4]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d003      	beq.n	8003d2c <GPIO_Init+0x120>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	791b      	ldrb	r3, [r3, #4]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d14e      	bne.n	8003dca <GPIO_Init+0x1be>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	795b      	ldrb	r3, [r3, #5]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00f      	beq.n	8003d54 <GPIO_Init+0x148>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	795b      	ldrb	r3, [r3, #5]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d00b      	beq.n	8003d54 <GPIO_Init+0x148>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	795b      	ldrb	r3, [r3, #5]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d007      	beq.n	8003d54 <GPIO_Init+0x148>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	795b      	ldrb	r3, [r3, #5]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d003      	beq.n	8003d54 <GPIO_Init+0x148>
 8003d4c:	4839      	ldr	r0, [pc, #228]	; (8003e34 <GPIO_Init+0x228>)
 8003d4e:	21d0      	movs	r1, #208	; 0xd0
 8003d50:	f7fd fba6 	bl	80014a0 <assert_failed>

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	2103      	movs	r1, #3
 8003d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d62:	43db      	mvns	r3, r3
 8003d64:	401a      	ands	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	795b      	ldrb	r3, [r3, #5]
 8003d72:	4619      	mov	r1, r3
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	799b      	ldrb	r3, [r3, #6]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <GPIO_Init+0x18e>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	799b      	ldrb	r3, [r3, #6]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d003      	beq.n	8003d9a <GPIO_Init+0x18e>
 8003d92:	4828      	ldr	r0, [pc, #160]	; (8003e34 <GPIO_Init+0x228>)
 8003d94:	21d7      	movs	r1, #215	; 0xd7
 8003d96:	f7fd fb83 	bl	80014a0 <assert_failed>

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2101      	movs	r1, #1
 8003da4:	fa01 f303 	lsl.w	r3, r1, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	401a      	ands	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	799b      	ldrb	r3, [r3, #6]
 8003db8:	4619      	mov	r1, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	2103      	movs	r1, #3
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	401a      	ands	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	79db      	ldrb	r3, [r3, #7]
 8003dea:	4619      	mov	r1, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fa01 f303 	lsl.w	r3, r1, r3
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2b0f      	cmp	r3, #15
 8003e04:	f67f af64 	bls.w	8003cd0 <GPIO_Init+0xc4>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40020000 	.word	0x40020000
 8003e14:	40020400 	.word	0x40020400
 8003e18:	40020800 	.word	0x40020800
 8003e1c:	40020c00 	.word	0x40020c00
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40021400 	.word	0x40021400
 8003e28:	40021800 	.word	0x40021800
 8003e2c:	40021c00 	.word	0x40021c00
 8003e30:	40022000 	.word	0x40022000
 8003e34:	08004b8c 	.word	0x08004b8c

08003e38 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8003e44:	2300      	movs	r3, #0
 8003e46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4b3a      	ldr	r3, [pc, #232]	; (8003f34 <GPIO_ReadInputDataBit+0xfc>)
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d024      	beq.n	8003e9a <GPIO_ReadInputDataBit+0x62>
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4b39      	ldr	r3, [pc, #228]	; (8003f38 <GPIO_ReadInputDataBit+0x100>)
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d020      	beq.n	8003e9a <GPIO_ReadInputDataBit+0x62>
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	4b38      	ldr	r3, [pc, #224]	; (8003f3c <GPIO_ReadInputDataBit+0x104>)
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d01c      	beq.n	8003e9a <GPIO_ReadInputDataBit+0x62>
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4b37      	ldr	r3, [pc, #220]	; (8003f40 <GPIO_ReadInputDataBit+0x108>)
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d018      	beq.n	8003e9a <GPIO_ReadInputDataBit+0x62>
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4b36      	ldr	r3, [pc, #216]	; (8003f44 <GPIO_ReadInputDataBit+0x10c>)
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d014      	beq.n	8003e9a <GPIO_ReadInputDataBit+0x62>
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4b35      	ldr	r3, [pc, #212]	; (8003f48 <GPIO_ReadInputDataBit+0x110>)
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d010      	beq.n	8003e9a <GPIO_ReadInputDataBit+0x62>
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	4b34      	ldr	r3, [pc, #208]	; (8003f4c <GPIO_ReadInputDataBit+0x114>)
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d00c      	beq.n	8003e9a <GPIO_ReadInputDataBit+0x62>
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <GPIO_ReadInputDataBit+0x118>)
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d008      	beq.n	8003e9a <GPIO_ReadInputDataBit+0x62>
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4b32      	ldr	r3, [pc, #200]	; (8003f54 <GPIO_ReadInputDataBit+0x11c>)
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d004      	beq.n	8003e9a <GPIO_ReadInputDataBit+0x62>
 8003e90:	4831      	ldr	r0, [pc, #196]	; (8003f58 <GPIO_ReadInputDataBit+0x120>)
 8003e92:	f44f 7198 	mov.w	r1, #304	; 0x130
 8003e96:	f7fd fb03 	bl	80014a0 <assert_failed>
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
 8003e9a:	887b      	ldrh	r3, [r7, #2]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d039      	beq.n	8003f14 <GPIO_ReadInputDataBit+0xdc>
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d036      	beq.n	8003f14 <GPIO_ReadInputDataBit+0xdc>
 8003ea6:	887b      	ldrh	r3, [r7, #2]
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d033      	beq.n	8003f14 <GPIO_ReadInputDataBit+0xdc>
 8003eac:	887b      	ldrh	r3, [r7, #2]
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d030      	beq.n	8003f14 <GPIO_ReadInputDataBit+0xdc>
 8003eb2:	887b      	ldrh	r3, [r7, #2]
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d02d      	beq.n	8003f14 <GPIO_ReadInputDataBit+0xdc>
 8003eb8:	887b      	ldrh	r3, [r7, #2]
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d02a      	beq.n	8003f14 <GPIO_ReadInputDataBit+0xdc>
 8003ebe:	887b      	ldrh	r3, [r7, #2]
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d027      	beq.n	8003f14 <GPIO_ReadInputDataBit+0xdc>
 8003ec4:	887b      	ldrh	r3, [r7, #2]
 8003ec6:	2b80      	cmp	r3, #128	; 0x80
 8003ec8:	d024      	beq.n	8003f14 <GPIO_ReadInputDataBit+0xdc>
 8003eca:	887b      	ldrh	r3, [r7, #2]
 8003ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed0:	d020      	beq.n	8003f14 <GPIO_ReadInputDataBit+0xdc>
 8003ed2:	887b      	ldrh	r3, [r7, #2]
 8003ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed8:	d01c      	beq.n	8003f14 <GPIO_ReadInputDataBit+0xdc>
 8003eda:	887b      	ldrh	r3, [r7, #2]
 8003edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee0:	d018      	beq.n	8003f14 <GPIO_ReadInputDataBit+0xdc>
 8003ee2:	887b      	ldrh	r3, [r7, #2]
 8003ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee8:	d014      	beq.n	8003f14 <GPIO_ReadInputDataBit+0xdc>
 8003eea:	887b      	ldrh	r3, [r7, #2]
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef0:	d010      	beq.n	8003f14 <GPIO_ReadInputDataBit+0xdc>
 8003ef2:	887b      	ldrh	r3, [r7, #2]
 8003ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef8:	d00c      	beq.n	8003f14 <GPIO_ReadInputDataBit+0xdc>
 8003efa:	887b      	ldrh	r3, [r7, #2]
 8003efc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f00:	d008      	beq.n	8003f14 <GPIO_ReadInputDataBit+0xdc>
 8003f02:	887b      	ldrh	r3, [r7, #2]
 8003f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f08:	d004      	beq.n	8003f14 <GPIO_ReadInputDataBit+0xdc>
 8003f0a:	4813      	ldr	r0, [pc, #76]	; (8003f58 <GPIO_ReadInputDataBit+0x120>)
 8003f0c:	f240 1131 	movw	r1, #305	; 0x131
 8003f10:	f7fd fac6 	bl	80014a0 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	887b      	ldrh	r3, [r7, #2]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <GPIO_ReadInputDataBit+0xee>
  {
    bitstatus = (uint8_t)Bit_SET;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
 8003f24:	e001      	b.n	8003f2a <GPIO_ReadInputDataBit+0xf2>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8003f26:	2300      	movs	r3, #0
 8003f28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40020000 	.word	0x40020000
 8003f38:	40020400 	.word	0x40020400
 8003f3c:	40020800 	.word	0x40020800
 8003f40:	40020c00 	.word	0x40020c00
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40021400 	.word	0x40021400
 8003f4c:	40021800 	.word	0x40021800
 8003f50:	40021c00 	.word	0x40021c00
 8003f54:	40022000 	.word	0x40022000
 8003f58:	08004b8c 	.word	0x08004b8c

08003f5c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	460a      	mov	r2, r1
 8003f68:	807a      	strh	r2, [r7, #2]
 8003f6a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	4b83      	ldr	r3, [pc, #524]	; (8004184 <GPIO_PinAFConfig+0x228>)
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d024      	beq.n	8003fc6 <GPIO_PinAFConfig+0x6a>
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	4b82      	ldr	r3, [pc, #520]	; (8004188 <GPIO_PinAFConfig+0x22c>)
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d020      	beq.n	8003fc6 <GPIO_PinAFConfig+0x6a>
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	4b81      	ldr	r3, [pc, #516]	; (800418c <GPIO_PinAFConfig+0x230>)
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d01c      	beq.n	8003fc6 <GPIO_PinAFConfig+0x6a>
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4b80      	ldr	r3, [pc, #512]	; (8004190 <GPIO_PinAFConfig+0x234>)
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d018      	beq.n	8003fc6 <GPIO_PinAFConfig+0x6a>
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	4b7f      	ldr	r3, [pc, #508]	; (8004194 <GPIO_PinAFConfig+0x238>)
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d014      	beq.n	8003fc6 <GPIO_PinAFConfig+0x6a>
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	4b7e      	ldr	r3, [pc, #504]	; (8004198 <GPIO_PinAFConfig+0x23c>)
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d010      	beq.n	8003fc6 <GPIO_PinAFConfig+0x6a>
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	4b7d      	ldr	r3, [pc, #500]	; (800419c <GPIO_PinAFConfig+0x240>)
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d00c      	beq.n	8003fc6 <GPIO_PinAFConfig+0x6a>
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	4b7c      	ldr	r3, [pc, #496]	; (80041a0 <GPIO_PinAFConfig+0x244>)
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d008      	beq.n	8003fc6 <GPIO_PinAFConfig+0x6a>
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4b7b      	ldr	r3, [pc, #492]	; (80041a4 <GPIO_PinAFConfig+0x248>)
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d004      	beq.n	8003fc6 <GPIO_PinAFConfig+0x6a>
 8003fbc:	487a      	ldr	r0, [pc, #488]	; (80041a8 <GPIO_PinAFConfig+0x24c>)
 8003fbe:	f240 2117 	movw	r1, #535	; 0x217
 8003fc2:	f7fd fa6d 	bl	80014a0 <assert_failed>
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 8003fc6:	887b      	ldrh	r3, [r7, #2]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d031      	beq.n	8004030 <GPIO_PinAFConfig+0xd4>
 8003fcc:	887b      	ldrh	r3, [r7, #2]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d02e      	beq.n	8004030 <GPIO_PinAFConfig+0xd4>
 8003fd2:	887b      	ldrh	r3, [r7, #2]
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d02b      	beq.n	8004030 <GPIO_PinAFConfig+0xd4>
 8003fd8:	887b      	ldrh	r3, [r7, #2]
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d028      	beq.n	8004030 <GPIO_PinAFConfig+0xd4>
 8003fde:	887b      	ldrh	r3, [r7, #2]
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d025      	beq.n	8004030 <GPIO_PinAFConfig+0xd4>
 8003fe4:	887b      	ldrh	r3, [r7, #2]
 8003fe6:	2b05      	cmp	r3, #5
 8003fe8:	d022      	beq.n	8004030 <GPIO_PinAFConfig+0xd4>
 8003fea:	887b      	ldrh	r3, [r7, #2]
 8003fec:	2b06      	cmp	r3, #6
 8003fee:	d01f      	beq.n	8004030 <GPIO_PinAFConfig+0xd4>
 8003ff0:	887b      	ldrh	r3, [r7, #2]
 8003ff2:	2b07      	cmp	r3, #7
 8003ff4:	d01c      	beq.n	8004030 <GPIO_PinAFConfig+0xd4>
 8003ff6:	887b      	ldrh	r3, [r7, #2]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d019      	beq.n	8004030 <GPIO_PinAFConfig+0xd4>
 8003ffc:	887b      	ldrh	r3, [r7, #2]
 8003ffe:	2b09      	cmp	r3, #9
 8004000:	d016      	beq.n	8004030 <GPIO_PinAFConfig+0xd4>
 8004002:	887b      	ldrh	r3, [r7, #2]
 8004004:	2b0a      	cmp	r3, #10
 8004006:	d013      	beq.n	8004030 <GPIO_PinAFConfig+0xd4>
 8004008:	887b      	ldrh	r3, [r7, #2]
 800400a:	2b0b      	cmp	r3, #11
 800400c:	d010      	beq.n	8004030 <GPIO_PinAFConfig+0xd4>
 800400e:	887b      	ldrh	r3, [r7, #2]
 8004010:	2b0c      	cmp	r3, #12
 8004012:	d00d      	beq.n	8004030 <GPIO_PinAFConfig+0xd4>
 8004014:	887b      	ldrh	r3, [r7, #2]
 8004016:	2b0d      	cmp	r3, #13
 8004018:	d00a      	beq.n	8004030 <GPIO_PinAFConfig+0xd4>
 800401a:	887b      	ldrh	r3, [r7, #2]
 800401c:	2b0e      	cmp	r3, #14
 800401e:	d007      	beq.n	8004030 <GPIO_PinAFConfig+0xd4>
 8004020:	887b      	ldrh	r3, [r7, #2]
 8004022:	2b0f      	cmp	r3, #15
 8004024:	d004      	beq.n	8004030 <GPIO_PinAFConfig+0xd4>
 8004026:	4860      	ldr	r0, [pc, #384]	; (80041a8 <GPIO_PinAFConfig+0x24c>)
 8004028:	f44f 7106 	mov.w	r1, #536	; 0x218
 800402c:	f7fd fa38 	bl	80014a0 <assert_failed>
  assert_param(IS_GPIO_AF(GPIO_AF));
 8004030:	787b      	ldrb	r3, [r7, #1]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d06d      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 8004036:	787b      	ldrb	r3, [r7, #1]
 8004038:	2b09      	cmp	r3, #9
 800403a:	d06a      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 800403c:	787b      	ldrb	r3, [r7, #1]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d067      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 8004042:	787b      	ldrb	r3, [r7, #1]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d064      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 8004048:	787b      	ldrb	r3, [r7, #1]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d061      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 800404e:	787b      	ldrb	r3, [r7, #1]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d05e      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 8004054:	787b      	ldrb	r3, [r7, #1]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d05b      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 800405a:	787b      	ldrb	r3, [r7, #1]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d058      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 8004060:	787b      	ldrb	r3, [r7, #1]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d055      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 8004066:	787b      	ldrb	r3, [r7, #1]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d052      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 800406c:	787b      	ldrb	r3, [r7, #1]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d04f      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 8004072:	787b      	ldrb	r3, [r7, #1]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d04c      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 8004078:	787b      	ldrb	r3, [r7, #1]
 800407a:	2b04      	cmp	r3, #4
 800407c:	d049      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 800407e:	787b      	ldrb	r3, [r7, #1]
 8004080:	2b04      	cmp	r3, #4
 8004082:	d046      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 8004084:	787b      	ldrb	r3, [r7, #1]
 8004086:	2b04      	cmp	r3, #4
 8004088:	d043      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 800408a:	787b      	ldrb	r3, [r7, #1]
 800408c:	2b05      	cmp	r3, #5
 800408e:	d040      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 8004090:	787b      	ldrb	r3, [r7, #1]
 8004092:	2b05      	cmp	r3, #5
 8004094:	d03d      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 8004096:	787b      	ldrb	r3, [r7, #1]
 8004098:	2b09      	cmp	r3, #9
 800409a:	d03a      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 800409c:	787b      	ldrb	r3, [r7, #1]
 800409e:	2b06      	cmp	r3, #6
 80040a0:	d037      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 80040a2:	787b      	ldrb	r3, [r7, #1]
 80040a4:	2b09      	cmp	r3, #9
 80040a6:	d034      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 80040a8:	787b      	ldrb	r3, [r7, #1]
 80040aa:	2b07      	cmp	r3, #7
 80040ac:	d031      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 80040ae:	787b      	ldrb	r3, [r7, #1]
 80040b0:	2b07      	cmp	r3, #7
 80040b2:	d02e      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 80040b4:	787b      	ldrb	r3, [r7, #1]
 80040b6:	2b07      	cmp	r3, #7
 80040b8:	d02b      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 80040ba:	787b      	ldrb	r3, [r7, #1]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d028      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 80040c0:	787b      	ldrb	r3, [r7, #1]
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d025      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 80040c6:	787b      	ldrb	r3, [r7, #1]
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d022      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 80040cc:	787b      	ldrb	r3, [r7, #1]
 80040ce:	2b09      	cmp	r3, #9
 80040d0:	d01f      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 80040d2:	787b      	ldrb	r3, [r7, #1]
 80040d4:	2b09      	cmp	r3, #9
 80040d6:	d01c      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 80040d8:	787b      	ldrb	r3, [r7, #1]
 80040da:	2b0a      	cmp	r3, #10
 80040dc:	d019      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 80040de:	787b      	ldrb	r3, [r7, #1]
 80040e0:	2b0a      	cmp	r3, #10
 80040e2:	d016      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 80040e4:	787b      	ldrb	r3, [r7, #1]
 80040e6:	2b0b      	cmp	r3, #11
 80040e8:	d013      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 80040ea:	787b      	ldrb	r3, [r7, #1]
 80040ec:	2b0c      	cmp	r3, #12
 80040ee:	d010      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 80040f0:	787b      	ldrb	r3, [r7, #1]
 80040f2:	2b0c      	cmp	r3, #12
 80040f4:	d00d      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 80040f6:	787b      	ldrb	r3, [r7, #1]
 80040f8:	2b0c      	cmp	r3, #12
 80040fa:	d00a      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 80040fc:	787b      	ldrb	r3, [r7, #1]
 80040fe:	2b0d      	cmp	r3, #13
 8004100:	d007      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 8004102:	787b      	ldrb	r3, [r7, #1]
 8004104:	2b0f      	cmp	r3, #15
 8004106:	d004      	beq.n	8004112 <GPIO_PinAFConfig+0x1b6>
 8004108:	4827      	ldr	r0, [pc, #156]	; (80041a8 <GPIO_PinAFConfig+0x24c>)
 800410a:	f240 2119 	movw	r1, #537	; 0x219
 800410e:	f7fd f9c7 	bl	80014a0 <assert_failed>
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8004112:	787a      	ldrb	r2, [r7, #1]
 8004114:	887b      	ldrh	r3, [r7, #2]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8004122:	887b      	ldrh	r3, [r7, #2]
 8004124:	08db      	lsrs	r3, r3, #3
 8004126:	b29b      	uxth	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	887b      	ldrh	r3, [r7, #2]
 800412c:	08db      	lsrs	r3, r3, #3
 800412e:	b29b      	uxth	r3, r3
 8004130:	4619      	mov	r1, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3108      	adds	r1, #8
 8004136:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800413a:	887b      	ldrh	r3, [r7, #2]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	200f      	movs	r0, #15
 8004144:	fa00 f303 	lsl.w	r3, r0, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	4019      	ands	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3208      	adds	r2, #8
 8004150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8004154:	887b      	ldrh	r3, [r7, #2]
 8004156:	08db      	lsrs	r3, r3, #3
 8004158:	b29b      	uxth	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3208      	adds	r2, #8
 8004160:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800416a:	887b      	ldrh	r3, [r7, #2]
 800416c:	08db      	lsrs	r3, r3, #3
 800416e:	b29b      	uxth	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3208      	adds	r2, #8
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40020000 	.word	0x40020000
 8004188:	40020400 	.word	0x40020400
 800418c:	40020800 	.word	0x40020800
 8004190:	40020c00 	.word	0x40020c00
 8004194:	40021000 	.word	0x40021000
 8004198:	40021400 	.word	0x40021400
 800419c:	40021800 	.word	0x40021800
 80041a0:	40021c00 	.word	0x40021c00
 80041a4:	40022000 	.word	0x40022000
 80041a8:	08004b8c 	.word	0x08004b8c

080041ac <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	4b15      	ldr	r3, [pc, #84]	; (8004210 <RCC_AHB1PeriphClockCmd+0x64>)
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d102      	bne.n	80041c8 <RCC_AHB1PeriphClockCmd+0x1c>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d104      	bne.n	80041d2 <RCC_AHB1PeriphClockCmd+0x26>
 80041c8:	4812      	ldr	r0, [pc, #72]	; (8004214 <RCC_AHB1PeriphClockCmd+0x68>)
 80041ca:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80041ce:	f7fd f967 	bl	80014a0 <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d007      	beq.n	80041e8 <RCC_AHB1PeriphClockCmd+0x3c>
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d004      	beq.n	80041e8 <RCC_AHB1PeriphClockCmd+0x3c>
 80041de:	480d      	ldr	r0, [pc, #52]	; (8004214 <RCC_AHB1PeriphClockCmd+0x68>)
 80041e0:	f240 4142 	movw	r1, #1090	; 0x442
 80041e4:	f7fd f95c 	bl	80014a0 <assert_failed>
  if (NewState != DISABLE)
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d006      	beq.n	80041fc <RCC_AHB1PeriphClockCmd+0x50>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <RCC_AHB1PeriphClockCmd+0x6c>)
 80041f0:	4a09      	ldr	r2, [pc, #36]	; (8004218 <RCC_AHB1PeriphClockCmd+0x6c>)
 80041f2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
 80041fa:	e006      	b.n	800420a <RCC_AHB1PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <RCC_AHB1PeriphClockCmd+0x6c>)
 80041fe:	4a06      	ldr	r2, [pc, #24]	; (8004218 <RCC_AHB1PeriphClockCmd+0x6c>)
 8004200:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	43d2      	mvns	r2, r2
 8004206:	400a      	ands	r2, r1
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	818bee00 	.word	0x818bee00
 8004214:	08004bdc 	.word	0x08004bdc
 8004218:	40023800 	.word	0x40023800

0800421c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	4b15      	ldr	r3, [pc, #84]	; (8004280 <RCC_APB2PeriphClockCmd+0x64>)
 800422c:	4013      	ands	r3, r2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <RCC_APB2PeriphClockCmd+0x1c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d104      	bne.n	8004242 <RCC_APB2PeriphClockCmd+0x26>
 8004238:	4812      	ldr	r0, [pc, #72]	; (8004284 <RCC_APB2PeriphClockCmd+0x68>)
 800423a:	f240 41d5 	movw	r1, #1237	; 0x4d5
 800423e:	f7fd f92f 	bl	80014a0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8004242:	78fb      	ldrb	r3, [r7, #3]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d007      	beq.n	8004258 <RCC_APB2PeriphClockCmd+0x3c>
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d004      	beq.n	8004258 <RCC_APB2PeriphClockCmd+0x3c>
 800424e:	480d      	ldr	r0, [pc, #52]	; (8004284 <RCC_APB2PeriphClockCmd+0x68>)
 8004250:	f240 41d6 	movw	r1, #1238	; 0x4d6
 8004254:	f7fd f924 	bl	80014a0 <assert_failed>

  if (NewState != DISABLE)
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d006      	beq.n	800426c <RCC_APB2PeriphClockCmd+0x50>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800425e:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <RCC_APB2PeriphClockCmd+0x6c>)
 8004260:	4a09      	ldr	r2, [pc, #36]	; (8004288 <RCC_APB2PeriphClockCmd+0x6c>)
 8004262:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	430a      	orrs	r2, r1
 8004268:	645a      	str	r2, [r3, #68]	; 0x44
 800426a:	e006      	b.n	800427a <RCC_APB2PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <RCC_APB2PeriphClockCmd+0x6c>)
 800426e:	4a06      	ldr	r2, [pc, #24]	; (8004288 <RCC_APB2PeriphClockCmd+0x6c>)
 8004270:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	43d2      	mvns	r2, r2
 8004276:	400a      	ands	r2, r1
 8004278:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	fff8a0cc 	.word	0xfff8a0cc
 8004284:	08004bdc 	.word	0x08004bdc
 8004288:	40023800 	.word	0x40023800

0800428c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004296:	2300      	movs	r3, #0
 8004298:	81fb      	strh	r3, [r7, #14]
  
  /* check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4b70      	ldr	r3, [pc, #448]	; (8004460 <SPI_Init+0x1d4>)
 800429e:	429a      	cmp	r2, r3
 80042a0:	d00c      	beq.n	80042bc <SPI_Init+0x30>
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4b6f      	ldr	r3, [pc, #444]	; (8004464 <SPI_Init+0x1d8>)
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d008      	beq.n	80042bc <SPI_Init+0x30>
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4b6e      	ldr	r3, [pc, #440]	; (8004468 <SPI_Init+0x1dc>)
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d004      	beq.n	80042bc <SPI_Init+0x30>
 80042b2:	486e      	ldr	r0, [pc, #440]	; (800446c <SPI_Init+0x1e0>)
 80042b4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80042b8:	f7fd f8f2 	bl	80014a0 <assert_failed>
  
  /* Check the SPI parameters */
  assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d013      	beq.n	80042ec <SPI_Init+0x60>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042cc:	d00e      	beq.n	80042ec <SPI_Init+0x60>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d6:	d009      	beq.n	80042ec <SPI_Init+0x60>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042e0:	d004      	beq.n	80042ec <SPI_Init+0x60>
 80042e2:	4862      	ldr	r0, [pc, #392]	; (800446c <SPI_Init+0x1e0>)
 80042e4:	f240 1109 	movw	r1, #265	; 0x109
 80042e8:	f7fd f8da 	bl	80014a0 <assert_failed>
  assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	885b      	ldrh	r3, [r3, #2]
 80042f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f4:	d008      	beq.n	8004308 <SPI_Init+0x7c>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	885b      	ldrh	r3, [r3, #2]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d004      	beq.n	8004308 <SPI_Init+0x7c>
 80042fe:	485b      	ldr	r0, [pc, #364]	; (800446c <SPI_Init+0x1e0>)
 8004300:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004304:	f7fd f8cc 	bl	80014a0 <assert_failed>
  assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	889b      	ldrh	r3, [r3, #4]
 800430c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004310:	d008      	beq.n	8004324 <SPI_Init+0x98>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	889b      	ldrh	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d004      	beq.n	8004324 <SPI_Init+0x98>
 800431a:	4854      	ldr	r0, [pc, #336]	; (800446c <SPI_Init+0x1e0>)
 800431c:	f240 110b 	movw	r1, #267	; 0x10b
 8004320:	f7fd f8be 	bl	80014a0 <assert_failed>
  assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	88db      	ldrh	r3, [r3, #6]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <SPI_Init+0xb2>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	88db      	ldrh	r3, [r3, #6]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d004      	beq.n	800433e <SPI_Init+0xb2>
 8004334:	484d      	ldr	r0, [pc, #308]	; (800446c <SPI_Init+0x1e0>)
 8004336:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800433a:	f7fd f8b1 	bl	80014a0 <assert_failed>
  assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	891b      	ldrh	r3, [r3, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d008      	beq.n	8004358 <SPI_Init+0xcc>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	891b      	ldrh	r3, [r3, #8]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d004      	beq.n	8004358 <SPI_Init+0xcc>
 800434e:	4847      	ldr	r0, [pc, #284]	; (800446c <SPI_Init+0x1e0>)
 8004350:	f240 110d 	movw	r1, #269	; 0x10d
 8004354:	f7fd f8a4 	bl	80014a0 <assert_failed>
  assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	895b      	ldrh	r3, [r3, #10]
 800435c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004360:	d008      	beq.n	8004374 <SPI_Init+0xe8>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	895b      	ldrh	r3, [r3, #10]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d004      	beq.n	8004374 <SPI_Init+0xe8>
 800436a:	4840      	ldr	r0, [pc, #256]	; (800446c <SPI_Init+0x1e0>)
 800436c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004370:	f7fd f896 	bl	80014a0 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	899b      	ldrh	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d020      	beq.n	80043be <SPI_Init+0x132>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	899b      	ldrh	r3, [r3, #12]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d01c      	beq.n	80043be <SPI_Init+0x132>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	899b      	ldrh	r3, [r3, #12]
 8004388:	2b10      	cmp	r3, #16
 800438a:	d018      	beq.n	80043be <SPI_Init+0x132>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	899b      	ldrh	r3, [r3, #12]
 8004390:	2b18      	cmp	r3, #24
 8004392:	d014      	beq.n	80043be <SPI_Init+0x132>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	899b      	ldrh	r3, [r3, #12]
 8004398:	2b20      	cmp	r3, #32
 800439a:	d010      	beq.n	80043be <SPI_Init+0x132>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	899b      	ldrh	r3, [r3, #12]
 80043a0:	2b28      	cmp	r3, #40	; 0x28
 80043a2:	d00c      	beq.n	80043be <SPI_Init+0x132>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	899b      	ldrh	r3, [r3, #12]
 80043a8:	2b30      	cmp	r3, #48	; 0x30
 80043aa:	d008      	beq.n	80043be <SPI_Init+0x132>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	899b      	ldrh	r3, [r3, #12]
 80043b0:	2b38      	cmp	r3, #56	; 0x38
 80043b2:	d004      	beq.n	80043be <SPI_Init+0x132>
 80043b4:	482d      	ldr	r0, [pc, #180]	; (800446c <SPI_Init+0x1e0>)
 80043b6:	f240 110f 	movw	r1, #271	; 0x10f
 80043ba:	f7fd f871 	bl	80014a0 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	89db      	ldrh	r3, [r3, #14]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <SPI_Init+0x14c>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	89db      	ldrh	r3, [r3, #14]
 80043ca:	2b80      	cmp	r3, #128	; 0x80
 80043cc:	d004      	beq.n	80043d8 <SPI_Init+0x14c>
 80043ce:	4827      	ldr	r0, [pc, #156]	; (800446c <SPI_Init+0x1e0>)
 80043d0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80043d4:	f7fd f864 	bl	80014a0 <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	8a1b      	ldrh	r3, [r3, #16]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d104      	bne.n	80043ea <SPI_Init+0x15e>
 80043e0:	4822      	ldr	r0, [pc, #136]	; (800446c <SPI_Init+0x1e0>)
 80043e2:	f240 1111 	movw	r1, #273	; 0x111
 80043e6:	f7fd f85b 	bl	80014a0 <assert_failed>

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80043f0:	89fb      	ldrh	r3, [r7, #14]
 80043f2:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80043f6:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	881a      	ldrh	r2, [r3, #0]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	885b      	ldrh	r3, [r3, #2]
 8004400:	4313      	orrs	r3, r2
 8004402:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004408:	4313      	orrs	r3, r2
 800440a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004410:	4313      	orrs	r3, r2
 8004412:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004418:	4313      	orrs	r3, r2
 800441a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004420:	4313      	orrs	r3, r2
 8004422:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004428:	4313      	orrs	r3, r2
 800442a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004430:	4313      	orrs	r3, r2
 8004432:	b29a      	uxth	r2, r3
 8004434:	89fb      	ldrh	r3, [r7, #14]
 8004436:	4313      	orrs	r3, r2
 8004438:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	89fa      	ldrh	r2, [r7, #14]
 800443e:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8b9b      	ldrh	r3, [r3, #28]
 8004444:	b29b      	uxth	r3, r3
 8004446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800444a:	b29a      	uxth	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	8a1a      	ldrh	r2, [r3, #16]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	821a      	strh	r2, [r3, #16]
}
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40013000 	.word	0x40013000
 8004464:	40003800 	.word	0x40003800
 8004468:	40003c00 	.word	0x40003c00
 800446c:	08004c2c 	.word	0x08004c2c

08004470 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <SPI_Cmd+0x74>)
 8004480:	429a      	cmp	r2, r3
 8004482:	d00c      	beq.n	800449e <SPI_Cmd+0x2e>
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <SPI_Cmd+0x78>)
 8004488:	429a      	cmp	r2, r3
 800448a:	d008      	beq.n	800449e <SPI_Cmd+0x2e>
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	4b17      	ldr	r3, [pc, #92]	; (80044ec <SPI_Cmd+0x7c>)
 8004490:	429a      	cmp	r2, r3
 8004492:	d004      	beq.n	800449e <SPI_Cmd+0x2e>
 8004494:	4816      	ldr	r0, [pc, #88]	; (80044f0 <SPI_Cmd+0x80>)
 8004496:	f240 2101 	movw	r1, #513	; 0x201
 800449a:	f7fd f801 	bl	80014a0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <SPI_Cmd+0x44>
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d004      	beq.n	80044b4 <SPI_Cmd+0x44>
 80044aa:	4811      	ldr	r0, [pc, #68]	; (80044f0 <SPI_Cmd+0x80>)
 80044ac:	f240 2102 	movw	r1, #514	; 0x202
 80044b0:	f7fc fff6 	bl	80014a0 <assert_failed>
  if (NewState != DISABLE)
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <SPI_Cmd+0x5c>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	801a      	strh	r2, [r3, #0]
 80044ca:	e007      	b.n	80044dc <SPI_Cmd+0x6c>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	801a      	strh	r2, [r3, #0]
  }
}
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40013000 	.word	0x40013000
 80044e8:	40003800 	.word	0x40003800
 80044ec:	40003c00 	.word	0x40003c00
 80044f0:	08004c2c 	.word	0x08004c2c

080044f4 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	4b0f      	ldr	r3, [pc, #60]	; (800453c <SPI_I2S_ReceiveData+0x48>)
 8004500:	429a      	cmp	r2, r3
 8004502:	d014      	beq.n	800452e <SPI_I2S_ReceiveData+0x3a>
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <SPI_I2S_ReceiveData+0x4c>)
 8004508:	429a      	cmp	r2, r3
 800450a:	d010      	beq.n	800452e <SPI_I2S_ReceiveData+0x3a>
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <SPI_I2S_ReceiveData+0x50>)
 8004510:	429a      	cmp	r2, r3
 8004512:	d00c      	beq.n	800452e <SPI_I2S_ReceiveData+0x3a>
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <SPI_I2S_ReceiveData+0x54>)
 8004518:	429a      	cmp	r2, r3
 800451a:	d008      	beq.n	800452e <SPI_I2S_ReceiveData+0x3a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8004522:	d004      	beq.n	800452e <SPI_I2S_ReceiveData+0x3a>
 8004524:	4809      	ldr	r0, [pc, #36]	; (800454c <SPI_I2S_ReceiveData+0x58>)
 8004526:	f240 310a 	movw	r1, #778	; 0x30a
 800452a:	f7fc ffb9 	bl	80014a0 <assert_failed>
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	899b      	ldrh	r3, [r3, #12]
 8004532:	b29b      	uxth	r3, r3
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40013000 	.word	0x40013000
 8004540:	40003800 	.word	0x40003800
 8004544:	40003c00 	.word	0x40003c00
 8004548:	40003400 	.word	0x40003400
 800454c:	08004c2c 	.word	0x08004c2c

08004550 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	4b0f      	ldr	r3, [pc, #60]	; (800459c <SPI_I2S_SendData+0x4c>)
 8004560:	429a      	cmp	r2, r3
 8004562:	d014      	beq.n	800458e <SPI_I2S_SendData+0x3e>
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <SPI_I2S_SendData+0x50>)
 8004568:	429a      	cmp	r2, r3
 800456a:	d010      	beq.n	800458e <SPI_I2S_SendData+0x3e>
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <SPI_I2S_SendData+0x54>)
 8004570:	429a      	cmp	r2, r3
 8004572:	d00c      	beq.n	800458e <SPI_I2S_SendData+0x3e>
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <SPI_I2S_SendData+0x58>)
 8004578:	429a      	cmp	r2, r3
 800457a:	d008      	beq.n	800458e <SPI_I2S_SendData+0x3e>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8004582:	d004      	beq.n	800458e <SPI_I2S_SendData+0x3e>
 8004584:	4809      	ldr	r0, [pc, #36]	; (80045ac <SPI_I2S_SendData+0x5c>)
 8004586:	f240 311a 	movw	r1, #794	; 0x31a
 800458a:	f7fc ff89 	bl	80014a0 <assert_failed>
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	887a      	ldrh	r2, [r7, #2]
 8004592:	819a      	strh	r2, [r3, #12]
}
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40013000 	.word	0x40013000
 80045a0:	40003800 	.word	0x40003800
 80045a4:	40003c00 	.word	0x40003c00
 80045a8:	40003400 	.word	0x40003400
 80045ac:	08004c2c 	.word	0x08004c2c

080045b0 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80045bc:	2300      	movs	r3, #0
 80045be:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	4b25      	ldr	r3, [pc, #148]	; (8004658 <SPI_I2S_GetFlagStatus+0xa8>)
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d014      	beq.n	80045f2 <SPI_I2S_GetFlagStatus+0x42>
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	4b24      	ldr	r3, [pc, #144]	; (800465c <SPI_I2S_GetFlagStatus+0xac>)
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d010      	beq.n	80045f2 <SPI_I2S_GetFlagStatus+0x42>
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	4b23      	ldr	r3, [pc, #140]	; (8004660 <SPI_I2S_GetFlagStatus+0xb0>)
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d00c      	beq.n	80045f2 <SPI_I2S_GetFlagStatus+0x42>
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	4b22      	ldr	r3, [pc, #136]	; (8004664 <SPI_I2S_GetFlagStatus+0xb4>)
 80045dc:	429a      	cmp	r2, r3
 80045de:	d008      	beq.n	80045f2 <SPI_I2S_GetFlagStatus+0x42>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80045e6:	d004      	beq.n	80045f2 <SPI_I2S_GetFlagStatus+0x42>
 80045e8:	481f      	ldr	r0, [pc, #124]	; (8004668 <SPI_I2S_GetFlagStatus+0xb8>)
 80045ea:	f240 4173 	movw	r1, #1139	; 0x473
 80045ee:	f7fc ff57 	bl	80014a0 <assert_failed>
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
 80045f2:	887b      	ldrh	r3, [r7, #2]
 80045f4:	2b80      	cmp	r3, #128	; 0x80
 80045f6:	d01d      	beq.n	8004634 <SPI_I2S_GetFlagStatus+0x84>
 80045f8:	887b      	ldrh	r3, [r7, #2]
 80045fa:	2b40      	cmp	r3, #64	; 0x40
 80045fc:	d01a      	beq.n	8004634 <SPI_I2S_GetFlagStatus+0x84>
 80045fe:	887b      	ldrh	r3, [r7, #2]
 8004600:	2b20      	cmp	r3, #32
 8004602:	d017      	beq.n	8004634 <SPI_I2S_GetFlagStatus+0x84>
 8004604:	887b      	ldrh	r3, [r7, #2]
 8004606:	2b10      	cmp	r3, #16
 8004608:	d014      	beq.n	8004634 <SPI_I2S_GetFlagStatus+0x84>
 800460a:	887b      	ldrh	r3, [r7, #2]
 800460c:	2b08      	cmp	r3, #8
 800460e:	d011      	beq.n	8004634 <SPI_I2S_GetFlagStatus+0x84>
 8004610:	887b      	ldrh	r3, [r7, #2]
 8004612:	2b04      	cmp	r3, #4
 8004614:	d00e      	beq.n	8004634 <SPI_I2S_GetFlagStatus+0x84>
 8004616:	887b      	ldrh	r3, [r7, #2]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d00b      	beq.n	8004634 <SPI_I2S_GetFlagStatus+0x84>
 800461c:	887b      	ldrh	r3, [r7, #2]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d008      	beq.n	8004634 <SPI_I2S_GetFlagStatus+0x84>
 8004622:	887b      	ldrh	r3, [r7, #2]
 8004624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004628:	d004      	beq.n	8004634 <SPI_I2S_GetFlagStatus+0x84>
 800462a:	480f      	ldr	r0, [pc, #60]	; (8004668 <SPI_I2S_GetFlagStatus+0xb8>)
 800462c:	f240 4174 	movw	r1, #1140	; 0x474
 8004630:	f7fc ff36 	bl	80014a0 <assert_failed>
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	891b      	ldrh	r3, [r3, #8]
 8004638:	b29a      	uxth	r2, r3
 800463a:	887b      	ldrh	r3, [r7, #2]
 800463c:	4013      	ands	r3, r2
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <SPI_I2S_GetFlagStatus+0x9a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
 8004648:	e001      	b.n	800464e <SPI_I2S_GetFlagStatus+0x9e>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800464a:	2300      	movs	r3, #0
 800464c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800464e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40013000 	.word	0x40013000
 800465c:	40003800 	.word	0x40003800
 8004660:	40003c00 	.word	0x40003c00
 8004664:	40003400 	.word	0x40003400
 8004668:	08004c2c 	.word	0x08004c2c

0800466c <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800466c:	b590      	push	{r4, r7, lr}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	71fa      	strb	r2, [r7, #7]
 8004678:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <SYSCFG_EXTILineConfig+0x50>
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d018      	beq.n	80046bc <SYSCFG_EXTILineConfig+0x50>
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d015      	beq.n	80046bc <SYSCFG_EXTILineConfig+0x50>
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	2b03      	cmp	r3, #3
 8004694:	d012      	beq.n	80046bc <SYSCFG_EXTILineConfig+0x50>
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	2b04      	cmp	r3, #4
 800469a:	d00f      	beq.n	80046bc <SYSCFG_EXTILineConfig+0x50>
 800469c:	79fb      	ldrb	r3, [r7, #7]
 800469e:	2b05      	cmp	r3, #5
 80046a0:	d00c      	beq.n	80046bc <SYSCFG_EXTILineConfig+0x50>
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	2b06      	cmp	r3, #6
 80046a6:	d009      	beq.n	80046bc <SYSCFG_EXTILineConfig+0x50>
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	2b07      	cmp	r3, #7
 80046ac:	d006      	beq.n	80046bc <SYSCFG_EXTILineConfig+0x50>
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d003      	beq.n	80046bc <SYSCFG_EXTILineConfig+0x50>
 80046b4:	4834      	ldr	r0, [pc, #208]	; (8004788 <SYSCFG_EXTILineConfig+0x11c>)
 80046b6:	217c      	movs	r1, #124	; 0x7c
 80046b8:	f7fc fef2 	bl	80014a0 <assert_failed>
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
 80046bc:	79bb      	ldrb	r3, [r7, #6]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d030      	beq.n	8004724 <SYSCFG_EXTILineConfig+0xb8>
 80046c2:	79bb      	ldrb	r3, [r7, #6]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d02d      	beq.n	8004724 <SYSCFG_EXTILineConfig+0xb8>
 80046c8:	79bb      	ldrb	r3, [r7, #6]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d02a      	beq.n	8004724 <SYSCFG_EXTILineConfig+0xb8>
 80046ce:	79bb      	ldrb	r3, [r7, #6]
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d027      	beq.n	8004724 <SYSCFG_EXTILineConfig+0xb8>
 80046d4:	79bb      	ldrb	r3, [r7, #6]
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d024      	beq.n	8004724 <SYSCFG_EXTILineConfig+0xb8>
 80046da:	79bb      	ldrb	r3, [r7, #6]
 80046dc:	2b05      	cmp	r3, #5
 80046de:	d021      	beq.n	8004724 <SYSCFG_EXTILineConfig+0xb8>
 80046e0:	79bb      	ldrb	r3, [r7, #6]
 80046e2:	2b06      	cmp	r3, #6
 80046e4:	d01e      	beq.n	8004724 <SYSCFG_EXTILineConfig+0xb8>
 80046e6:	79bb      	ldrb	r3, [r7, #6]
 80046e8:	2b07      	cmp	r3, #7
 80046ea:	d01b      	beq.n	8004724 <SYSCFG_EXTILineConfig+0xb8>
 80046ec:	79bb      	ldrb	r3, [r7, #6]
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d018      	beq.n	8004724 <SYSCFG_EXTILineConfig+0xb8>
 80046f2:	79bb      	ldrb	r3, [r7, #6]
 80046f4:	2b09      	cmp	r3, #9
 80046f6:	d015      	beq.n	8004724 <SYSCFG_EXTILineConfig+0xb8>
 80046f8:	79bb      	ldrb	r3, [r7, #6]
 80046fa:	2b0a      	cmp	r3, #10
 80046fc:	d012      	beq.n	8004724 <SYSCFG_EXTILineConfig+0xb8>
 80046fe:	79bb      	ldrb	r3, [r7, #6]
 8004700:	2b0b      	cmp	r3, #11
 8004702:	d00f      	beq.n	8004724 <SYSCFG_EXTILineConfig+0xb8>
 8004704:	79bb      	ldrb	r3, [r7, #6]
 8004706:	2b0c      	cmp	r3, #12
 8004708:	d00c      	beq.n	8004724 <SYSCFG_EXTILineConfig+0xb8>
 800470a:	79bb      	ldrb	r3, [r7, #6]
 800470c:	2b0d      	cmp	r3, #13
 800470e:	d009      	beq.n	8004724 <SYSCFG_EXTILineConfig+0xb8>
 8004710:	79bb      	ldrb	r3, [r7, #6]
 8004712:	2b0e      	cmp	r3, #14
 8004714:	d006      	beq.n	8004724 <SYSCFG_EXTILineConfig+0xb8>
 8004716:	79bb      	ldrb	r3, [r7, #6]
 8004718:	2b0f      	cmp	r3, #15
 800471a:	d003      	beq.n	8004724 <SYSCFG_EXTILineConfig+0xb8>
 800471c:	481a      	ldr	r0, [pc, #104]	; (8004788 <SYSCFG_EXTILineConfig+0x11c>)
 800471e:	217d      	movs	r1, #125	; 0x7d
 8004720:	f7fc febe 	bl	80014a0 <assert_failed>

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8004724:	79bb      	ldrb	r3, [r7, #6]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	220f      	movs	r2, #15
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8004734:	4b15      	ldr	r3, [pc, #84]	; (800478c <SYSCFG_EXTILineConfig+0x120>)
 8004736:	79ba      	ldrb	r2, [r7, #6]
 8004738:	0892      	lsrs	r2, r2, #2
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	4913      	ldr	r1, [pc, #76]	; (800478c <SYSCFG_EXTILineConfig+0x120>)
 800473e:	79b8      	ldrb	r0, [r7, #6]
 8004740:	0880      	lsrs	r0, r0, #2
 8004742:	b2c0      	uxtb	r0, r0
 8004744:	3002      	adds	r0, #2
 8004746:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800474a:	68f9      	ldr	r1, [r7, #12]
 800474c:	43c9      	mvns	r1, r1
 800474e:	4001      	ands	r1, r0
 8004750:	3202      	adds	r2, #2
 8004752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8004756:	4b0d      	ldr	r3, [pc, #52]	; (800478c <SYSCFG_EXTILineConfig+0x120>)
 8004758:	79ba      	ldrb	r2, [r7, #6]
 800475a:	0892      	lsrs	r2, r2, #2
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	490b      	ldr	r1, [pc, #44]	; (800478c <SYSCFG_EXTILineConfig+0x120>)
 8004760:	79b8      	ldrb	r0, [r7, #6]
 8004762:	0880      	lsrs	r0, r0, #2
 8004764:	b2c0      	uxtb	r0, r0
 8004766:	3002      	adds	r0, #2
 8004768:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800476c:	79fc      	ldrb	r4, [r7, #7]
 800476e:	79b9      	ldrb	r1, [r7, #6]
 8004770:	f001 0103 	and.w	r1, r1, #3
 8004774:	0089      	lsls	r1, r1, #2
 8004776:	fa04 f101 	lsl.w	r1, r4, r1
 800477a:	4301      	orrs	r1, r0
 800477c:	3202      	adds	r2, #2
 800477e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	bd90      	pop	{r4, r7, pc}
 8004788:	08004c7c 	.word	0x08004c7c
 800478c:	40013800 	.word	0x40013800

08004790 <__libc_init_array>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	4e0f      	ldr	r6, [pc, #60]	; (80047d0 <__libc_init_array+0x40>)
 8004794:	4d0f      	ldr	r5, [pc, #60]	; (80047d4 <__libc_init_array+0x44>)
 8004796:	1b76      	subs	r6, r6, r5
 8004798:	10b6      	asrs	r6, r6, #2
 800479a:	d007      	beq.n	80047ac <__libc_init_array+0x1c>
 800479c:	3d04      	subs	r5, #4
 800479e:	2400      	movs	r4, #0
 80047a0:	3401      	adds	r4, #1
 80047a2:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80047a6:	4798      	blx	r3
 80047a8:	42a6      	cmp	r6, r4
 80047aa:	d1f9      	bne.n	80047a0 <__libc_init_array+0x10>
 80047ac:	4e0a      	ldr	r6, [pc, #40]	; (80047d8 <__libc_init_array+0x48>)
 80047ae:	4d0b      	ldr	r5, [pc, #44]	; (80047dc <__libc_init_array+0x4c>)
 80047b0:	1b76      	subs	r6, r6, r5
 80047b2:	f000 faa9 	bl	8004d08 <_init>
 80047b6:	10b6      	asrs	r6, r6, #2
 80047b8:	d008      	beq.n	80047cc <__libc_init_array+0x3c>
 80047ba:	3d04      	subs	r5, #4
 80047bc:	2400      	movs	r4, #0
 80047be:	3401      	adds	r4, #1
 80047c0:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80047c4:	4798      	blx	r3
 80047c6:	42a6      	cmp	r6, r4
 80047c8:	d1f9      	bne.n	80047be <__libc_init_array+0x2e>
 80047ca:	bd70      	pop	{r4, r5, r6, pc}
 80047cc:	bd70      	pop	{r4, r5, r6, pc}
 80047ce:	bf00      	nop
 80047d0:	08004d20 	.word	0x08004d20
 80047d4:	08004d20 	.word	0x08004d20
 80047d8:	08004d28 	.word	0x08004d28
 80047dc:	08004d20 	.word	0x08004d20

080047e0 <memcmp>:
 80047e0:	2a03      	cmp	r2, #3
 80047e2:	b470      	push	{r4, r5, r6}
 80047e4:	d928      	bls.n	8004838 <memcmp+0x58>
 80047e6:	ea40 0301 	orr.w	r3, r0, r1
 80047ea:	079b      	lsls	r3, r3, #30
 80047ec:	d013      	beq.n	8004816 <memcmp+0x36>
 80047ee:	7805      	ldrb	r5, [r0, #0]
 80047f0:	780c      	ldrb	r4, [r1, #0]
 80047f2:	42a5      	cmp	r5, r4
 80047f4:	d124      	bne.n	8004840 <memcmp+0x60>
 80047f6:	3a01      	subs	r2, #1
 80047f8:	2300      	movs	r3, #0
 80047fa:	e005      	b.n	8004808 <memcmp+0x28>
 80047fc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004800:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004804:	42a5      	cmp	r5, r4
 8004806:	d11b      	bne.n	8004840 <memcmp+0x60>
 8004808:	4293      	cmp	r3, r2
 800480a:	f103 0301 	add.w	r3, r3, #1
 800480e:	d1f5      	bne.n	80047fc <memcmp+0x1c>
 8004810:	2000      	movs	r0, #0
 8004812:	bc70      	pop	{r4, r5, r6}
 8004814:	4770      	bx	lr
 8004816:	460c      	mov	r4, r1
 8004818:	4603      	mov	r3, r0
 800481a:	6825      	ldr	r5, [r4, #0]
 800481c:	681e      	ldr	r6, [r3, #0]
 800481e:	42ae      	cmp	r6, r5
 8004820:	4621      	mov	r1, r4
 8004822:	4618      	mov	r0, r3
 8004824:	f104 0404 	add.w	r4, r4, #4
 8004828:	f103 0304 	add.w	r3, r3, #4
 800482c:	d104      	bne.n	8004838 <memcmp+0x58>
 800482e:	3a04      	subs	r2, #4
 8004830:	2a03      	cmp	r2, #3
 8004832:	4618      	mov	r0, r3
 8004834:	4621      	mov	r1, r4
 8004836:	d8f0      	bhi.n	800481a <memcmp+0x3a>
 8004838:	2a00      	cmp	r2, #0
 800483a:	d1d8      	bne.n	80047ee <memcmp+0xe>
 800483c:	4610      	mov	r0, r2
 800483e:	e7e8      	b.n	8004812 <memcmp+0x32>
 8004840:	1b28      	subs	r0, r5, r4
 8004842:	bc70      	pop	{r4, r5, r6}
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop

08004848 <memset>:
 8004848:	b4f0      	push	{r4, r5, r6, r7}
 800484a:	0784      	lsls	r4, r0, #30
 800484c:	d043      	beq.n	80048d6 <memset+0x8e>
 800484e:	1e54      	subs	r4, r2, #1
 8004850:	2a00      	cmp	r2, #0
 8004852:	d03e      	beq.n	80048d2 <memset+0x8a>
 8004854:	b2cd      	uxtb	r5, r1
 8004856:	4603      	mov	r3, r0
 8004858:	e003      	b.n	8004862 <memset+0x1a>
 800485a:	1e62      	subs	r2, r4, #1
 800485c:	2c00      	cmp	r4, #0
 800485e:	d038      	beq.n	80048d2 <memset+0x8a>
 8004860:	4614      	mov	r4, r2
 8004862:	f803 5b01 	strb.w	r5, [r3], #1
 8004866:	079a      	lsls	r2, r3, #30
 8004868:	d1f7      	bne.n	800485a <memset+0x12>
 800486a:	2c03      	cmp	r4, #3
 800486c:	d92a      	bls.n	80048c4 <memset+0x7c>
 800486e:	b2cd      	uxtb	r5, r1
 8004870:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004874:	2c0f      	cmp	r4, #15
 8004876:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800487a:	d915      	bls.n	80048a8 <memset+0x60>
 800487c:	f1a4 0710 	sub.w	r7, r4, #16
 8004880:	093f      	lsrs	r7, r7, #4
 8004882:	f103 0610 	add.w	r6, r3, #16
 8004886:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800488a:	461a      	mov	r2, r3
 800488c:	6015      	str	r5, [r2, #0]
 800488e:	6055      	str	r5, [r2, #4]
 8004890:	6095      	str	r5, [r2, #8]
 8004892:	60d5      	str	r5, [r2, #12]
 8004894:	3210      	adds	r2, #16
 8004896:	42b2      	cmp	r2, r6
 8004898:	d1f8      	bne.n	800488c <memset+0x44>
 800489a:	f004 040f 	and.w	r4, r4, #15
 800489e:	3701      	adds	r7, #1
 80048a0:	2c03      	cmp	r4, #3
 80048a2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80048a6:	d90d      	bls.n	80048c4 <memset+0x7c>
 80048a8:	461e      	mov	r6, r3
 80048aa:	4622      	mov	r2, r4
 80048ac:	3a04      	subs	r2, #4
 80048ae:	2a03      	cmp	r2, #3
 80048b0:	f846 5b04 	str.w	r5, [r6], #4
 80048b4:	d8fa      	bhi.n	80048ac <memset+0x64>
 80048b6:	1f22      	subs	r2, r4, #4
 80048b8:	f022 0203 	bic.w	r2, r2, #3
 80048bc:	3204      	adds	r2, #4
 80048be:	4413      	add	r3, r2
 80048c0:	f004 0403 	and.w	r4, r4, #3
 80048c4:	b12c      	cbz	r4, 80048d2 <memset+0x8a>
 80048c6:	b2c9      	uxtb	r1, r1
 80048c8:	441c      	add	r4, r3
 80048ca:	f803 1b01 	strb.w	r1, [r3], #1
 80048ce:	42a3      	cmp	r3, r4
 80048d0:	d1fb      	bne.n	80048ca <memset+0x82>
 80048d2:	bcf0      	pop	{r4, r5, r6, r7}
 80048d4:	4770      	bx	lr
 80048d6:	4614      	mov	r4, r2
 80048d8:	4603      	mov	r3, r0
 80048da:	e7c6      	b.n	800486a <memset+0x22>

080048dc <strncmp>:
 80048dc:	b430      	push	{r4, r5}
 80048de:	2a00      	cmp	r2, #0
 80048e0:	d04a      	beq.n	8004978 <strncmp+0x9c>
 80048e2:	ea40 0301 	orr.w	r3, r0, r1
 80048e6:	f013 0303 	ands.w	r3, r3, #3
 80048ea:	d12d      	bne.n	8004948 <strncmp+0x6c>
 80048ec:	2a03      	cmp	r2, #3
 80048ee:	d92b      	bls.n	8004948 <strncmp+0x6c>
 80048f0:	6804      	ldr	r4, [r0, #0]
 80048f2:	680d      	ldr	r5, [r1, #0]
 80048f4:	42ac      	cmp	r4, r5
 80048f6:	d127      	bne.n	8004948 <strncmp+0x6c>
 80048f8:	3a04      	subs	r2, #4
 80048fa:	d03d      	beq.n	8004978 <strncmp+0x9c>
 80048fc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8004900:	ea25 0404 	bic.w	r4, r5, r4
 8004904:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8004908:	d13c      	bne.n	8004984 <strncmp+0xa8>
 800490a:	460c      	mov	r4, r1
 800490c:	4603      	mov	r3, r0
 800490e:	e00e      	b.n	800492e <strncmp+0x52>
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	6864      	ldr	r4, [r4, #4]
 8004914:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8004918:	42a3      	cmp	r3, r4
 800491a:	ea25 0503 	bic.w	r5, r5, r3
 800491e:	d113      	bne.n	8004948 <strncmp+0x6c>
 8004920:	3a04      	subs	r2, #4
 8004922:	d029      	beq.n	8004978 <strncmp+0x9c>
 8004924:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8004928:	d129      	bne.n	800497e <strncmp+0xa2>
 800492a:	4603      	mov	r3, r0
 800492c:	460c      	mov	r4, r1
 800492e:	2a03      	cmp	r2, #3
 8004930:	f100 0004 	add.w	r0, r0, #4
 8004934:	f101 0104 	add.w	r1, r1, #4
 8004938:	d8ea      	bhi.n	8004910 <strncmp+0x34>
 800493a:	1e55      	subs	r5, r2, #1
 800493c:	b92a      	cbnz	r2, 800494a <strncmp+0x6e>
 800493e:	7918      	ldrb	r0, [r3, #4]
 8004940:	7922      	ldrb	r2, [r4, #4]
 8004942:	1a80      	subs	r0, r0, r2
 8004944:	bc30      	pop	{r4, r5}
 8004946:	4770      	bx	lr
 8004948:	1e55      	subs	r5, r2, #1
 800494a:	7803      	ldrb	r3, [r0, #0]
 800494c:	780a      	ldrb	r2, [r1, #0]
 800494e:	4293      	cmp	r3, r2
 8004950:	d11a      	bne.n	8004988 <strncmp+0xac>
 8004952:	b1dd      	cbz	r5, 800498c <strncmp+0xb0>
 8004954:	b1b3      	cbz	r3, 8004984 <strncmp+0xa8>
 8004956:	1c6c      	adds	r4, r5, #1
 8004958:	440c      	add	r4, r1
 800495a:	1c8b      	adds	r3, r1, #2
 800495c:	4601      	mov	r1, r0
 800495e:	e004      	b.n	800496a <strncmp+0x8e>
 8004960:	42a3      	cmp	r3, r4
 8004962:	d00c      	beq.n	800497e <strncmp+0xa2>
 8004964:	3301      	adds	r3, #1
 8004966:	2800      	cmp	r0, #0
 8004968:	d0ec      	beq.n	8004944 <strncmp+0x68>
 800496a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800496e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8004972:	4290      	cmp	r0, r2
 8004974:	d0f4      	beq.n	8004960 <strncmp+0x84>
 8004976:	e7e4      	b.n	8004942 <strncmp+0x66>
 8004978:	4610      	mov	r0, r2
 800497a:	bc30      	pop	{r4, r5}
 800497c:	4770      	bx	lr
 800497e:	2000      	movs	r0, #0
 8004980:	bc30      	pop	{r4, r5}
 8004982:	4770      	bx	lr
 8004984:	4618      	mov	r0, r3
 8004986:	e7dd      	b.n	8004944 <strncmp+0x68>
 8004988:	4618      	mov	r0, r3
 800498a:	e7da      	b.n	8004942 <strncmp+0x66>
 800498c:	4628      	mov	r0, r5
 800498e:	e7d9      	b.n	8004944 <strncmp+0x68>

08004990 <register_fini>:
 8004990:	4b02      	ldr	r3, [pc, #8]	; (800499c <register_fini+0xc>)
 8004992:	b113      	cbz	r3, 800499a <register_fini+0xa>
 8004994:	4802      	ldr	r0, [pc, #8]	; (80049a0 <register_fini+0x10>)
 8004996:	f000 b805 	b.w	80049a4 <atexit>
 800499a:	4770      	bx	lr
 800499c:	00000000 	.word	0x00000000
 80049a0:	080049b1 	.word	0x080049b1

080049a4 <atexit>:
 80049a4:	4601      	mov	r1, r0
 80049a6:	2000      	movs	r0, #0
 80049a8:	4602      	mov	r2, r0
 80049aa:	4603      	mov	r3, r0
 80049ac:	f000 b818 	b.w	80049e0 <__register_exitproc>

080049b0 <__libc_fini_array>:
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	4d09      	ldr	r5, [pc, #36]	; (80049d8 <__libc_fini_array+0x28>)
 80049b4:	4c09      	ldr	r4, [pc, #36]	; (80049dc <__libc_fini_array+0x2c>)
 80049b6:	1b64      	subs	r4, r4, r5
 80049b8:	10a4      	asrs	r4, r4, #2
 80049ba:	bf18      	it	ne
 80049bc:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 80049c0:	d005      	beq.n	80049ce <__libc_fini_array+0x1e>
 80049c2:	3c01      	subs	r4, #1
 80049c4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80049c8:	4798      	blx	r3
 80049ca:	2c00      	cmp	r4, #0
 80049cc:	d1f9      	bne.n	80049c2 <__libc_fini_array+0x12>
 80049ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049d2:	f000 b99f 	b.w	8004d14 <_fini>
 80049d6:	bf00      	nop
 80049d8:	08004d28 	.word	0x08004d28
 80049dc:	08004d2c 	.word	0x08004d2c

080049e0 <__register_exitproc>:
 80049e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e2:	4c27      	ldr	r4, [pc, #156]	; (8004a80 <__register_exitproc+0xa0>)
 80049e4:	6826      	ldr	r6, [r4, #0]
 80049e6:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 80049ea:	b085      	sub	sp, #20
 80049ec:	4607      	mov	r7, r0
 80049ee:	2c00      	cmp	r4, #0
 80049f0:	d041      	beq.n	8004a76 <__register_exitproc+0x96>
 80049f2:	6865      	ldr	r5, [r4, #4]
 80049f4:	2d1f      	cmp	r5, #31
 80049f6:	dd1e      	ble.n	8004a36 <__register_exitproc+0x56>
 80049f8:	4822      	ldr	r0, [pc, #136]	; (8004a84 <__register_exitproc+0xa4>)
 80049fa:	b918      	cbnz	r0, 8004a04 <__register_exitproc+0x24>
 80049fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a00:	b005      	add	sp, #20
 8004a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a04:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004a08:	9103      	str	r1, [sp, #12]
 8004a0a:	9202      	str	r2, [sp, #8]
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	f3af 8000 	nop.w
 8004a12:	9903      	ldr	r1, [sp, #12]
 8004a14:	9a02      	ldr	r2, [sp, #8]
 8004a16:	9b01      	ldr	r3, [sp, #4]
 8004a18:	4604      	mov	r4, r0
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	d0ee      	beq.n	80049fc <__register_exitproc+0x1c>
 8004a1e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8004a22:	6025      	str	r5, [r4, #0]
 8004a24:	2000      	movs	r0, #0
 8004a26:	6060      	str	r0, [r4, #4]
 8004a28:	4605      	mov	r5, r0
 8004a2a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8004a2e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8004a32:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8004a36:	b93f      	cbnz	r7, 8004a48 <__register_exitproc+0x68>
 8004a38:	1cab      	adds	r3, r5, #2
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	3501      	adds	r5, #1
 8004a3e:	6065      	str	r5, [r4, #4]
 8004a40:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8004a44:	b005      	add	sp, #20
 8004a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a48:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8004a4c:	f04f 0c01 	mov.w	ip, #1
 8004a50:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8004a54:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8004a58:	fa0c f205 	lsl.w	r2, ip, r5
 8004a5c:	4316      	orrs	r6, r2
 8004a5e:	2f02      	cmp	r7, #2
 8004a60:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8004a64:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8004a68:	d1e6      	bne.n	8004a38 <__register_exitproc+0x58>
 8004a6a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8004a74:	e7e0      	b.n	8004a38 <__register_exitproc+0x58>
 8004a76:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 8004a7a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8004a7e:	e7b8      	b.n	80049f2 <__register_exitproc+0x12>
 8004a80:	08004d04 	.word	0x08004d04
 8004a84:	00000000 	.word	0x00000000
 8004a88:	4d544553 	.word	0x4d544553
 8004a8c:	00004341 	.word	0x00004341
 8004a90:	74697571 	.word	0x74697571
 8004a94:	00000000 	.word	0x00000000
 8004a98:	0a657942 	.word	0x0a657942
 8004a9c:	00000000 	.word	0x00000000
 8004aa0:	ccbbaadd 	.word	0xccbbaadd
 8004aa4:	00002211 	.word	0x00002211
 8004aa8:	0800a8c0 	.word	0x0800a8c0
 8004aac:	00ffffff 	.word	0x00ffffff
 8004ab0:	0100a8c0 	.word	0x0100a8c0
 8004ab4:	0a00a8c0 	.word	0x0a00a8c0
 8004ab8:	31676552 	.word	0x31676552
 8004abc:	00000000 	.word	0x00000000
 8004ac0:	32676552 	.word	0x32676552
 8004ac4:	00000000 	.word	0x00000000
 8004ac8:	546e7442 	.word	0x546e7442
 8004acc:	00747365 	.word	0x00747365
 8004ad0:	63656843 	.word	0x63656843
 8004ad4:	6d69546b 	.word	0x6d69546b
 8004ad8:	00007265 	.word	0x00007265
 8004adc:	454c4449 	.word	0x454c4449
 8004ae0:	00000000 	.word	0x00000000
 8004ae4:	20726d54 	.word	0x20726d54
 8004ae8:	00637653 	.word	0x00637653
 8004aec:	7844454c 	.word	0x7844454c
 8004af0:	00000000 	.word	0x00000000
 8004af4:	2f707041 	.word	0x2f707041
 8004af8:	334d5453 	.word	0x334d5453
 8004afc:	2d344632 	.word	0x2d344632
 8004b00:	63736944 	.word	0x63736944
 8004b04:	7265766f 	.word	0x7265766f
 8004b08:	694c2f79 	.word	0x694c2f79
 8004b0c:	72617262 	.word	0x72617262
 8004b10:	2f736569 	.word	0x2f736569
 8004b14:	334d5453 	.word	0x334d5453
 8004b18:	78344632 	.word	0x78344632
 8004b1c:	74535f78 	.word	0x74535f78
 8004b20:	72655064 	.word	0x72655064
 8004b24:	5f687069 	.word	0x5f687069
 8004b28:	76697244 	.word	0x76697244
 8004b2c:	732f7265 	.word	0x732f7265
 8004b30:	6d2f6372 	.word	0x6d2f6372
 8004b34:	2e637369 	.word	0x2e637369
 8004b38:	00000063 	.word	0x00000063
 8004b3c:	2f707041 	.word	0x2f707041
 8004b40:	334d5453 	.word	0x334d5453
 8004b44:	2d344632 	.word	0x2d344632
 8004b48:	63736944 	.word	0x63736944
 8004b4c:	7265766f 	.word	0x7265766f
 8004b50:	694c2f79 	.word	0x694c2f79
 8004b54:	72617262 	.word	0x72617262
 8004b58:	2f736569 	.word	0x2f736569
 8004b5c:	334d5453 	.word	0x334d5453
 8004b60:	78344632 	.word	0x78344632
 8004b64:	74535f78 	.word	0x74535f78
 8004b68:	72655064 	.word	0x72655064
 8004b6c:	5f687069 	.word	0x5f687069
 8004b70:	76697244 	.word	0x76697244
 8004b74:	732f7265 	.word	0x732f7265
 8004b78:	732f6372 	.word	0x732f6372
 8004b7c:	32336d74 	.word	0x32336d74
 8004b80:	78783466 	.word	0x78783466
 8004b84:	7478655f 	.word	0x7478655f
 8004b88:	00632e69 	.word	0x00632e69
 8004b8c:	2f707041 	.word	0x2f707041
 8004b90:	334d5453 	.word	0x334d5453
 8004b94:	2d344632 	.word	0x2d344632
 8004b98:	63736944 	.word	0x63736944
 8004b9c:	7265766f 	.word	0x7265766f
 8004ba0:	694c2f79 	.word	0x694c2f79
 8004ba4:	72617262 	.word	0x72617262
 8004ba8:	2f736569 	.word	0x2f736569
 8004bac:	334d5453 	.word	0x334d5453
 8004bb0:	78344632 	.word	0x78344632
 8004bb4:	74535f78 	.word	0x74535f78
 8004bb8:	72655064 	.word	0x72655064
 8004bbc:	5f687069 	.word	0x5f687069
 8004bc0:	76697244 	.word	0x76697244
 8004bc4:	732f7265 	.word	0x732f7265
 8004bc8:	732f6372 	.word	0x732f6372
 8004bcc:	32336d74 	.word	0x32336d74
 8004bd0:	78783466 	.word	0x78783466
 8004bd4:	6970675f 	.word	0x6970675f
 8004bd8:	00632e6f 	.word	0x00632e6f
 8004bdc:	2f707041 	.word	0x2f707041
 8004be0:	334d5453 	.word	0x334d5453
 8004be4:	2d344632 	.word	0x2d344632
 8004be8:	63736944 	.word	0x63736944
 8004bec:	7265766f 	.word	0x7265766f
 8004bf0:	694c2f79 	.word	0x694c2f79
 8004bf4:	72617262 	.word	0x72617262
 8004bf8:	2f736569 	.word	0x2f736569
 8004bfc:	334d5453 	.word	0x334d5453
 8004c00:	78344632 	.word	0x78344632
 8004c04:	74535f78 	.word	0x74535f78
 8004c08:	72655064 	.word	0x72655064
 8004c0c:	5f687069 	.word	0x5f687069
 8004c10:	76697244 	.word	0x76697244
 8004c14:	732f7265 	.word	0x732f7265
 8004c18:	732f6372 	.word	0x732f6372
 8004c1c:	32336d74 	.word	0x32336d74
 8004c20:	78783466 	.word	0x78783466
 8004c24:	6363725f 	.word	0x6363725f
 8004c28:	0000632e 	.word	0x0000632e
 8004c2c:	2f707041 	.word	0x2f707041
 8004c30:	334d5453 	.word	0x334d5453
 8004c34:	2d344632 	.word	0x2d344632
 8004c38:	63736944 	.word	0x63736944
 8004c3c:	7265766f 	.word	0x7265766f
 8004c40:	694c2f79 	.word	0x694c2f79
 8004c44:	72617262 	.word	0x72617262
 8004c48:	2f736569 	.word	0x2f736569
 8004c4c:	334d5453 	.word	0x334d5453
 8004c50:	78344632 	.word	0x78344632
 8004c54:	74535f78 	.word	0x74535f78
 8004c58:	72655064 	.word	0x72655064
 8004c5c:	5f687069 	.word	0x5f687069
 8004c60:	76697244 	.word	0x76697244
 8004c64:	732f7265 	.word	0x732f7265
 8004c68:	732f6372 	.word	0x732f6372
 8004c6c:	32336d74 	.word	0x32336d74
 8004c70:	78783466 	.word	0x78783466
 8004c74:	6970735f 	.word	0x6970735f
 8004c78:	0000632e 	.word	0x0000632e
 8004c7c:	2f707041 	.word	0x2f707041
 8004c80:	334d5453 	.word	0x334d5453
 8004c84:	2d344632 	.word	0x2d344632
 8004c88:	63736944 	.word	0x63736944
 8004c8c:	7265766f 	.word	0x7265766f
 8004c90:	694c2f79 	.word	0x694c2f79
 8004c94:	72617262 	.word	0x72617262
 8004c98:	2f736569 	.word	0x2f736569
 8004c9c:	334d5453 	.word	0x334d5453
 8004ca0:	78344632 	.word	0x78344632
 8004ca4:	74535f78 	.word	0x74535f78
 8004ca8:	72655064 	.word	0x72655064
 8004cac:	5f687069 	.word	0x5f687069
 8004cb0:	76697244 	.word	0x76697244
 8004cb4:	732f7265 	.word	0x732f7265
 8004cb8:	732f6372 	.word	0x732f6372
 8004cbc:	32336d74 	.word	0x32336d74
 8004cc0:	78783466 	.word	0x78783466
 8004cc4:	7379735f 	.word	0x7379735f
 8004cc8:	2e676663 	.word	0x2e676663
 8004ccc:	00000063 	.word	0x00000063

08004cd0 <xLEDs>:
 8004cd0:	03020001                                ....

08004cd4 <ucExpectedStackBytes.8478>:
 8004cd4:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 8004ce4:	a5a5a5a5                                ....

08004ce8 <GPIO_PIN>:
 8004ce8:	20001000 80004000                       ... .@..

08004cf0 <GPIO_CLK>:
 8004cf0:	00000008 00000008 00000008 00000008     ................
 8004d00:	00000043                                C...

08004d04 <_global_impure_ptr>:
 8004d04:	20000020                                 .. 

08004d08 <_init>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	bf00      	nop
 8004d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0e:	bc08      	pop	{r3}
 8004d10:	469e      	mov	lr, r3
 8004d12:	4770      	bx	lr

08004d14 <_fini>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	bf00      	nop
 8004d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1a:	bc08      	pop	{r3}
 8004d1c:	469e      	mov	lr, r3
 8004d1e:	4770      	bx	lr
